[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics n Applications\nThis is the course website of IS415 I study this term. You will find my course work publish on this website."
  },
  {
    "objectID": "in-class_Ex/In-class-Ex03/In-class_Ex03.html",
    "href": "in-class_Ex/In-class-Ex03/In-class_Ex03.html",
    "title": "Geospatial data wrangling",
    "section": "",
    "text": "library(maptools)\n\nLoading required package: sp\n\n\nPlease note that 'maptools' will be retired during October 2023,\nplan transition at your earliest convenience (see\nhttps://r-spatial.org/r/2023/05/15/evolution4.html and earlier blogs\nfor guidance);some functionality will be moved to 'sp'.\n Checking rgeos availability: FALSE\n\n\n\nAttaching package: 'maptools'\n\n\nThe following object is masked from 'package:sp':\n\n    sp2Mondrian\n\npacman::p_load(sf, raster, spatstat, tmap,tidyverse)\nchildcare_sf &lt;- st_read(\"../../Hands-on_Ex/Hands-on_Ex03/data/ChildCareServices.geojson\")%&gt;%\n  st_transform(crs = 3414)\n\nReading layer `ChildCareServices' from data source \n  `C:\\FieryCake\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nmpsz &lt;- st_read(dsn = \"../../Hands-on_Ex/data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\FieryCake\\IS415-GAA\\Hands-on_Ex\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nsimplified_country &lt;- st_simplify(mpsz, preserveTopology = TRUE)\n\nsg_sf &lt;- st_union(simplified_country)\n\nplot(sg_sf)"
  },
  {
    "objectID": "in-class_Ex/In-class-Ex03/In-class_Ex03.html#changing-to-ppp-format",
    "href": "in-class_Ex/In-class-Ex03/In-class_Ex03.html#changing-to-ppp-format",
    "title": "Geospatial data wrangling",
    "section": "Changing to ppp format",
    "text": "Changing to ppp format\n\nchildcare_ppp &lt;- as(childcare_sp, \"ppp\")"
  },
  {
    "objectID": "in-class_Ex/In-class-Ex03/In-class_Ex03.html#changing-to-ppp-format-sf-to-ppp",
    "href": "in-class_Ex/In-class-Ex03/In-class_Ex03.html#changing-to-ppp-format-sf-to-ppp",
    "title": "Geospatial data wrangling",
    "section": "Changing to ppp format (sf to ppp)",
    "text": "Changing to ppp format (sf to ppp)\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\n\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1925 character character \n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units"
  },
  {
    "objectID": "in-class_Ex/In-class-Ex03/In-class_Ex03.html#handling-duplicated-points",
    "href": "in-class_Ex/In-class-Ex03/In-class_Ex03.html#handling-duplicated-points",
    "title": "Geospatial data wrangling",
    "section": "Handling duplicated points",
    "text": "Handling duplicated points\n\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nTo count the number of co-incidence point, we will use the multiplicity() function as shown in the code chunk below\n\n#multiplicity(childcare_ppp)\n\n\nCreating owin object : sf method - sf method need to use sf layer\n\nsg_owin &lt;- as.owin(sg_sf)\nplot(sg_owin)\n\n\n\n\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n#summary(childcareSG_ppp)\nplot(childcareSG_ppp)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 1925 symbols are shown in the symbol map\n\n\n\n\nplot(childcareSG_ppp, pch = 16, legend = FALSE, cex = 1)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\n\n\n\n##using tidyverse and sf to get area for areas\n\nmpsz_sf &lt;- st_read(dsn = \"../../Hands-on_Ex/data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\FieryCake\\IS415-GAA\\Hands-on_Ex\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\npg &lt;-mpsz_sf%&gt;%filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;-mpsz_sf%&gt;%filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;-mpsz_sf%&gt;%filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;-mpsz_sf%&gt;%filter(PLN_AREA_N == \"JURONG WEST\")\n\n\nplot(pg)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on-Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on-Ex02.html",
    "title": "Hands-on Exercise 2: Chloropeth",
    "section": "",
    "text": "Chloropeth Map (Heatmap)\nA choropleth map is a type of thematic map in which areas are shaded or patterned in proportion to a statistical variable that represents an aggregate summary of a geographic characteristic within each area, such as population or per-capita income.\n\nClassified choropleth map\n\nChoropleth maps can be either classified or unclassified.\nA classed choropleth map combines areal units into a smaller number of groups. Interval levels may vary, but typically 4 to 7 are used in a map. There is different classification techniques used to divide up the intervals.\n\n\n\nUnclassified choropleth map\n\nUnclassed choropleth maps are similar to classed choropleth maps; however, unclassed choropleth maps do not have an averaged statistic towards each particular colour.\n\n\n\nChoosing an appropriate number of classes\n\nSturges formula\nInterval not more than 4, not more than 12 colours, 7-8 shade same color\n\nData classification\n\nEqual int(Range of bin same), Quantile(Divide into 20%’s, easy to see density), Natural breaks(Jenks)- make sure data is not highly skewed, manual - map the standard deviation - useful if data represents normal distribution\n\nColour scheme\n\nColorBrewer - systematic color scheme\nColor split int (Nominal, Sequential - When all positive or all negative, Diverging - use when some positive some negative)\n\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\nImporting Geospatial Data into R\n\nmpsz &lt;- st_read(dsn = \"../data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\FieryCake\\IS415-GAA\\Hands-on_Ex\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nImporting Attribute Data into R\n\npopdata &lt;- read_csv(\"../data/aspatial/respopagesextod2011to2020.csv\")\n\nData Preparation\n\ncolumn_names &lt;- names(popdata)\n\n# Print all column names\ncat(\"Column Names: \", paste(column_names, collapse = \", \"), \"\\n\")\n\nColumn Names:  PA, SZ, AG, Sex, TOD, Pop, Time \n\n\nChecking what does pivot_wider do\n\nprint(popdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) )\n\n# A tibble: 332 × 21\n   PA      SZ    `0_to_4` `10_to_14` `15_to_19` `20_to_24` `25_to_29` `30_to_34`\n   &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 Ang Mo… Ang …      170        280        340        270        260        310\n 2 Ang Mo… Chen…     1060       1040       1160       1330       1720       2020\n 3 Ang Mo… Chon…      850       1020       1070       1310       1610       1890\n 4 Ang Mo… Kebu…      680        960       1010       1170       1410       1420\n 5 Ang Mo… Semb…      210        400        450        500        500        340\n 6 Ang Mo… Shan…      560        640        700        860        970       1030\n 7 Ang Mo… Tago…      200        390        460        590        680        500\n 8 Ang Mo… Town…      670        930        830        890       1310       1410\n 9 Ang Mo… Yio …        0          0          0          0          0          0\n10 Ang Mo… Yio …      160        210        260        300        320        240\n# ℹ 322 more rows\n# ℹ 13 more variables: `35_to_39` &lt;dbl&gt;, `40_to_44` &lt;dbl&gt;, `45_to_49` &lt;dbl&gt;,\n#   `50_to_54` &lt;dbl&gt;, `55_to_59` &lt;dbl&gt;, `5_to_9` &lt;dbl&gt;, `60_to_64` &lt;dbl&gt;,\n#   `65_to_69` &lt;dbl&gt;, `70_to_74` &lt;dbl&gt;, `75_to_79` &lt;dbl&gt;, `80_to_84` &lt;dbl&gt;,\n#   `85_to_89` &lt;dbl&gt;, `90_and_over` &lt;dbl&gt;\n\n\nData wrangling The following data wrangling and transformation functions will be used:\npivot_wider() of tidyr package, and mutate(), filter(), group_by() and select() of dplyr package\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\nJoining the attribute data and geospatial data\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\nwrite_rds(mpsz_pop2020, \"../data/rds/mpszpop2020.rds\")\n\nChoropleth Mapping Geospatial Data Using tmap Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nTwo approaches can be used to prepare thematic map using tmap, they are:\nPlotting a thematic map quickly by using qtm(). Plotting highly customisable thematic map by using tmap elements.\n2.4.1 Plotting a choropleth map quickly by using qtm()\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\nprint(mpsz_pop2020)\n\nSimple feature collection with 323 features and 21 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area              PA YOUNG ECONOMY ACTIVE AGED\n1  29220.19   5267.381  1630379.3            &lt;NA&gt;    NA             NA   NA\n2  29782.05   3506.107   559816.2          OUTRAM  1200           2860 2120\n3  29974.66   1740.926   160807.5 SINGAPORE RIVER     0             40   10\n4  29933.77   3313.625   595428.9     BUKIT MERAH  3150           6900 3320\n5  30005.70   2825.594   387429.4     BUKIT MERAH  2900           6020 1740\n6  29991.38   4428.913  1030378.8     BUKIT MERAH  3340           6800 3420\n7  30230.86   3275.312   551732.0     BUKIT MERAH  3130           7700 3610\n8  30222.86   2208.619   290184.7 SINGAPORE RIVER     0             50   10\n9  29893.78   6571.323  1084792.3      QUEENSTOWN  1290           2600  610\n10 30104.18   3454.239   631644.3      QUEENSTOWN    50            140   60\n   TOTAL DEPENDENCY                       geometry\n1     NA         NA MULTIPOLYGON (((31495.56 30...\n2   6180  1.1608392 MULTIPOLYGON (((29092.28 30...\n3     50  0.2500000 MULTIPOLYGON (((29932.33 29...\n4  13370  0.9376812 MULTIPOLYGON (((27131.28 30...\n5  10660  0.7707641 MULTIPOLYGON (((26451.03 30...\n6  13560  0.9941176 MULTIPOLYGON (((25899.7 297...\n7  14440  0.8753247 MULTIPOLYGON (((27746.95 30...\n8     60  0.2000000 MULTIPOLYGON (((29351.26 29...\n9   4500  0.7307692 MULTIPOLYGON (((20996.49 30...\n10   250  0.7857143 MULTIPOLYGON (((24472.11 29...\n\n\n2.4.2 Creating a choropleth map by using tmap’s elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n2.4.2.1 Drawing a base map\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n2.4.2.2 Drawing a choropleth map using tm_polygons()\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n2.4.2.3 Drawing a choropleth map using tm_fill() and *tm_border()**\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n2.4.3 Data classification methods of tmap\nJenks (Quantile??)\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nEqual\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n2.4.3.2 Plotting choropleth map with custome break\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nCustom break\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n2.4.4 Colour Scheme\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nReverse colour\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n2.4.5 Map Layouts 2.4.5.1 Map Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n2.4.5.2 Map style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n2.4.5.3 Cartographic Furniture - includes compass, scales etc\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n2.4.6 Drawing Small Multiple Choropleth Maps\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\nDifferentaesthetic argument\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n2.4.6.2 By defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n2.4.6.3 By creating multiple stand-alone maps with tmap_arrange()\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n2.4.7 Mappping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyvertse and sf packages\n\npacman::p_load(tidyverse,sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this section, I will install and load tidyvertse and sf packages\n\npacman::p_load(tidyverse,sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Plotting the Geospatial Data",
    "text": "Plotting the Geospatial Data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-geospatial-data---geometry",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-the-geospatial-data---geometry",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Plotting the Geospatial Data - Geometry",
    "text": "Plotting the Geospatial Data - Geometry\n\nplot(st_geometry(mpsz))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-planning-area-a",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-planning-area-a",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Plotting planning area A",
    "text": "Plotting planning area A\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Assigning EPSG code to a simple feature data frame",
    "text": "Assigning EPSG code to a simple feature data frame\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#correcting-epsg-code",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#correcting-epsg-code",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Correcting EPSG Code",
    "text": "Correcting EPSG Code\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#checking-epsg-code",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#checking-epsg-code",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Checking EPSG Code",
    "text": "Checking EPSG Code\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Transforming the projection of preschool from wgs84 to svy21",
    "text": "Transforming the projection of preschool from wgs84 to svy21\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Creating a simple feature data frame from an aspatial data frame",
    "text": "Creating a simple feature data frame from an aspatial data frame\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geoprocessing-with-sf-package-buffering",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geoprocessing-with-sf-package-buffering",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Geoprocessing with sf package Buffering",
    "text": "Geoprocessing with sf package Buffering\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \ndist=5,nQuadSegs = 30)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#calculate-area",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#calculate-area",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Calculate Area",
    "text": "Calculate Area\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#calculate-total-land-involved",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#calculate-total-land-involved",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Calculate total land involved",
    "text": "Calculate total land involved\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#point-in-polygon-count",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#point-in-polygon-count",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Point-in-polygon count",
    "text": "Point-in-polygon count\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#summary",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#summary",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Summary",
    "text": "Summary\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#top_n",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#top_n",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Top_N",
    "text": "Top_N\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#mutate-of-dplyr-package-is-used-to-compute-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#mutate-of-dplyr-package-is-used-to-compute-density",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Mutate() of dplyr package is used to compute density",
    "text": "Mutate() of dplyr package is used to compute density\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-pre-schol-distribution-using-gg-plot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-pre-schol-distribution-using-gg-plot",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Plotting pre-schol distribution using gg-plot",
    "text": "Plotting pre-schol distribution using gg-plot\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatterplot-pre-school-density-vs-count--ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#scatterplot-pre-school-density-vs-count--ggplot",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "Scatterplot (Pre school density vs count- ggplot)",
    "text": "Scatterplot (Pre school density vs count- ggplot)\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html",
    "title": "Loading packages and data",
    "section": "",
    "text": "##install.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\nlibrary(maptools)\n\nLoading required package: sp\n\n\nPlease note that 'maptools' will be retired during October 2023,\nplan transition at your earliest convenience (see\nhttps://r-spatial.org/r/2023/05/15/evolution4.html and earlier blogs\nfor guidance);some functionality will be moved to 'sp'.\n Checking rgeos availability: FALSE\n\n\n\nAttaching package: 'maptools'\n\n\nThe following object is masked from 'package:sp':\n\n    sp2Mondrian\n\npacman::p_load(sf, raster, spatstat, tmap,tidyverse)\n\n\nchildcare_sf &lt;- st_read(\"data/ChildCareServices.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `ChildCareServices' from data source \n  `C:\\FieryCake\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n\nmpsz &lt;- st_read(dsn = \"../data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\FieryCake\\IS415-GAA\\Hands-on_Ex\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpszNoSea &lt;- st_read(dsn = \"../data/geospatial\", \n                layer = \"MP14_SUBZONE_NO_SEA_PL\")\n\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `C:\\FieryCake\\IS415-GAA\\Hands-on_Ex\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#importing-geospatial-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#importing-geospatial-data-into-r",
    "title": "Loading packages and data",
    "section": "",
    "text": "mpsz &lt;- st_read(dsn = \"../data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\FieryCake\\IS415-GAA\\Hands-on_Ex\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpszNoSea &lt;- st_read(dsn = \"../data/geospatial\", \n                layer = \"MP14_SUBZONE_NO_SEA_PL\")\n\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `C:\\FieryCake\\IS415-GAA\\Hands-on_Ex\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#mapping-the-geospatial-data-sets",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#mapping-the-geospatial-data-sets",
    "title": "Loading packages and data",
    "section": "4.4.2 Mapping the geospatial data sets",
    "text": "4.4.2 Mapping the geospatial data sets\n\n#tmap_mode('view')\n#tm_shape(childcare_sf)+\n#  tm_dots()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "Loading packages and data",
    "section": "4.5.2 Converting the Spatial* class into generic sp format",
    "text": "4.5.2 Converting the Spatial* class into generic sp format\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 1 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Loading packages and data",
    "section": "4.5.3 Converting the generic sp format into spatstat’s ppp format",
    "text": "4.5.3 Converting the generic sp format into spatstat’s ppp format\n\nclass(childcare_sp)\n\n[1] \"SpatialPoints\"\nattr(,\"package\")\n[1] \"sp\"\n\n\n\nchildcare_ppp &lt;- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1925 points\nwindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#handling-duplicated-points",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#handling-duplicated-points",
    "title": "Loading packages and data",
    "section": "4.5.4 Handling duplicated points",
    "text": "4.5.4 Handling duplicated points\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    3    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    4    1    1    1    1    1    1    1    1    1    1    2 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    3    1    1    1    2    1   10    1    1    1    1    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    2    1    1    3    1    1    1    2    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    2    2    2    1    1    1    1    1    1    1    1    2    1    1    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    2    2    2    1    1    1    1    1    2    1    4    1    1    2 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   3    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   1    1    1    1    1   10    1    1    3    1    1    1    1    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    2    6    1    2    1    1    2    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   3    2    3    2    1    2    1    1    2    4    1    6    6    1    1    1 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   2    1    1    1    1    2    1    1    1    1    1    1    3    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    4    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    2    1    1    1    2    1    1    1    2    1    1    1    1    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    2    1    2    2    1    1    1    1    2    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   4    1    1    1    1    2    1    1    1    1    1    1    2    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   2    2    1    1    1    1    1   10    1    2    1    1    1    2    1    3 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1   10   10   10    1    1    1    1    1    1    1    1    1 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    2    1    2    1    1    1    1    3    1    2    1    1    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    3    1    1    1    1    1    2    1    1    2 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    3    1    1    1    1    1    1    1    1    2    2    2    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    3    1    1    1    2    1    1    1    2    2    1    1    1    1    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    4    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    4    1    1    1    1    1    1    4    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    2    1    1 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    3    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    1    1    1    1   10    1    1    1    1    1    2 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    1    2    1    2    1   10    1    4    1    2    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   3    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    3    1    1    3    1    1    1    1    2    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    2 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    2    1    1    1    1    1    2    2    1    1    1    1    2    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    2    1    2    1    1    1    2    1    1    1    2    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    2    1    1    2    1    1    1    1    1    1    1    1    2    1 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    2    2    1    1    1    1    2    1    1    1    1    2    1    1    2 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    2    4    1    1    1    1    1    1    2    1    2    2    2 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   2    1    1    1    1    2    1    1    2    2    2    2    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    2    2    2    1    1    1    1    1    2    1    1    2    2    2    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    2    1    1    2    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   2    1    2    1    2    1    1    1    1    1    1    2    2    1    1    2 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    2    1    2    1    2    1    1    1    1    1    2    1    1    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    2    1    2    2    2    2    2    1    1    1    1    1    2    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    2    1    1    2    1    1    1    1    2    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    3    1    1    1    1    1    1    1   10 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   2    1    3    2    1    2    1    1    2    3    2    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    2    1    2    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    4    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n  10    1    2    4    1    1    1    4    1    4    1    1    1    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    1    1    1    1    1    4    2    3    2    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   2    2    1    1    1    1    1    2    2    3    1    1    1    1    1    2 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   2    2    2    1    1    1    6    1    1    1    1    1    1    1    1    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    1    1    4    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    2    2    1    1    1    1    1    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    2    1    1    1    1    2    1    1    1    1    2    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   2    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 \n   1    1    1    1    1    1    1    1    1    6    1    1    1    1    1    1 \n1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 \n   1    1    1    1    1    1    1    3    1    1    4    1    1    2    1    1 \n1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 \n   2    1    1    1    2    1    4    1    2    1    1    1    1    1    1    1 \n1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 \n   1    1    1    1    1    1    1    1    2    1    1    2    1    1    1    1 \n1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 \n   1    1    1    1    2    1    1    3    1    1    1    2    1    1    1    1 \n1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 \n   2    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 \n   3    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 \n   1    1    1    4    1    1    1    6    1    1    1    1    1    1    1    1 \n1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 \n   1    1    1    2    1    1    1    2    1    1    1    1    1    2    1    1 \n1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 \n   1    2    1    1    1    1    1    1    1    1    2    2    2    1    1    1 \n1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 \n   2    1    2    1    2    1    2    1    1    2    1    2    2    2    2    1 \n1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 \n   1    1    1    1    1    2    1    1    1    2    1    1    1    1    2    1 \n1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 \n   1    4    1    4    1    4    1    1    2    1    1    1    1    1    3    1 \n1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 \n   1    1    1    2    2    2    2    2    2    2    2    1    1    2    2    2 \n1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 \n   1    2    1    1    1    1    1    2    2    2    1    2    2    2    2    1 \n1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 \n   2    1    1    1    1    1    1    1    2    2    1    2    1    1    1    1 \n1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 \n   1    1    1    1    2    1    2    2    2    2    2    2    1    1    2    1 \n1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 \n   1    1    1    2    2    2    2    2    1    1    1    2    1    1    2    2 \n1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 \n   1    2    1    1    2    1    1    2    2    2    1    2    1    2    1    1 \n1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 \n   1    1    1    1    1    1    2    1    1    1    1    4    1    1    1    1 \n1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 \n   3    1    1    2    1    1    1    2    1    1    1    1    1    2    2    1 \n1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 \n   1    1    2    1    2    2    1    1    1    1    1    2    1    1    2    1 \n1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 \n   1    3    2    2    2    1    2    1    3    1    1    1    1    1    1    1 \n1921 1922 1923 1924 1925 \n   1    1    1    1    3 \n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 338\n\n\n\n#tmap_mode('view')\n#tm_shape(childcare) +\n#  tm_dots(alpha=0.4, \n #         size=0.05)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#to-remove-dupplicates",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#to-remove-dupplicates",
    "title": "Loading packages and data",
    "section": "TO REMOVE DUPPLICATES",
    "text": "TO REMOVE DUPPLICATES\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#creating-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#creating-owin-object",
    "title": "Loading packages and data",
    "section": "4.5.5 Creating owin object",
    "text": "4.5.5 Creating owin object\n\nsg_owin &lt;- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#combining-point-events-object-and-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#combining-point-events-object-and-owin-object",
    "title": "Loading packages and data",
    "section": "4.5.6 Combining point events object and owin object",
    "text": "4.5.6 Combining point events object and owin object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.461811e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n80 separate polygons (35 holes)\n                  vertices         area relative.area\npolygon 1                4  9.47108e+01      1.21e-07\npolygon 2               37  1.29481e+04      1.66e-05\npolygon 3               30  4.28933e+03      5.49e-06\npolygon 4              145  9.61782e+05      1.23e-03\npolygon 5              227  1.10308e+06      1.41e-03\npolygon 6               19  3.09221e+04      3.95e-05\npolygon 7               10  6.60195e+03      8.44e-06\npolygon 8              234  2.08755e+06      2.67e-03\npolygon 9               22  6.74651e+03      8.63e-06\npolygon 10              71  5.63061e+03      7.20e-06\npolygon 11              10  1.99717e+02      2.55e-07\npolygon 12           14650  6.97996e+08      8.93e-01\npolygon 13 (hole)        3 -2.05920e-03     -2.63e-12\npolygon 14 (hole)        3 -2.89050e-05     -3.70e-14\npolygon 15 (hole)        3 -2.83151e-01     -3.62e-10\npolygon 16 (hole)        3 -3.99521e-02     -5.11e-11\npolygon 17 (hole)        3 -4.95057e-02     -6.33e-11\npolygon 18 (hole)        3 -3.65501e-03     -4.67e-12\npolygon 19 (hole)        4 -2.05611e-02     -2.63e-11\npolygon 20 (hole)        3 -1.68316e-04     -2.15e-13\npolygon 21 (hole)       26 -1.25665e+03     -1.61e-06\npolygon 22 (hole)        3 -2.18000e-06     -2.79e-15\npolygon 23 (hole)        3 -6.62377e-01     -8.47e-10\npolygon 24 (hole)        3 -2.09065e-03     -2.67e-12\npolygon 25 (hole)       36 -7.79904e+03     -9.97e-06\npolygon 26 (hole)        3 -8.83647e-03     -1.13e-11\npolygon 27 (hole)        3 -2.21090e+00     -2.83e-09\npolygon 28 (hole)       40 -6.00381e+03     -7.68e-06\npolygon 29 (hole)        7 -1.40545e-01     -1.80e-10\npolygon 30 (hole)       20 -4.39069e+00     -5.62e-09\npolygon 31 (hole)       28 -1.99862e+01     -2.56e-08\npolygon 32 (hole)       48 -1.38338e+02     -1.77e-07\npolygon 33 (hole)      349 -1.21433e+03     -1.55e-06\npolygon 34 (hole)       12 -8.36709e+01     -1.07e-07\npolygon 35 (hole)      317 -5.11280e+04     -6.54e-05\npolygon 36 (hole)       36 -4.01660e+04     -5.14e-05\npolygon 37              30  2.80002e+04      3.58e-05\npolygon 38              27  1.50315e+04      1.92e-05\npolygon 39              15  4.03300e+04      5.16e-05\npolygon 40            1045  4.44510e+06      5.68e-03\npolygon 41 (hole)       13 -3.91907e+02     -5.01e-07\npolygon 42              47  3.82087e+04      4.89e-05\npolygon 43              65  8.42861e+04      1.08e-04\npolygon 44             478  2.06120e+06      2.64e-03\npolygon 45             266  1.50631e+06      1.93e-03\npolygon 46             234  4.72886e+05      6.05e-04\npolygon 47              14  5.86546e+03      7.50e-06\npolygon 48              83  5.28920e+03      6.76e-06\npolygon 49              75  1.73526e+04      2.22e-05\npolygon 50             148  3.10395e+03      3.97e-06\npolygon 51             142  3.22293e+03      4.12e-06\npolygon 52              45  2.51218e+03      3.21e-06\npolygon 53              40  1.38607e+04      1.77e-05\npolygon 54              10  4.90942e+02      6.28e-07\npolygon 55              95  5.96187e+04      7.62e-05\npolygon 56 (hole)        4 -1.86410e-02     -2.38e-11\npolygon 57              64  3.43149e+04      4.39e-05\npolygon 58 (hole)        3 -1.98390e-03     -2.54e-12\npolygon 59 (hole)        3 -5.55856e-03     -7.11e-12\npolygon 60 (hole)        3 -5.12482e-03     -6.55e-12\npolygon 61 (hole)        3 -1.96410e-03     -2.51e-12\npolygon 62 (hole)        4 -1.13774e-02     -1.46e-11\npolygon 63             155  2.67502e+05      3.42e-04\npolygon 64             106  3.04104e+03      3.89e-06\npolygon 65            1027  1.27782e+06      1.63e-03\npolygon 66 (hole)        3 -3.23310e-04     -4.13e-13\npolygon 67 (hole)        3 -1.16959e-03     -1.50e-12\npolygon 68 (hole)        3 -1.46474e-03     -1.87e-12\npolygon 69             211  4.70521e+05      6.02e-04\npolygon 70               4  2.69313e+02      3.44e-07\npolygon 71             132  9.53357e+04      1.22e-04\npolygon 72               6  4.50259e+02      5.76e-07\npolygon 73             285  1.61128e+06      2.06e-03\npolygon 74              91  1.49663e+04      1.91e-05\npolygon 75              71  8.18750e+03      1.05e-05\npolygon 76             668  5.40368e+07      6.91e-02\npolygon 77              77  3.29939e+05      4.22e-04\npolygon 78             711  1.28815e+07      1.65e-02\npolygon 79 (hole)        3 -3.41405e-01     -4.37e-10\npolygon 80              44  2.26577e+03      2.90e-06\nenclosing rectangle: [2667.54, 56396.44] x [15748.72, 50256.33] units\n                     (53730 x 34510 units)\nWindow area = 781945000 square units\nFraction of frame area: 0.422\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#rescalling-kde-values-in-the-code-chunk-below-rescale-is-used-to-covert-the-unit-of-measurement-from-meter-to-kilometer.",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#rescalling-kde-values-in-the-code-chunk-below-rescale-is-used-to-covert-the-unit-of-measurement-from-meter-to-kilometer.",
    "title": "Loading packages and data",
    "section": "4.6.1.2 Rescalling KDE values In the code chunk below, rescale() is used to covert the unit of measurement from meter to kilometer.",
    "text": "4.6.1.2 Rescalling KDE values In the code chunk below, rescale() is used to covert the unit of measurement from meter to kilometer.\n\nchildcareSG_ppp.km &lt;- rescale(childcareSG_ppp, 1000, \"km\")\n\nRerun density\n\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#working-with-different-automatic-badwidth-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#working-with-different-automatic-badwidth-methods",
    "title": "Loading packages and data",
    "section": "4.6.2 Working with different automatic badwidth methods",
    "text": "4.6.2 Working with different automatic badwidth methods\n\n bw.CvL(childcareSG_ppp.km)\n\n  sigma \n4.54311 \n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.159749 1.396455 \n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897017 \n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2954419 \n\n\nBaddeley et. (2016) suggested the use of the bw.ppl() algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the bw.diggle() method seems to work best.\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#working-with-different-kernel-methods-the-code-chunk-below-will-be-used-to-compute-three-more-kernel-density-estimations-by-using-these-three-kernel-function.",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#working-with-different-kernel-methods-the-code-chunk-below-will-be-used-to-compute-three-more-kernel-density-estimations-by-using-these-three-kernel-function.",
    "title": "Loading packages and data",
    "section": "4.6.3 Working with different kernel methods The code chunk below will be used to compute three more kernel density estimations by using these three kernel function.",
    "text": "4.6.3 Working with different kernel methods The code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#computing-kde-by-using-adaptive-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#computing-kde-by-using-adaptive-bandwidth",
    "title": "Loading packages and data",
    "section": "4.7.2 Computing KDE by using adaptive bandwidth",
    "text": "4.7.2 Computing KDE by using adaptive bandwidth\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\nComparing fixed vs adaptive\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#converting-kde-output-into-grid-object.-the-result-is-the-same-we-just-convert-it-so-that-it-is-suitable-for-mapping-purposes",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#converting-kde-output-into-grid-object.-the-result-is-the-same-we-just-convert-it-so-that-it-is-suitable-for-mapping-purposes",
    "title": "Loading packages and data",
    "section": "4.7.3 Converting KDE output into grid object. The result is the same, we just convert it so that it is suitable for mapping purposes",
    "text": "4.7.3 Converting KDE output into grid object. The result is the same, we just convert it so that it is suitable for mapping purposes\n\ngridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#converting-gridded-output-into-raster",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#converting-gridded-output-into-raster",
    "title": "Loading packages and data",
    "section": "4.7.3.1 Converting gridded output into raster",
    "text": "4.7.3.1 Converting gridded output into raster\n\nkde_childcareSG_bw_raster &lt;- raster(gridded_kde_childcareSG_bw)\n\nLooking at property of raster layer\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.419757, 0.2695907  (x, y)\nextent     : 2.667538, 56.39644, 15.74872, 50.25633  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -1.293897e-14, 37.27443  (min, max)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#assigning-projection-systems",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#assigning-projection-systems",
    "title": "Loading packages and data",
    "section": "4.7.3.2 Assigning projection systems",
    "text": "4.7.3.2 Assigning projection systems\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.419757, 0.2695907  (x, y)\nextent     : 2.667538, 56.39644, 15.74872, 50.25633  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -1.293897e-14, 37.27443  (min, max)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#visualising-the-output-in-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#visualising-the-output-in-tmap",
    "title": "Loading packages and data",
    "section": "4.7.4 Visualising the output in tmap",
    "text": "4.7.4 Visualising the output in tmap\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\nVariable(s) \"v\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#comparing-spatial-point-patterns-using-kde-4.7.5.1-extracting-study-area",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#comparing-spatial-point-patterns-using-kde-4.7.5.1-extracting-study-area",
    "title": "Loading packages and data",
    "section": "4.7.5 Comparing Spatial Point Patterns using KDE 4.7.5.1 Extracting study area",
    "text": "4.7.5 Comparing Spatial Point Patterns using KDE 4.7.5.1 Extracting study area\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\nCovert to SP format\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#creating-owin-object-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#creating-owin-object-1",
    "title": "Loading packages and data",
    "section": "4.7.5.3 Creating owin object",
    "text": "4.7.5.3 Creating owin object\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#combining-childcare-points-and-the-study-area-by-using-the-code-chunk-below-we-are-able-to-extract-childcare-that-is-within-the-specific-region-to-do-our-analysis-later-on.",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#combining-childcare-points-and-the-study-area-by-using-the-code-chunk-below-we-are-able-to-extract-childcare-that-is-within-the-specific-region-to-do-our-analysis-later-on.",
    "title": "Loading packages and data",
    "section": "4.7.5.4 Combining childcare points and the study area By using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.",
    "text": "4.7.5.4 Combining childcare points and the study area By using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\nchildcare_pg_ppp_km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp_km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp_km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp_km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nThe code chunk below is used to plot these four study areas and the locations of the childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp_km, main=\"Punggol\")\nplot(childcare_tm_ppp_km, main=\"Tampines\")\nplot(childcare_ck_ppp_km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp_km, main=\"Jurong West\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#computing-kde-dw.diggle",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#computing-kde-dw.diggle",
    "title": "Loading packages and data",
    "section": "4.7.5.5 Computing KDE (dw.diggle)",
    "text": "4.7.5.5 Computing KDE (dw.diggle)\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp_km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp_km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp_km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\n\nWarning: Berman-Diggle Cross-Validation criterion was minimised at right-hand\nend of interval [0, 0.198]; use argument 'hmax' to specify a wider interval for\nbandwidth 'sigma'\n\nplot(density(childcare_jw_ppp_km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#computing-fixed-bandwidth-kde",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#computing-fixed-bandwidth-kde",
    "title": "Loading packages and data",
    "section": "4.7.5.6 Computing fixed bandwidth KDE",
    "text": "4.7.5.6 Computing fixed bandwidth KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp_km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp_km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp_km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp_km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Loading packages and data",
    "section": "4.8.1 Testing spatial point patterns using Clark and Evans Test",
    "text": "4.8.1 Testing spatial point patterns using Clark and Evans Test\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.49534, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#clark-and-evans-test-choa-chu-kang-planning-area-in-the-code-chunk-below-clarkevans.test-of-spatstat-is-used-to-performs-clark-evans-test-of-aggregation-for-childcare-centre-in-choa-chu-kang-planning-area.",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#clark-and-evans-test-choa-chu-kang-planning-area-in-the-code-chunk-below-clarkevans.test-of-spatstat-is-used-to-performs-clark-evans-test-of-aggregation-for-childcare-centre-in-choa-chu-kang-planning-area.",
    "title": "Loading packages and data",
    "section": "4.8.2 Clark and Evans Test: Choa Chu Kang planning area In the code chunk below, clarkevans.test() of spatstat is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.",
    "text": "4.8.2 Clark and Evans Test: Choa Chu Kang planning area In the code chunk below, clarkevans.test() of spatstat is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.87138, p-value = 0.03428\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#clark-and-evans-test-tampines-planning-area",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#clark-and-evans-test-tampines-planning-area",
    "title": "Loading packages and data",
    "section": "4.8.3 Clark and Evans Test: Tampines planning area",
    "text": "4.8.3 Clark and Evans Test: Tampines planning area\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.68801, p-value = 1.075e-10\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#analysing-spatial-point-process-using-g-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#analysing-spatial-point-process-using-g-function",
    "title": "Loading packages and data",
    "section": "5.7 Analysing Spatial Point Process Using G-Function",
    "text": "5.7 Analysing Spatial Point Process Using G-Function"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#choa-chu-kang-planning-area",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#choa-chu-kang-planning-area",
    "title": "Loading packages and data",
    "section": "5.7.1 Choa Chu Kang planning area",
    "text": "5.7.1 Choa Chu Kang planning area"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#choa-chu-kang-planning-area-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#choa-chu-kang-planning-area-1",
    "title": "Loading packages and data",
    "section": "5.8.1 Choa Chu Kang planning area",
    "text": "5.8.1 Choa Chu Kang planning area"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#performing-complete-spatial-randomness-test-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#performing-complete-spatial-randomness-test-1",
    "title": "Loading packages and data",
    "section": "5.8.2 Performing Complete Spatial Randomness Test",
    "text": "5.8.2 Performing Complete Spatial Randomness Test\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_CK.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#tampines-planning-area",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#tampines-planning-area",
    "title": "Loading packages and data",
    "section": "5.8.3 Tampines planning area",
    "text": "5.8.3 Tampines planning area"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#choa-chu-kang-planning-area-2",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#choa-chu-kang-planning-area-2",
    "title": "Loading packages and data",
    "section": "5.9.1 Choa Chu Kang planning area",
    "text": "5.9.1 Choa Chu Kang planning area"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#tampines-planning-area-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#tampines-planning-area-1",
    "title": "Loading packages and data",
    "section": "5.9.2 Tampines planning area",
    "text": "5.9.2 Tampines planning area"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#performing-complete-spatial-randomness-test-4",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#performing-complete-spatial-randomness-test-4",
    "title": "Loading packages and data",
    "section": "5.9.2.2 Performing Complete Spatial Randomness Test",
    "text": "5.9.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#choa-chu-kang-planning-area-3",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#choa-chu-kang-planning-area-3",
    "title": "Loading packages and data",
    "section": "5.10.1 Choa Chu Kang planning area",
    "text": "5.10.1 Choa Chu Kang planning area\n\n5.10.1.1 Computing L Fucntion estimation\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n5.10.1.2 Performing Complete Spatial Randomness Test To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#tampines-planning-area-2",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on-Ex03.html#tampines-planning-area-2",
    "title": "Loading packages and data",
    "section": "5.10.2 Tampines planning area",
    "text": "5.10.2 Tampines planning area\n\n5.10.2.1 Computing L-fucntion estimate\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n5.10.2.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below will be used to perform the hypothesis testing.\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "in-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "in-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In class ex 2",
    "section": "",
    "text": "DIY\n\n\n\nUsing the step you learned in previous lesson, -Create folder and file for in class exercise 2"
  },
  {
    "objectID": "in-class_Ex/In-class_Ex02/In-class_Ex02.html#installing-and-loading-r-packages",
    "href": "in-class_Ex/In-class_Ex02/In-class_Ex02.html#installing-and-loading-r-packages",
    "title": "In class ex 2",
    "section": "Installing and loading R packages",
    "text": "Installing and loading R packages\n\n\nCode\npacman::p_load(tidyverse,sf,tmap,lubridate,arrow)\n\n\n###tidyverse -&gt; family of packages, sf-&gt; geospatial in simple file format -&gt; tmap-Chloropeth map -&gt; lubridate - date and time -&gt; arrow - Read and write parquet file"
  },
  {
    "objectID": "in-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-grab-posisi-dataset",
    "href": "in-class_Ex/In-class_Ex02/In-class_Ex02.html#importing-grab-posisi-dataset",
    "title": "In class ex 2",
    "section": "Importing Grab-Posisi Dataset",
    "text": "Importing Grab-Posisi Dataset\n\n\n\n\n\n\nDIY\n\n\n\n\ncreate folder called data in In-clss ex02 folder\nCreate subfolder called GrabPosisi\nDownload the dataset\nWrite a code chunk to import parquest by using appropriate function of arrow package\n\n\n\n\n\nCode\ndf &lt;-read_parquet(\"../../data/data/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n\n\n\n\n\n\n\n\nDIY\n\n\n\nWrite a code chunk to convert the data type to date-time (using lubridate to convert ping time to date-time) (override existing dataset with df$ - can also use mutate)\n\n\n\n\nCode\ndf$pingtimestamp &lt;- as_datetime(df$pingtimestamp)\n\n\n\n\n\n\n\n\nDIY\n\n\n\nWrite a code chunk to - Extract trip origin location - derice three new column, weekday, starting hour and day of the month - name the output tibble data.frame origin_df\n\n\n\n\nCode\norigin_df &lt;-df %&gt;% \n  group_by(trj_id)%&gt;%\n  arrange(pingtimestamp) %&gt;%\n  filter(row_number()==1) %&gt;%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr = TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\n\n\n\n\n\n\n\nDIY\n\n\n\nWrite a code chunk to - Extract trip destination location - derice three new column, weekday, starting hour and day of the month - name the output tibble data.frame origin_df\n\n\n\n\nCode\ndestination_df &lt;-df %&gt;% \n  group_by(trj_id)%&gt;%\n  arrange(desc(pingtimestamp)) %&gt;%\n  filter(row_number()==1) %&gt;%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr = TRUE),\n         end_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\n\n##Export - Code hidden with echo false\n##Import\n\n\nCode\norigin_df &lt;-read_rds(\"data/rds/origin_df.rds\")\ndestination_df &lt;-read_rds(\"data/rds/destination_df.rds\")\n\n\n##Visualising Frequency distribution"
  },
  {
    "objectID": "in-class_Ex/In-class-Ex03/In-class_Ex03-NKDE.html",
    "href": "in-class_Ex/In-class-Ex03/In-class_Ex03-NKDE.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "library(maptools)\n\nLoading required package: sp\n\n\nPlease note that 'maptools' will be retired during October 2023,\nplan transition at your earliest convenience (see\nhttps://r-spatial.org/r/2023/05/15/evolution4.html and earlier blogs\nfor guidance);some functionality will be moved to 'sp'.\n Checking rgeos availability: FALSE\n\n\n\nAttaching package: 'maptools'\n\n\nThe following object is masked from 'package:sp':\n\n    sp2Mondrian\n\npacman::p_load(sf,spNetwork,tmap,classInt,viridis,tidyverse)\n##virisdis - colours\n##classInt - also maps?"
  },
  {
    "objectID": "in-class_Ex/In-class-Ex03/In-class_Ex03-NKDE.html#data-import-and-preparation",
    "href": "in-class_Ex/In-class-Ex03/In-class_Ex03-NKDE.html#data-import-and-preparation",
    "title": "IS415-GAA",
    "section": "Data import and preparation",
    "text": "Data import and preparation\n\nnetwork&lt;- st_read(dsn=\"data/geospatial\", layer=\"Punggol_St\")\n\nReading layer `Punggol_St' from data source \n  `C:\\FieryCake\\IS415-GAA\\in-class_Ex\\In-class-Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\nchildcare&lt;-st_read(dsn = \"data/geospatial\",layer= \"Punggol_CC\")\n\nReading layer `Punggol_CC' from data source \n  `C:\\FieryCake\\IS415-GAA\\in-class_Ex\\In-class-Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare)+\n  tm_dots()+\ntm_shape(network)+tm_lines()\n\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "in-class_Ex/In-class-Ex03/In-class_Ex03-NKDE.html#snap-the-data",
    "href": "in-class_Ex/In-class-Ex03/In-class_Ex03-NKDE.html#snap-the-data",
    "title": "IS415-GAA",
    "section": "sNap the data",
    "text": "sNap the data\n\nlixels &lt;- lixelize_lines(network,750,mindist=375)\n##studie show that people only willing to walk 750m to chidcare center\n##need to get the middle point with midist\n##chops line segments \n\nCertainly! Let’s break down the two code snippets:\nlixels &lt;- lixelize_lines(network, 750, mindist = 375)\nThis code snippet is likely using a function called lixelize_lines to create lixels (line segments or line pixels) from a network of lines. Here’s a simple explanation of the parameters used:\nnetwork: This is expected to be a spatial dataset representing a network of lines or line segments. 750: This parameter specifies the desired length of the lixels. It means that the lines in the network will be divided into lixels, and each lixel will have a length of 750 units. mindist = 375: This parameter sets the minimum distance between two consecutive lixels. It ensures that there is at least a distance of 375 units between the start of one lixel and the start of the next one. This helps prevent closely spaced or overlapping lixels. The result, stored in the variable lixels, would be a dataset or object containing the lixels derived from the original network of lines.\n\nsamples &lt;-lines_center(lixels)\n\n\ndensities&lt;-nkde(network,events=childcare,w=rep(1,nrow(childcare)),samples=samples,\n                kernel_name = \"quartic\",bw=300,div=\"bw\",method=\"simple\",digits=1,tol=1,grid_shape = c(1,1),max_depth=8,agg=5 ##agg events within 5m radius (faster calculation)\n                ,sparse=TRUE,verbose=FALSE)\n\n\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n\n# rescaling to help the mapping\nsamples$density &lt;- samples$density*1000\nlixels$density &lt;- lixels$density*1000\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(lixels)+\n  tm_lines(col=\"density\")+\ntm_shape(childcare)+\n  tm_dots()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html",
    "title": "Spatial Weights and Applications",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package.\n\n\n\n\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012\n\n\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\n\n\n\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\FieryCake\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\n\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nIn this section, you will learn how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\n\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours.\n\n\n\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n8.5.3.3 Plotting both Queen and Rook contiguity based neighbours maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\nIn this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep. Convert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb(). Return the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise. Remove the list structure of the returned object by using unlist().\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\n\nNext, we will plot the distance weight matrix by using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n\n\nWe can plot the weight matrix using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\nIn this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\n\nIn this section, you will learn how to create four different spatial lagged variables, they are:\nspatial lag with row-standardized weights, spatial lag as a sum of neighbouring values, spatial window average, and spatial window sum.\n8.8.1 Spatial lag with row-standardized weights Finally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#overview",
    "title": "Spatial Weights and Applications",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#the-study-area-and-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#the-study-area-and-data",
    "title": "Spatial Weights and Applications",
    "section": "",
    "text": "Two data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012\n\n\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#getting-the-data-into-r-environment",
    "title": "Spatial Weights and Applications",
    "section": "",
    "text": "In this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\FieryCake\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#visualising-regional-development-indicator",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#visualising-regional-development-indicator",
    "title": "Spatial Weights and Applications",
    "section": "",
    "text": "Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#computing-contiguity-spatial-weights",
    "title": "Spatial Weights and Applications",
    "section": "",
    "text": "In this section, you will learn how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\n\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours.\n\n\n\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n8.5.3.3 Plotting both Queen and Rook contiguity based neighbours maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#computing-distance-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#computing-distance-based-neighbours",
    "title": "Spatial Weights and Applications",
    "section": "",
    "text": "In this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep. Convert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb(). Return the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise. Remove the list structure of the returned object by using unlist().\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\n\nNext, we will plot the distance weight matrix by using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n\n\nWe can plot the weight matrix using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#weights-based-on-idw",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#weights-based-on-idw",
    "title": "Spatial Weights and Applications",
    "section": "",
    "text": "In this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#application-of-spatial-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on-Ex04.html#application-of-spatial-weight-matrix",
    "title": "Spatial Weights and Applications",
    "section": "",
    "text": "In this section, you will learn how to create four different spatial lagged variables, they are:\nspatial lag with row-standardized weights, spatial lag as a sum of neighbouring values, spatial window average, and spatial window sum.\n8.8.1 Spatial lag with row-standardized weights Finally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "in-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "in-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\FieryCake\\IS415-GAA\\in-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\nhunan_sp &lt;- hunan %&gt;% as_Spatial()\n\n\ngwstat &lt;-gwss(data=hunan_sp,\n              vars = \"GDPPC\",\n              bw = 6,\n              kernel = \"bisquare\",\n              adaptive = TRUE,\n              longlat = T\n              \n              )\n\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\n\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords &lt;- cbind(longitude, latitude)\n\n\nk1 &lt;- knn2nb(knearneigh(coords))\n\n\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\n\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nbased on 62km distance, find neighbours\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nFind those with 6 or higher neighbours\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nzero.policy - dont want 0\nlag.sum - doesnt include yourself. -&gt; Meaning of it is takes the neighbouring neighbours, all their value, sum up, multipy by weight and get end results (sum of neighours without himself)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html",
    "title": "Take home 1",
    "section": "",
    "text": "The specific tasks of this take-home exercise are as follows:\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer in sf tibble data.frames: Grab taxi location points either by origins or destinations. Road layer within Singapore excluding outer islands. Singapore boundary layer excluding outer islands Using the extracted data, derive traditional Kernel Density Estimation layers. Using the extracted data, derive either Network Kernel Density Estimation (NKDE) or Temporal Network Kernel Density Estimation (TNKDE) Using appropriate tmap functions, display the kernel density layers on openstreetmap of Singapore. Describe the spatial patterns revealed by the kernel density maps."
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#tasks",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#tasks",
    "title": "Take home 1",
    "section": "",
    "text": "The specific tasks of this take-home exercise are as follows:\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer in sf tibble data.frames: Grab taxi location points either by origins or destinations. Road layer within Singapore excluding outer islands. Singapore boundary layer excluding outer islands Using the extracted data, derive traditional Kernel Density Estimation layers. Using the extracted data, derive either Network Kernel Density Estimation (NKDE) or Temporal Network Kernel Density Estimation (TNKDE) Using appropriate tmap functions, display the kernel density layers on openstreetmap of Singapore. Describe the spatial patterns revealed by the kernel density maps."
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#importing-packages",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#importing-packages",
    "title": "Take home 1",
    "section": "Importing packages",
    "text": "Importing packages\n\npacman::p_load(tidyverse,sf,tmap,lubridate,arrow,spNetwork,classInt,viridis,raster,spatstat)\nlibrary(maptools)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#geospatial",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#geospatial",
    "title": "Take home 1",
    "section": "Geospatial",
    "text": "Geospatial"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#importing-data",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#importing-data",
    "title": "Take home 1",
    "section": "1.1 Importing data",
    "text": "1.1 Importing data\n\nMap data\n\nmpsz &lt;- st_read(dsn = \"../../Hands-on_Ex/data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\nst_set_crs(mpsz, 3414)\n\n\n\nRoad data\n\nroads_sf&lt;-st_read(dsn = \"data/geospatial\",layer= \"gis_osm_roads_free_1\")\n\n\n\nImporting Grab posisi 1\n\ngrab1 &lt;-read_parquet(\"data/aspatial/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#add-grab-data-together-concat-the-data-together",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#add-grab-data-together-concat-the-data-together",
    "title": "Take home 1",
    "section": "Add grab data together Concat the data together",
    "text": "Add grab data together Concat the data together\n\n#grab2 &lt;-read_parquet(\"data/aspatial/GrabPosisi/part-00001-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n#grab3 &lt;-read_parquet(\"data/aspatial/GrabPosisi/part-00002-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n#grab4 &lt;-read_parquet(\"data/aspatial/GrabPosisi/part-00003-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n#grab5 &lt;-read_parquet(\"data/aspatial/GrabPosisi/part-00004-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n#grab6 &lt;-read_parquet(\"data/aspatial/GrabPosisi/part-00005-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n#grab7 &lt;-read_parquet(\"data/aspatial/GrabPosisi/part-00006-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n#grab8 &lt;-read_parquet(\"data/aspatial/GrabPosisi/part-00007-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n#grab9 &lt;-read_parquet(\"data/aspatial/GrabPosisi/part-00008-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n#grab10 &lt;-read_parquet(\"data/aspatial/GrabPosisi/part-00009-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n#grab_combined_df &lt;- bind_rows(grab1,grab2,grab3,grab4,grab5,grab6,grab7,grab8,grab9,grab10)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#pre-processing",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#pre-processing",
    "title": "Take home 1",
    "section": "1.2 Pre-processing",
    "text": "1.2 Pre-processing\n\nSources - Megan’s journey - to check if geometries are valid\n\nlength(which(st_is_valid(roads_sf) == FALSE))\nlength(which(st_is_valid(mpsz) == FALSE))\n\n\nmpsz &lt;- st_make_valid(mpsz)\nlength(which(st_is_valid(mpsz) == FALSE))\n## source: https://r-spatial.github.io/sf/reference/valid.html - make_valid"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#checking-coordinate-system",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#checking-coordinate-system",
    "title": "Take home 1",
    "section": "1.3 Checking Coordinate system",
    "text": "1.3 Checking Coordinate system\n\nChecking MPSZ\n\nst_crs(mpsz)\n\n\n\nChecking Roads\n\nst_crs(roads_sf)\n\n\n\nMaking roads data into projected SVY21\n\nroads3414 &lt;- st_transform(roads_sf, \n                              crs = 3414)\nst_crs(roads3414)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#removing-of-outer-islands",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#removing-of-outer-islands",
    "title": "Take home 1",
    "section": "1.4 Removing of outer islands",
    "text": "1.4 Removing of outer islands\n\nsg_sf &lt;- st_union(mpsz,by_feature = FALSE)\n\nplot(sg_sf, col = \"lightblue\", main = \"Sea Area\")\n\nBig island\n\n##source - https://stackoverflow.com/questions/42512431/how-to-separate-a-multipolygon-geometry-into-several-polygons-objects-after-perf\n\nind_poly &lt;- st_cast(sg_sf, \"POLYGON\")\n\nareas &lt;- st_area(ind_poly)\n\nlargest_index &lt;- which.max(areas)\n\nlargest_polygon &lt;- ind_poly[largest_index]\n\nplot(largest_polygon)\n\nCheck crs of largest / convert to SVY\n\nmpsz3414 &lt;- st_transform(largest_polygon, \n                              crs = 3414)\nst_crs(mpsz3414)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#getting-polygons-inside-big-island",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#getting-polygons-inside-big-island",
    "title": "Take home 1",
    "section": "1.5 Getting polygons inside big island",
    "text": "1.5 Getting polygons inside big island\n\nmpsz3414\nmpsz\n\n\nmpsz3414\nmpsz\nislandPoly &lt;- st_intersection(st_set_crs(mpsz, 3414),st_set_crs(mpsz3414, 3414))\n\n\nplot(islandPoly)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#changing-timestamp-to-correct-one",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#changing-timestamp-to-correct-one",
    "title": "Take home 1",
    "section": "2.1 Changing timestamp to correct one",
    "text": "2.1 Changing timestamp to correct one\n\ngrab1$pingtimestamp &lt;- as_datetime(grab1$pingtimestamp)\n\n\n\n\n\n\n\nDIY\n\n\n\nWrite a code chunk to - Extract trip origin location - derice three new column, weekday, starting hour and day of the month - name the output tibble data.frame origin_df\n\n\n\norigin_df &lt;-grab1 %&gt;% \n  group_by(trj_id)%&gt;%\n  arrange(pingtimestamp) %&gt;%\n  filter(row_number()==1) %&gt;%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr = TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\n\n# Perform a spatial join to filter roads within Singapore\n#roadI &lt;- roads3414[10]\n#roads_in_singapore &lt;- st_intersection(roadI, mpsz3414)\n\n# Plot the roads within Singapore\n#plot(roads_in_singapore)\n# Simplify geometry of road data (adjust tolerance as needed)\nroad_data &lt;- st_simplify(roads3414, preserveTopology = TRUE)\n\n\n# Perform spatial intersection after simplification\nroads_in_singapore &lt;- st_intersection(road_data, mpsz3414)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#plot-map-and-roads-to-check",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#plot-map-and-roads-to-check",
    "title": "Take home 1",
    "section": "2.2 plot map and roads to check",
    "text": "2.2 plot map and roads to check\n\ntm_shape(roads_in_singapore$geometry)+tm_lines()"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#check-class-of-grab-data",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#check-class-of-grab-data",
    "title": "Take home 1",
    "section": "Check class of grab data",
    "text": "Check class of grab data\n\nclass(origin_df)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#converting-aspatial-object-to-geospatial",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#converting-aspatial-object-to-geospatial",
    "title": "Take home 1",
    "section": "2.3 Converting Aspatial object to geospatial",
    "text": "2.3 Converting Aspatial object to geospatial\n\n# Convert tibble to sf object\nsf_object &lt;- st_as_sf(origin_df, coords = c(\"rawlng\", \"rawlat\"), crs = 4326) %&gt;% st_transform(crs = 3414)\n#sf_object2 &lt;- st_as_sf(grab_combined_df, coords = c(\"rawlng\", \"rawlat\"), crs = 4326) %&gt;% st_transform(crs = 3414)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#we-can-plot-the-points-on-the-map-to-see-how-it-looks",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#we-can-plot-the-points-on-the-map-to-see-how-it-looks",
    "title": "Take home 1",
    "section": "We can plot the points on the map to see how it looks",
    "text": "We can plot the points on the map to see how it looks\n\nlines &lt;- st_cast(roads_in_singapore$geometry, \"MULTILINESTRING\")\nlines &lt;- st_cast(lines, \"LINESTRING\")\n\n\nst_crs(sf_object)\nst_crs(lines)\n\n\ntm_shape(lines)+tm_lines()+\n  tm_shape(sf_object)+tm_dots()\n\n\n  tm_shape(mpsz3414)+tm_polygons()+tm_shape(sf_object)+tm_dots()"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#converting-grab-posisi-into-raster-ppp-format",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#converting-grab-posisi-into-raster-ppp-format",
    "title": "Take home 1",
    "section": "2.4 Converting grab posisi into raster ppp format",
    "text": "2.4 Converting grab posisi into raster ppp format\n\nlab way of converting aspatial to project on map\n\norigin_df2 &lt;- as_Spatial(sf_object)\nobject_sp &lt;- as(origin_df2, \"SpatialPoints\")\nobject_sp\nobject_ppp &lt;- as(object_sp, \"ppp\")\nobject_ppp"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#plotting-ppp-to-see-how-it-looks-like",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#plotting-ppp-to-see-how-it-looks-like",
    "title": "Take home 1",
    "section": "plotting ppp to see how it looks like",
    "text": "plotting ppp to see how it looks like\n\nplot(object_ppp)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#check-if-lat-long-makes-sense---conversion-is-correct",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#check-if-lat-long-makes-sense---conversion-is-correct",
    "title": "Take home 1",
    "section": "Check if lat long makes sense -> conversion is correct",
    "text": "Check if lat long makes sense -&gt; conversion is correct\n\nobject_ppp\n\n\nTm plot with spatial points + map\n\ntmap_mode('view')\n  tm_shape(mpsz3414)+tm_polygons()+tm_shape(object_sp)+tm_dots()\ntmap_mode('plot')"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#handling-duplicated-points",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#handling-duplicated-points",
    "title": "Take home 1",
    "section": "2.5Handling Duplicated Points",
    "text": "2.5Handling Duplicated Points\n\nany(duplicated(object_ppp))\n\n\nJittering duplicates away\n\nobject_ppp_jit &lt;- rjitter(object_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\n\nChecking duplicates after jitter\n\nany(duplicated(object_ppp))"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#creating-owin-object",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#creating-owin-object",
    "title": "Take home 1",
    "section": "Creating owin object",
    "text": "Creating owin object"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#converting-mpsz3414-to-sp-spatial-class-before-converting-to-owin-object",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#converting-mpsz3414-to-sp-spatial-class-before-converting-to-owin-object",
    "title": "Take home 1",
    "section": "Converting mpsz3414 to SP spatial class before converting to owin object",
    "text": "Converting mpsz3414 to SP spatial class before converting to owin object\n\nmpsz3414\n\n\nsg_sp &lt;- as_Spatial(mpsz3414)\nsg_sp &lt;- as(sg_sp, \"SpatialPolygons\")\nsg_sp\nobject_ppp\nsg_owin2 &lt;- as(sg_sp, \"owin\")\nsg_owin2"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#plotting-sg-owin",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#plotting-sg-owin",
    "title": "Take home 1",
    "section": "Plotting sg owin",
    "text": "Plotting sg owin\n\nplot(sg_owin2)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#combine-point-object-grab-with-sg-owin",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#combine-point-object-grab-with-sg-owin",
    "title": "Take home 1",
    "section": "Combine point object (grab) with sg owin",
    "text": "Combine point object (grab) with sg owin\n\ngrabSg_ppp = object_ppp[sg_owin2]\nplot(grabSg_ppp)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#using-automatic-bandwidth-selection---diggle",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#using-automatic-bandwidth-selection---diggle",
    "title": "Take home 1",
    "section": "3.1 Using automatic bandwidth selection - diggle",
    "text": "3.1 Using automatic bandwidth selection - diggle\n\nkde_grab_sg &lt;- density(grabSg_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nplot(kde_grab_sg)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#rescaling-trhe-values-as-its-too-small",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#rescaling-trhe-values-as-its-too-small",
    "title": "Take home 1",
    "section": "3.1.1 Rescaling trhe values as its too small",
    "text": "3.1.1 Rescaling trhe values as its too small\n\ngrabSg_ppp.km &lt;- rescale(grabSg_ppp, 1000, \"km\")\nkde_grab_sg &lt;- density(grabSg_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_grab_sg)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#other-automatic-bandwidth",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#other-automatic-bandwidth",
    "title": "Take home 1",
    "section": "3.1.2 Other automatic bandwidth",
    "text": "3.1.2 Other automatic bandwidth\n\n bw.CvL(grabSg_ppp.km)\n\n\ngrabSg_ppp.ppl &lt;- density(grabSg_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_grab_sg, main = \"bw.diggle\")\nplot(grabSg_ppp.ppl, main = \"bw.ppl\")\n\n\n3.2 Observation\n.ppl is better in showing different clusters on the map. Bw not so good, only showing those with very high intensity"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#working-with-different-density-methods",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#working-with-different-density-methods",
    "title": "Take home 1",
    "section": "3.3 Working with different density methods",
    "text": "3.3 Working with different density methods\n\npar(mfrow=c(2,2))\nplot(density(grabSg_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(grabSg_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(grabSg_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(grabSg_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#fixed-bandwith-method",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#fixed-bandwith-method",
    "title": "Take home 1",
    "section": "3.3.1 Fixed bandwith method",
    "text": "3.3.1 Fixed bandwith method\n\nkde_grabSg_800 &lt;- density(grabSg_ppp.km, sigma=0.8, edge=TRUE, kernel=\"gaussian\")\nplot(kde_grabSg_800)\n\n\n3.3.2 Findings\nUsing the fixed bandwith, it it easier to see / adjust the headmap to see which areas in singapore are more intense"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#comparing-regions",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#comparing-regions",
    "title": "Take home 1",
    "section": "3.4 Comparing regions",
    "text": "3.4 Comparing regions\n\n3.4.1 TOA PAYOH and TAMPINES as its the most intense regions\n\nmpsz2 &lt;- as_Spatial(mpsz)\ntp = mpsz2[mpsz2@data$PLN_AREA_N == \"TOA PAYOH\",]\ntm = mpsz2[mpsz2@data$PLN_AREA_N == \"TAMPINES\",]\n\n\n\n3.4.2 Plotting them out\n\npar(mfrow=c(2,2))\nplot(tp, main = \"Toa payoh\")\nplot(tm, main = \"Tampines\")\n\n\n\n3.4.3 Converting to spatial polygons\n\ntm_sp = as(tm, \"SpatialPolygons\")\ntp_sp = as(tp, \"SpatialPolygons\")\n\n\n\n3.4.4 Making them owin\n\ntp_owin = as(tp_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\n\n\n\n3.4.5 Combinining\n\ngrab_tp_ppp = object_ppp_jit[tp_owin]\ngrab_tm_ppp = object_ppp_jit[tm_owin]\n\n\n\n3.4.6 Rescaling\n\ngrab_tp_ppp.km = rescale(grab_tp_ppp, 1000, \"km\")\ngrab_tm_ppp.km = rescale(grab_tm_ppp, 1000, \"km\")\n\n\n\n3.4.6 Plot\n\npar(mfrow=c(2,2))\nplot(grab_tp_ppp.km, main=\"Toa Payoh\")\nplot(grab_tm_ppp.km, main=\"Tampines\")"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#findings-1",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#findings-1",
    "title": "Take home 1",
    "section": "3.5 Findings",
    "text": "3.5 Findings\ntoh payoh intensity looks spread out whereas tampines one looks very clustered"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#computing-kde-for-each-region-automatic",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#computing-kde-for-each-region-automatic",
    "title": "Take home 1",
    "section": "3.6 Computing KDE for each region (automatic)",
    "text": "3.6 Computing KDE for each region (automatic)\n\npar(mfrow=c(2,2))\nplot(density(grab_tp_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Toa Payoh\")\nplot(density(grab_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#computing-using-fixed-bandwith",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#computing-using-fixed-bandwith",
    "title": "Take home 1",
    "section": "3.7 Computing using fixed bandwith",
    "text": "3.7 Computing using fixed bandwith\n\npar(mfrow=c(2,2))\nplot(density(grab_tp_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Toa Payoh\")\nplot(density(grab_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#findings-2",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#findings-2",
    "title": "Take home 1",
    "section": "3.8 Findings",
    "text": "3.8 Findings\nAgain, fixed method is better in identifying patterns\n#4 NKDE\n\n  tm_shape(roads_in_singapore)+tm_lines()+tm_shape(object_sp)+tm_dots()"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#checking-geom-type-for-streets",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#checking-geom-type-for-streets",
    "title": "Take home 1",
    "section": "4.1 Checking geom type for streets",
    "text": "4.1 Checking geom type for streets\n\n#st_geometry_type(lines)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#checking-if-lines-are-of-linestring-geom-type",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#checking-if-lines-are-of-linestring-geom-type",
    "title": "Take home 1",
    "section": "4.2 Checking if lines are of linestring geom type",
    "text": "4.2 Checking if lines are of linestring geom type\n\n#all_linestring &lt;- all(st_geometry_type(lines) == \"LINESTRING\")\n\n#print(all_linestring)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#lixelizing-the-streets",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#lixelizing-the-streets",
    "title": "Take home 1",
    "section": "4.2 Lixelizing the streets",
    "text": "4.2 Lixelizing the streets\n\n#lines_sf &lt;- st_as_sf(lines)\n#lixels &lt;- lixelize_lines(lines_sf,750,mindist=375)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#snapping",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#snapping",
    "title": "Take home 1",
    "section": "4.3 Snapping",
    "text": "4.3 Snapping\n\n#samples &lt;-lines_center(lixels)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#no-time-to-render-code-from-here-hence-commented",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#no-time-to-render-code-from-here-hence-commented",
    "title": "Take home 1",
    "section": "No time to render code from here, hence commented!",
    "text": "No time to render code from here, hence commented!"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#calculating-densities",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#calculating-densities",
    "title": "Take home 1",
    "section": "4.4 Calculating densities",
    "text": "4.4 Calculating densities\n\n#densities&lt;-nkde(network,events=sf_object[1:100,],w=rep(1,nrow(sf_object)),samples=samples,\n#                kernel_name = \"quartic\",bw=300,div=\"bw\",method=\"simple\",digits=1,tol=1,grid_shape = #c(1,1),max_depth=8,agg=5 ##agg events within 5m radius (faster calculation)\n#                ,sparse=TRUE,verbose=FALSE)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#rescaling-1",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#rescaling-1",
    "title": "Take home 1",
    "section": "4.5 Rescaling",
    "text": "4.5 Rescaling\n\n#samples$density &lt;- densities\n#lixels$density &lt;- densities\n\n#samples$density &lt;- samples$density*1000\n#lixels$density &lt;- lixels$density*1000"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#plotting",
    "href": "take_home_Ex/take_home_Ex_01/take_home_Ex_01.html#plotting",
    "title": "Take home 1",
    "section": "Plotting",
    "text": "Plotting\n\n#tm_shape(lixels)+\n#  tm_lines(col=\"density\")+\n#tm_shape(sf_object)+\n#  tm_dots()"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_01/data/geospatial/MPSZ-2019.html",
    "href": "take_home_Ex/take_home_Ex_01/data/geospatial/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "in-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "in-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "Importing the data",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, plotly, tidyverse)"
  },
  {
    "objectID": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#can-see-that-it-is-decimal-pair",
    "href": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#can-see-that-it-is-decimal-pair",
    "title": "Importing the data",
    "section": "Can see that it is decimal pair",
    "text": "Can see that it is decimal pair\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan_GDPPC &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(hunan_GDPPC) + tm_fill(\"GDPPC\",\n                                style=\"quantile\",\n                                palette = \"Blues\",\n                                title=\"GDPPC\") +\n  tm_layout(main.title=\"Distribution of GDP per capita by county, Hunan province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)+\n  tm_borders(alpha=0.5)+tm_compass(type=\"8star\",size=2)+tm_scale_bar()+tm_grid(alpha=0.2)"
  },
  {
    "objectID": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#shortcut-version-of-doing-weight-matrixs-row-standardization-default-queens",
    "href": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#shortcut-version-of-doing-weight-matrixs-row-standardization-default-queens",
    "title": "Importing the data",
    "section": "shortcut version of doing weight matrixs + row standardization default = queens",
    "text": "shortcut version of doing weight matrixs + row standardization default = queens"
  },
  {
    "objectID": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#shortcut-of-9.4.1-and-9.4.2",
    "href": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#shortcut-of-9.4.1-and-9.4.2",
    "title": "Importing the data",
    "section": "shortcut of 9.4.1 and 9.4.2",
    "text": "shortcut of 9.4.1 and 9.4.2\n\nwm_q&lt;-hunan_GDPPC %&gt;% mutate(nb=st_contiguity(geometry), wt=st_weights(nb,style=\"W\"),.before=1)\n\n\nmoranI &lt;-global_moran(wm_q$GDPPC,wm_q$nb, wm_q$wt)"
  },
  {
    "objectID": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#this-is-actually-what-prof-wants",
    "href": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#this-is-actually-what-prof-wants",
    "title": "Importing the data",
    "section": "THis is actually what prof wants",
    "text": "THis is actually what prof wants\n\nset.seed(1234)\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb, \n                  wm_q$wt,\n                  nsim=99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html",
    "title": "Getting data into R",
    "section": "",
    "text": "#6.1 Global Autocorrelation # Importing libraries\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#visualizing-regional-development-indicator",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#visualizing-regional-development-indicator",
    "title": "Getting data into R",
    "section": "Visualizing Regional development indicator",
    "text": "Visualizing Regional development indicator\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#global-measures-of-auto-correlation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#global-measures-of-auto-correlation",
    "title": "Getting data into R",
    "section": "Global measures of auto correlation",
    "text": "Global measures of auto correlation\n\nComputing weights\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\nRow standardize weight matrix\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#global-measures-of-spatial-autocorrelation-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#global-measures-of-spatial-autocorrelation-morans-i",
    "title": "Getting data into R",
    "section": "9.5 Global Measures of Spatial Autocorrelation: Moran’s I",
    "text": "9.5 Global Measures of Spatial Autocorrelation: Moran’s I\n\n9.5.1 Maron’s I test\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n9.5.2 Computing Monte Carlo Moran’s I\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n9.5.3 Visualising Monte Carlo Moran’s I\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#gearys-c-test",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#gearys-c-test",
    "title": "Getting data into R",
    "section": "Geary’s C test",
    "text": "Geary’s C test\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#computing-monte-carlo-gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#computing-monte-carlo-gearys-c",
    "title": "Getting data into R",
    "section": "Computing Monte Carlo Geary’s C",
    "text": "Computing Monte Carlo Geary’s C\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#visualising-the-monte-carlo-gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#visualising-the-monte-carlo-gearys-c",
    "title": "Getting data into R",
    "section": "Visualising the Monte Carlo Geary’s C",
    "text": "Visualising the Monte Carlo Geary’s C\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#compute-morans-i-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#compute-morans-i-correlogram",
    "title": "Getting data into R",
    "section": "Compute Moran’s I correlogram",
    "text": "Compute Moran’s I correlogram\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nCompute Geary’s C correlogram and plot\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#computing-local-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#computing-local-morans-i",
    "title": "Getting data into R",
    "section": "Computing local Moran’s I",
    "text": "Computing local Moran’s I\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nMapping local moran I\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping local moran I values\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nMapping local Moran’s I p-values\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#plotting-moran-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#plotting-moran-scatterplot",
    "title": "Getting data into R",
    "section": "Plotting Moran scatterplot",
    "text": "Plotting Moran scatterplot\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#plotting-moran-scatterplot-with-standardised-variable",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#plotting-moran-scatterplot-with-standardised-variable",
    "title": "Getting data into R",
    "section": "Plotting Moran scatterplot with standardised variable",
    "text": "Plotting Moran scatterplot with standardised variable\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#centering-moran-around-the-mean",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#centering-moran-around-the-mean",
    "title": "Getting data into R",
    "section": "centering moran around the mean",
    "text": "centering moran around the mean\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\n\nsetting significance for moran\n\nsignif &lt;- 0.05"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#define-categories",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#define-categories",
    "title": "Getting data into R",
    "section": "Define categories",
    "text": "Define categories\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#non-significant-in-quad-0",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#non-significant-in-quad-0",
    "title": "Getting data into R",
    "section": "non significant in quad 0",
    "text": "non significant in quad 0\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#getis-and-ords-g-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#getis-and-ords-g-statistics",
    "title": "Getting data into R",
    "section": "Getis and Ord’s G-Statistics",
    "text": "Getis and Ord’s G-Statistics\n\nDeriving the centroid\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\n\n\n\nDetermine the cut-off distance\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\nfixed distance weight matrix\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\n\nconvert nb object to spatial weight obj\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#computing-adaptive-distance-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#computing-adaptive-distance-weight-matrix",
    "title": "Getting data into R",
    "section": "Computing adaptive distance weight matrix",
    "text": "Computing adaptive distance weight matrix\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#convert-to-spatial-weight-obj",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#convert-to-spatial-weight-obj",
    "title": "Getting data into R",
    "section": "Convert to spatial weight obj",
    "text": "Convert to spatial weight obj\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on-Ex06.html#computing-gi-statistics",
    "title": "Getting data into R",
    "section": "Computing Gi statistics",
    "text": "Computing Gi statistics\n\nGi statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\nMapping Gi Values with fixed distance weights\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nGi statistics using adaptive distance\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html",
    "title": "Importing the packages",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, plotly, tidyverse,spdep)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#tainan",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#tainan",
    "title": "Importing the packages",
    "section": "Tainan",
    "text": "Tainan\n\ntainan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"TAINAN_VILLAGE\") %&gt;% st_transform(crs = 3824)\n\nReading layer `TAINAN_VILLAGE' from data source \n  `C:\\FieryCake\\IS415-GAA\\take_home_Ex\\take_home_Ex_02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 649 features and 10 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0269 ymin: 22.88751 xmax: 120.6563 ymax: 23.41374\nGeodetic CRS:  TWD97\n\n\n\nplot(st_geometry(tainan))"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#dengue-daily",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#dengue-daily",
    "title": "Importing the packages",
    "section": "Dengue Daily",
    "text": "Dengue Daily\n\ndengue &lt;- read_csv(\"data/aspatial/Dengue_Daily.csv\")\n\nRows: 106861 Columns: 26\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (23): 個案研判日, 性別, 年齡層, 居住縣市, 居住鄉鎮, 居住村里, 最小統計區, 最小統計區中心點X, 最小統計區中心點Y, 一級...\ndbl   (1): 確定病例數\ndate  (2): 發病日, 通報日\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#making-the-list-of-towns-required---found-in-assignment-brief",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#making-the-list-of-towns-required---found-in-assignment-brief",
    "title": "Importing the packages",
    "section": "Making the list of towns required - Found in assignment brief",
    "text": "Making the list of towns required - Found in assignment brief\n\ntown_ids &lt;- c(\"D01\",\"D02\",\"D04\",\"D06\",\"D07\",\"D08\",\"D32\",\"D39\")"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#filtering-tainan-villages-based-on-the-above-list",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#filtering-tainan-villages-based-on-the-above-list",
    "title": "Importing the packages",
    "section": "Filtering tainan villages based on the above list",
    "text": "Filtering tainan villages based on the above list\n\ntainan_filtered_villages &lt;- tainan %&gt;%\n  filter(TOWNID %in% town_ids)\n\n\ntainan_filtered_villages\n\nSimple feature collection with 258 features and 10 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 120.0627 ymin: 22.89401 xmax: 120.2925 ymax: 23.09144\nGeodetic CRS:  TWD97\nFirst 10 features:\n      VILLCODE COUNTYNAME TOWNNAME VILLNAME       VILLENG COUNTYID COUNTYCODE\n1  67000350032     臺南市   安南區   青草里  Qingcao Vil.        D      67000\n2  67000270011     臺南市   仁德區   保安里   Bao'an Vil.        D      67000\n3  67000370005     臺南市   中西區   赤嵌里  Chihkan Vil.        D      67000\n4  67000330004     臺南市     南區   大成里  Dacheng Vil.        D      67000\n5  67000350028     臺南市   安南區   城北里 Chengbei Vil.        D      67000\n6  67000350030     臺南市   安南區   城南里 Chengnan Vil.        D      67000\n7  67000370009     臺南市   中西區   法華里    Fahua Vil.        D      67000\n8  67000350017     臺南市   安南區   海南里   Hainan Vil.        D      67000\n9  67000350049     臺南市   安南區   國安里   Guo'an Vil.        D      67000\n10 67000350018     臺南市   安南區   溪心里    Xixin Vil.        D      67000\n   TOWNID TOWNCODE NOTE                       geometry\n1     D06 67000350 &lt;NA&gt; POLYGON ((120.1176 23.08387...\n2     D32 67000270 &lt;NA&gt; POLYGON ((120.2304 22.93544...\n3     D08 67000370 &lt;NA&gt; POLYGON ((120.2012 22.99966...\n4     D02 67000330 &lt;NA&gt; POLYGON ((120.1985 22.98147...\n5     D06 67000350 &lt;NA&gt; POLYGON ((120.1292 23.06512...\n6     D06 67000350 &lt;NA&gt; POLYGON ((120.1246 23.06904...\n7     D08 67000370 &lt;NA&gt; POLYGON ((120.2094 22.98452...\n8     D06 67000350 &lt;NA&gt; POLYGON ((120.175 23.02218,...\n9     D06 67000350 &lt;NA&gt; POLYGON ((120.1866 23.02766...\n10    D06 67000350 &lt;NA&gt; POLYGON ((120.1834 23.06086..."
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#plotting-the-map-to-see-if-it-is-what-we-want",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#plotting-the-map-to-see-if-it-is-what-we-want",
    "title": "Importing the packages",
    "section": "Plotting the map to see if it is what we want",
    "text": "Plotting the map to see if it is what we want\n\nplot(st_geometry(tainan_filtered_villages))"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#filtering-dengue-dataset-to-only-fall-between-epidemiology-week-31-50-2023.",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#filtering-dengue-dataset-to-only-fall-between-epidemiology-week-31-50-2023.",
    "title": "Importing the packages",
    "section": "Filtering dengue dataset to only fall between epidemiology week 31-50, 2023.",
    "text": "Filtering dengue dataset to only fall between epidemiology week 31-50, 2023.\n\nChanging first column to transmit date - easier\n\ncolnames(dengue)[1] &lt;- \"transmit_date\"\n\n\n\nChanging column type to date\n\ndengue$transmit_date &lt;- as.Date(dengue$transmit_date)\n\n\n\nFiltering for week 31 - 50\nEpidemoiology weeks source- https://www.hpsc.ie/notifiablediseases/resources/epidemiologicalweeks/\n\ndengue_filtered &lt;- dengue %&gt;% filter(between(transmit_date, as.Date('2023-07-30'), as.Date('2023-12-16')))\n\n\n\nOnly keeping date transmit , lat and long\n\ndengue_filtered &lt;- select(dengue_filtered,1,10,11)\ncolnames(dengue_filtered)[2] &lt;- \"lng\"\ncolnames(dengue_filtered)[3] &lt;- \"lat\""
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#checking-of-crs-1.1",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#checking-of-crs-1.1",
    "title": "Importing the packages",
    "section": "Checking of CRS 1.1",
    "text": "Checking of CRS 1.1\n\nst_crs(tainan_filtered_villages)\n\nCoordinate Reference System:\n  User input: EPSG:3824 \n  wkt:\nGEOGCRS[\"TWD97\",\n    DATUM[\"Taiwan Datum 1997\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"Taiwan, Republic of China - onshore and offshore - Taiwan Island, Penghu (Pescadores) Islands.\"],\n        BBOX[17.36,114.32,26.96,123.61]],\n    ID[\"EPSG\",3824]]"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#finding-the-intercept",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#finding-the-intercept",
    "title": "Importing the packages",
    "section": "Finding the intercept",
    "text": "Finding the intercept\n\nMaking it a union so that finding points within this union is faster\n\nmerged_polygon &lt;- st_union(tainan_filtered_villages)\n\n\nclass(merged_polygon)\n\n[1] \"sfc_POLYGON\" \"sfc\"        \n\nclass(sf_object)\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/data/geospatial/TAINAN_VILLAGE.html",
    "href": "take_home_Ex/take_home_Ex_02/data/geospatial/TAINAN_VILLAGE.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“TWD97”,DATUM[“Taiwan Datum 1997”,ELLIPSOID[“GRS 1980”,6378137,298.257222101,LENGTHUNIT[“metre”,1]]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“Taiwan, Republic of China - onshore and offshore - Taiwan Island, Penghu (Pescadores) Islands.”],BBOX[17.36,114.32,26.96,123.61]],ID[“EPSG”,3824]] +proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs 27230 3824 EPSG:3824 TWD97 longlat EPSG:7019 true"
  },
  {
    "objectID": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#space-time",
    "href": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#space-time",
    "title": "Importing the data",
    "section": "Space Time",
    "text": "Space Time\n\nGDPPC &lt;- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\nRows: 1496 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): County\ndbl (2): Year, GDPPC\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nGDPPC_st &lt;- spacetime(GDPPC, hunan,\n                      .loc_col = \"County\",\n                      .time_col = \"Year\")\n\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE"
  },
  {
    "objectID": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#deriving-spatial-weights",
    "href": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#deriving-spatial-weights",
    "title": "Importing the data",
    "section": "Deriving spatial weights",
    "text": "Deriving spatial weights\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\n\ngi_stars &lt;- GDPPC_nb %&gt;% \n  group_by(Year) %&gt;% \n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;% \n  tidyr::unnest(gi_star)\n\n\nMann-Kendall Test\n\ncbg &lt;- gi_stars %&gt;% \n  ungroup() %&gt;% \n  filter(County == \"Changsha\") |&gt; \n  select(County, Year, gi_star)\n\nggplot(data = cbg, \n       aes(x = Year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()"
  },
  {
    "objectID": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#group-by-using-country",
    "href": "in-class_Ex/In-class_Ex05/In-class_Ex05.html#group-by-using-country",
    "title": "Importing the data",
    "section": "Group by using country",
    "text": "Group by using country\n\ncbg %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;% \n  tidyr::unnest_wider(mk)\n\nehsa &lt;- gi_stars %&gt;%\n  group_by(County) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#intersection",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#intersection",
    "title": "Importing the packages",
    "section": "Intersection",
    "text": "Intersection\n\ndenguePointsInTainan &lt;- st_intersection(sf_object, merged_polygon)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\nThis one is to filter points found only in big polygon - it is faster than finding points in each polygon first"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#finding-points-that-fall-within-the-different-vilages-concetenating-townid-and-vill-eng",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#finding-points-that-fall-within-the-different-vilages-concetenating-townid-and-vill-eng",
    "title": "Importing the packages",
    "section": "Finding points that fall within the different vilages, concetenating TOWNID and VILL ENG",
    "text": "Finding points that fall within the different vilages, concetenating TOWNID and VILL ENG\n\ntown_dengue_intersections &lt;- st_intersection(denguePointsInTainan, tainan_filtered_villages) %&gt;% \n  mutate(town = paste0(as.character(TOWNID),\" \",as.character(VILLENG)))\n\nComment: Finding intersection of each point mapped to each town Will need to push it into a rds as it takes very long to compute"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#write-to-rds",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#write-to-rds",
    "title": "Importing the packages",
    "section": "Write to RDS",
    "text": "Write to RDS\n\nwrite_rds(town_dengue_intersections,\"data/rds/town_dengue_intersections.rds\")"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#read-from-rds",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#read-from-rds",
    "title": "Importing the packages",
    "section": "Read from RDS",
    "text": "Read from RDS\n\ntown_dengue_intersections_rds &lt;-read_rds(\"data/rds/town_dengue_intersections.rds\")\ntown_dengue_intersections_rds &lt;- select(town_dengue_intersections_rds,1,13)\n\n\nplot(denguePointsInTainan)\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(tainan_filtered_villages) +tm_polygons()+\n\ntm_shape(denguePointsInTainan) +tm_dots()"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#joining-the-2-datasets-together",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#joining-the-2-datasets-together",
    "title": "Importing the packages",
    "section": "Joining the 2 datasets together",
    "text": "Joining the 2 datasets together\n\ndf &lt;- st_drop_geometry(town_dengue_intersections_rds)\ndf &lt;- data.frame(df)\ncolnames(df)[2] &lt;- \"town\"\n\n\ntainan_filtered_villages &lt;- tainan_filtered_villages %&gt;%\n  mutate(town = paste0(as.character(TOWNID), \" \", as.character(VILLENG)))\n\ntainan_filtered_villages2&lt;-select(tainan_filtered_villages,4,5,8,11,12)\ntest2 &lt;- left_join(df,tainan_filtered_villages2)\n\nJoining with `by = join_by(town)`\n\n\nSteps: First i drop the geometric points as i already have town (comprises of TOWNID and village eng) - to seperate village level\nnext, i mutate tainan_filtered_village (Map) to combine TownID and village eng too\nLeft join the 2 data sets and filter those columns that i want\nJoining these 2 will result in date transmitted, town, and other details like geometry etc."
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#calculating-frequency",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#calculating-frequency",
    "title": "Importing the packages",
    "section": "Calculating frequency",
    "text": "Calculating frequency\n\ntown_frequency &lt;- test2 %&gt;%\n  group_by(town) %&gt;%\n  summarise(frequency = n())"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#visualising-regional-development-indicator",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#visualising-regional-development-indicator",
    "title": "Importing the packages",
    "section": "Visualising Regional Development Indicator",
    "text": "Visualising Regional Development Indicator\n\nequal &lt;- tm_shape(test3_sf) +\n  tm_fill(\"frequency\",n=5,  style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Town Frequency\")\n\nquantile&lt;- tm_shape(test3_sf) +\n  tm_fill(\"frequency\",n=5,  style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Town Frequency\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#computing-wm_q-and-writing-to-rds",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#computing-wm_q-and-writing-to-rds",
    "title": "Importing the packages",
    "section": "Computing wm_q and writing to rds",
    "text": "Computing wm_q and writing to rds\n\nwm_q&lt;-test3_sf %&gt;% mutate(nb=st_contiguity(geometry), wt=st_weights(nb,style=\"W\"),.before=1)\n\n\nwrite_rds(wm_q,\"data/rds/wm_qs.rds\")"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#reading-wm_q-rds",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#reading-wm_q-rds",
    "title": "Importing the packages",
    "section": "Reading wm_q rds",
    "text": "Reading wm_q rds\n\nwm_q &lt;-read_rds(\"data/rds/wm_qs.rds\")"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#joining-the-data",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#joining-the-data",
    "title": "Importing the packages",
    "section": "Joining the data",
    "text": "Joining the data\n\ntest3 &lt;- left_join(test2, town_frequency)\n\nJoining with `by = join_by(town)`\n\nclass(test3)\n\n[1] \"data.frame\"\n\nunique_data &lt;- test3 %&gt;%\n  distinct(town, .keep_all = TRUE)\n\ntest3_sf &lt;- st_as_sf(unique_data)\n\ntest4_sf &lt;- st_as_sf(test3)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#morans-test",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#morans-test",
    "title": "Importing the packages",
    "section": "Morans test",
    "text": "Morans test\n\nglobal_moran_test(wm_q$frequency,wm_q$nb, wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 12.709, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.464548385      -0.003906250       0.001358733 \n\n\n\nset.seed(1234)\nbperm = global_moran_perm(wm_q$frequency,\n                  wm_q$nb, \n                  wm_q$wt,\n                  nsim=99)\n\n\nsummary(bperm$res[1:99])\n\n      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n-0.0790354 -0.0251184 -0.0040105 -0.0003563  0.0221268  0.0968728 \n\n\n\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.46455, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#visualising-monte-carlo-morans-test",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#visualising-monte-carlo-morans-test",
    "title": "Importing the packages",
    "section": "Visualising Monte-carlo moran’s test",
    "text": "Visualising Monte-carlo moran’s test\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=5, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nResults of the moran’s test indicate that there is strong evidence to suggest that there is significant spatial autocorrelation the data. ( p values &lt; 2.2e-16)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#geary-c",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#geary-c",
    "title": "Importing the packages",
    "section": "Geary C",
    "text": "Geary C\nArguments are the same as Moran (x, nb, wt, nsim)\n\ngperm = global_c_perm(wm_q$frequency,\n                  wm_q$nb, \n                  wm_q$wt,\n                  nsim=99)\n\n\nsummary(gperm$res[1:99])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.8631  0.9645  0.9993  0.9983  1.0283  1.0940 \n\n\n\ngperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  x \nweights: listw \nnumber of simulations + 1: 100 \n\nstatistic = 0.49851, observed rank = 1, p-value = 0.01\nalternative hypothesis: greater\n\n\n\nhist(gperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\nResults of the geary c test indicate that there is strong evidence to suggest that there is significant spatial autocorrelation the data. ( p values &lt; 0.01) - Positive spatial autocorrelation.\n\nMI_corr &lt;- sp.correlogram(wm_q$nb, \n                          wm_q$frequency, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#local-moran",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#local-moran",
    "title": "Importing the packages",
    "section": "Local moran",
    "text": "Local moran\n\nlocalMoran = local_moran(wm_q$frequency,\n                  wm_q$nb, \n                  wm_q$wt,\n                  nsim=99)\n\n\nlocalMoran\n\n               ii           eii       var_ii         z_ii         p_ii p_ii_sim\n1    1.4041686190 -7.975279e-02 6.179796e-01  1.887660261 5.907157e-02     0.02\n2    0.7566799711 -2.695340e-02 1.537089e-01  1.998772977 4.563292e-02     0.04\n3    0.0348658160  2.128719e-02 4.930900e-02  0.061149477 9.512402e-01     0.92\n4   -0.2144958309  2.470731e-02 8.376675e-02 -0.826477513 4.085333e-01     0.36\n5    1.4326694701  3.819232e-03 3.084337e-01  2.572798491 1.008799e-02     0.02\n6    1.2956349824  1.677889e-02 2.038934e-01  2.832174846 4.623256e-03     0.02\n7    0.3259959174 -2.920996e-04 9.604740e-02  1.052830157 2.924188e-01     0.32\n8    0.0205861619 -3.214834e-02 1.700651e-02  0.404377725 6.859350e-01     0.68\n9    0.4029021290  1.363357e-02 7.914002e-02  1.383729637 1.664413e-01     0.18\n10   0.0864318728  6.370220e-03 3.249889e-03  1.404398184 1.602003e-01     0.10\n11   0.5624332176  6.824033e-03 1.517689e-01  1.426191986 1.538129e-01     0.06\n12   1.4284211906 -9.462331e-03 3.691925e-01  2.366449520 1.795962e-02     0.02\n13   1.3707870217  8.216073e-02 2.321706e-01  2.674381612 7.486720e-03     0.02\n14   1.2267103076  2.351483e-02 4.023762e-01  1.896793543 5.785519e-02     0.02\n15   0.5777123718 -2.431520e-02 2.303853e-01  1.254264214 2.097460e-01     0.10\n16   0.3761302160  5.702499e-02 1.408497e-01  0.850268368 3.951759e-01     0.38\n17  -0.1083529980 -4.604679e-03 5.758444e-03 -1.367188785 1.715661e-01     0.16\n18   0.6387676536  3.038147e-03 1.510583e-01  1.635686673 1.019052e-01     0.10\n19   1.6954622322 -1.699376e-01 7.822037e-01  2.109172097 3.492973e-02     0.06\n20   0.3202209908 -1.364257e-02 5.726716e-02  1.395134858 1.629752e-01     0.20\n21   0.0034498159  1.019867e-03 2.492111e-05  0.486758280 6.264296e-01     0.68\n22  -0.2216117441  7.860882e-03 6.907701e-03 -2.760985539 5.762723e-03     0.06\n23   0.9460460404 -2.474282e-03 4.611467e-01  1.396777027 1.624806e-01     0.20\n24   0.3387501265  6.578480e-03 5.810963e-02  1.377966027 1.682138e-01     0.24\n25   0.9553398694  5.490369e-02 2.034560e-01  1.996262443 4.590536e-02     0.02\n26   1.1539477468  3.464007e-02 2.898921e-01  2.078889013 3.762755e-02     0.02\n27   0.0330966224  3.812626e-04 4.458019e-03  0.489982718 6.241461e-01     0.56\n28   0.1013126164 -1.017434e-02 1.626046e-02  0.874294202 3.819581e-01     0.40\n29  -0.2488530664  3.126714e-03 1.784645e-02 -1.886209000 5.926680e-02     0.12\n30  -0.1064160994 -3.844044e-03 1.351707e-02 -0.882242083 3.776459e-01     0.44\n31   0.2104012185 -3.607266e-02 7.572913e-02  0.895652243 3.704385e-01     0.36\n32   1.1833260437 -6.009556e-02 7.328540e-01  1.452478380 1.463686e-01     0.12\n33   0.2489016126  1.102545e-02 8.767574e-02  0.803361848 4.217656e-01     0.50\n34   0.7374847102 -4.821446e-02 8.463584e-02  2.700717330 6.919012e-03     0.04\n35   0.7387073151 -6.418863e-02 5.608623e-02  3.390245315 6.983011e-04     0.06\n36   1.7123360885 -8.638065e-02 2.776370e-01  3.413690374 6.408937e-04     0.02\n37  -0.0294895280  5.510372e-02 7.524844e-02 -0.308380552 7.577928e-01     0.78\n38   1.7750388884  5.931692e-02 5.132341e-01  2.394909720 1.662446e-02     0.02\n39   0.1004682421 -1.660350e-02 1.394683e-02  0.991321108 3.215288e-01     0.34\n40  -0.1688626282 -2.282346e-02 9.636563e-02 -0.470444374 6.380376e-01     0.66\n41   1.4043666317 -6.953689e-03 1.408982e-01  3.759870766 1.700012e-04     0.02\n42   0.5175225906 -1.357344e-02 1.391951e-01  1.423511925 1.545878e-01     0.18\n43   0.7985940575 -4.678399e-02 1.978563e-01  1.900535854 5.736283e-02     0.10\n44   2.4345708689 -3.217894e-02 5.069145e-01  3.464637117 5.309474e-04     0.02\n45  -0.0192914423  7.842113e-05 1.765935e-03 -0.460934455 6.448456e-01     0.54\n46  -0.0401899335 -1.634733e-03 2.840688e-04 -2.287553176 2.216356e-02     0.08\n47   0.0410952243  7.627448e-03 1.120456e-03  0.999837713 3.173891e-01     0.34\n48  -0.0287912211  6.307759e-03 1.374626e-02 -0.299365880 7.646609e-01     0.88\n49  -0.0240540084  6.503569e-02 7.100430e-02 -0.334337582 7.381248e-01     0.80\n50   1.9078948238  2.064408e-03 4.201427e-01  2.940260607 3.279363e-03     0.04\n51  -0.0339032030 -4.224642e-02 1.158963e-01  0.024507489 9.804478e-01     0.96\n52   0.4217875686  3.586413e-03 4.442875e-02  1.984052577 4.724998e-02     0.08\n53   0.0602204717 -6.617464e-03 1.685922e-01  0.162781226 8.706907e-01     0.98\n54  -0.0451105095 -5.351200e-03 2.734392e-03 -0.760341113 4.470507e-01     0.56\n55   0.0513808927  2.530750e-02 6.431728e-02  0.102809595 9.181141e-01     0.98\n56   0.7253086373  4.934287e-02 3.459899e-01  1.149193112 2.504764e-01     0.24\n57  -0.1064236242  1.248291e-02 3.103382e-02 -0.674975644 4.996912e-01     0.46\n58   0.0281981762 -2.185428e-02 1.138868e-02  0.469017096 6.390574e-01     0.64\n59   0.0272130350  1.808563e-02 1.272972e-01  0.025582207 9.795906e-01     1.00\n60   0.1700085354  1.358745e-02 3.108546e-02  0.887190022 3.749766e-01     0.40\n61   0.0724507804  9.027424e-03 1.468336e-02  0.523403289 6.006936e-01     0.54\n62   0.3619937045 -1.111617e-02 1.317808e-01  1.027804823 3.040416e-01     0.30\n63   0.0739534804  1.751898e-03 1.608924e-03  1.800026468 7.185646e-02     0.14\n64   0.5459091963  1.853381e-02 1.179331e-01  1.535684480 1.246158e-01     0.14\n65   0.6570304000  2.162435e-02 7.674233e-02  2.293685426 2.180857e-02     0.06\n66   0.0497501281  3.540777e-02 7.626924e-02  0.051933301 9.585818e-01     0.92\n67   0.0214868227  2.306071e-02 3.378937e-02 -0.008562159 9.931685e-01     0.86\n68   0.0243155385  2.188507e-04 1.026440e-02  0.237843107 8.120028e-01     0.88\n69  -0.0024638710 -4.133693e-04 9.469471e-05 -0.210715889 8.331090e-01     0.72\n70  -0.0380061912  5.249391e-04 2.954185e-02 -0.224177965 8.226188e-01     0.96\n71  -0.0314135633 -3.774014e-03 7.939385e-03 -0.310196946 7.564112e-01     0.72\n72   0.0315575759  6.738054e-03 2.974468e-02  0.143909258 8.855721e-01     0.86\n73  -0.0298218712  1.538638e-02 4.559694e-02 -0.211714153 8.323300e-01     0.92\n74   0.9379230875 -4.910192e-02 2.378997e-01  2.023630365 4.300820e-02     0.08\n75   0.1479322098  2.797630e-03 4.212806e-03  2.236068774 2.534727e-02     0.06\n76   0.1523439917  5.457846e-03 8.068534e-03  1.635247582 1.019972e-01     0.20\n77   0.4531098021 -5.783986e-02 1.166908e-01  1.495752604 1.347181e-01     0.08\n78   0.9283083061 -2.358030e-02 1.823701e-01  2.228996106 2.581416e-02     0.02\n79   0.8646213115  8.330811e-04 3.213897e-01  1.523671432 1.275908e-01     0.14\n80   1.0720294115 -1.833391e-01 3.261627e-01  2.198133521 2.793959e-02     0.02\n81   1.0795199112 -4.421176e-02 4.603353e-01  1.656248423 9.767152e-02     0.08\n82   0.2057583335  3.919963e-02 1.112916e-01  0.499270747 6.175887e-01     0.74\n83   0.7132140601 -1.712422e-02 1.950814e-01  1.653545312 9.821993e-02     0.04\n84   0.0187942801 -4.511355e-03 1.223509e-03  0.666280816 5.052316e-01     0.54\n85   0.5183949063 -7.427069e-02 1.047368e-01  1.831302605 6.705539e-02     0.14\n86   0.4524756857 -4.162083e-02 3.608520e-01  0.822521429 4.107802e-01     0.38\n87   2.3053380976 -4.949547e-02 5.040770e-01  3.316742559 9.107349e-04     0.02\n88   1.4371741060 -2.531268e-02 2.094734e-01  3.195416865 1.396290e-03     0.02\n89   0.2149580835  9.928216e-03 9.131678e-02  0.678487486 4.974627e-01     0.44\n90   3.5254581204 -1.905586e-01 1.023310e+00  3.673448652 2.392988e-04     0.02\n91   0.2221196069  1.143437e-02 1.064222e-01  0.645829751 5.183896e-01     0.62\n92  -0.0055555940 -1.096053e-03 3.989209e-05 -0.706068367 4.801456e-01     0.58\n93   0.4939905125  1.951937e-02 1.736639e-01  1.138557544 2.548877e-01     0.22\n94   1.2071449184 -1.317649e-01 7.348249e-01  1.561922168 1.183063e-01     0.18\n95   0.3764225023  6.209261e-02 9.118694e-02  1.040924785 2.979105e-01     0.30\n96   0.5600457078  9.351821e-02 1.622462e-01  1.158217172 2.467754e-01     0.24\n97   0.0715103150  2.912862e-03 1.181704e-03  1.995508540 4.598744e-02     0.10\n98   0.3737626643  5.368416e-02 4.067737e-02  1.587011533 1.125100e-01     0.10\n99   0.6408785894 -1.741634e-03 1.276240e-01  1.798821804 7.204687e-02     0.06\n100 -0.2636451776 -1.852539e-02 1.138066e-01 -0.726598616 4.674719e-01     0.48\n101  0.2594825291 -3.544526e-02 3.944063e-02  1.485059307 1.375281e-01     0.16\n102 -0.4081508560 -2.152182e-02 8.117363e-02 -1.357022272 1.747741e-01     0.24\n103  0.2199743529  2.289122e-02 5.399108e-01  0.268218334 7.885313e-01     0.68\n104  0.0497991106 -3.467999e-03 2.870330e-03  0.994244503 3.201038e-01     0.30\n105  0.0051955830 -5.179616e-04 1.956154e-03  0.129182639 8.972131e-01     0.84\n106  0.0019738078 -3.630286e-04 2.251494e-04  0.155737407 8.762400e-01     0.86\n107 -0.0164186501  3.303724e-03 4.380703e-04 -0.942295897 3.460412e-01     0.32\n108  0.0046827568  9.194780e-05 1.120041e-04  0.433782717 6.644462e-01     0.80\n109  0.4473926945  1.883629e-02 1.439664e-01  1.129476878 2.586967e-01     0.28\n110  2.9543242965  1.170655e-01 8.999106e-01  2.990881993 2.781730e-03     0.02\n111  1.6289304760 -2.521623e-02 3.333681e-01  2.864916913 4.171187e-03     0.04\n112  0.0828241054 -5.472619e-03 1.544192e-02  0.710548787 4.773639e-01     0.40\n113  4.8767053129  5.344396e-02 1.279590e+00  4.263884251 2.009035e-05     0.02\n114  4.6218380075 -9.478309e-02 2.921748e+00  2.759367745 5.791332e-03     0.02\n115  0.6758342546 -1.254461e-02 1.848786e-01  1.600973942 1.093827e-01     0.08\n116  0.2456622321  1.724615e-02 6.431692e-01  0.284815791 7.757853e-01     0.68\n117  1.0496828535 -1.027519e-01 7.543773e-01  1.326850713 1.845581e-01     0.16\n118  1.3868453537  2.234948e-02 3.529854e-01  2.296644917 2.163903e-02     0.04\n119 -0.0035365467 -6.280247e-04 2.829276e-05 -0.546807836 5.845108e-01     0.66\n120  0.0808216240  1.330890e-02 3.573828e-03  1.129324639 2.587609e-01     0.26\n121 -0.0313260099  2.811773e-03 3.602627e-03 -0.568755536 5.695221e-01     0.58\n122  0.0349258729 -1.112247e-02 7.867190e-03  0.519163602 6.036467e-01     0.72\n123  0.0574960186  1.867794e-02 2.113492e-02  0.267013827 7.894585e-01     0.96\n124  0.0541357481 -5.439991e-04 9.016628e-03  0.575843422 5.647210e-01     0.64\n125  2.8553236617  1.516912e-02 1.275742e+00  2.514551875 1.191838e-02     0.06\n126  0.6813598292 -5.932807e-02 1.285657e-01  2.065725493 3.885441e-02     0.04\n127  0.2747144328  1.135895e-02 5.900965e-02  1.084128717 2.783077e-01     0.22\n128  0.1208831223 -3.687680e-03 3.064020e-03  2.250455724 2.442003e-02     0.02\n129  0.5101147224 -9.419236e-02 3.375944e-01  1.040064027 2.983102e-01     0.36\n130  0.3399024237 -4.148955e-02 2.756268e-01  0.726458583 4.675577e-01     0.52\n131  0.1387393883  1.799293e-02 2.308713e-02  0.794674767 4.268027e-01     0.44\n132  0.7357378072  2.022650e-02 1.112825e-01  2.144880775 3.196238e-02     0.02\n133  0.7820007507 -1.653096e-02 1.177643e-01  2.326941009 1.996841e-02     0.02\n134 -0.1960324785 -4.549748e-02 3.634317e-01 -0.249704339 8.028160e-01     0.64\n135 -0.0298220984  2.838690e-02 5.773501e-02 -0.242253765 8.085835e-01     0.64\n136  0.3905418249 -3.386964e-02 7.367147e-02  1.563642451 1.179016e-01     0.18\n137  0.4350509936  1.269639e-02 6.988859e-02  1.597622167 1.101271e-01     0.20\n138  0.8562428785 -3.517736e-03 4.983420e-01  1.217906054 2.232597e-01     0.24\n139  0.2163005994 -1.846795e-02 1.714845e-02  1.792782263 7.300775e-02     0.04\n140  0.3018807053 -1.656716e-02 1.418287e-02  2.673968081 7.495959e-03     0.04\n141  0.0622948287  3.884528e-03 3.089687e-02  0.332301422 7.396617e-01     0.90\n142 -0.1258967654  5.261134e-02 1.039456e-01 -0.553675010 5.798013e-01     0.74\n143  0.8293507380 -1.261981e-01 3.944673e-01  1.521414015 1.281560e-01     0.08\n144  0.4480644555 -3.765180e-02 8.114866e-02  1.705069036 8.818155e-02     0.08\n145 -0.0930553582  1.045498e-02 6.676188e-03 -1.266833247 2.052149e-01     0.22\n146 -0.0063677108 -1.385806e-03 5.922550e-03 -0.064735281 9.483848e-01     0.94\n147 -0.1425041564 -5.321304e-02 2.124851e-01 -0.193706406 8.464058e-01     0.84\n148  0.4006108725  1.617597e-02 2.420713e-01  0.781359919 4.345908e-01     0.42\n149 -0.0410320362  1.123224e-03 7.564946e-05 -4.846730288 1.255129e-06     0.02\n150  3.6518729032 -3.683247e-01 4.212581e+00  1.958724085 5.014511e-02     0.10\n151  2.3020091759 -8.098562e-02 5.313409e-01  3.269162083 1.078665e-03     0.02\n152  0.0740172287 -5.414394e-03 4.879457e-03  1.137123665 2.554866e-01     0.26\n153 -0.0376205146 -3.436379e-03 1.366080e-03 -0.924882380 3.550271e-01     0.40\n154  0.0045907548 -3.029616e-03 9.439359e-04  0.248030379 8.041109e-01     0.74\n155  0.0011378386  7.587827e-03 1.014338e-02 -0.064042394 9.489365e-01     0.82\n156  0.0077743176 -1.817178e-02 9.145586e-03  0.271310275 7.861524e-01     0.84\n157  0.9269778733  5.486811e-02 4.455482e-01  1.306543347 1.913678e-01     0.18\n158 -0.0333506607 -8.303951e-03 2.881521e-03 -0.466594668 6.407899e-01     0.56\n159  0.6293067769  3.715454e-02 1.117495e-01  1.771375319 7.649831e-02     0.02\n160  1.3383784501  4.629822e-02 7.017598e-01  1.542393725 1.229779e-01     0.04\n161  0.7297815268 -8.695435e-03 1.140928e-01  2.186290584 2.879435e-02     0.04\n162  0.0013183090 -1.685736e-04 1.827746e-06  1.099812646 2.714138e-01     0.26\n163  0.9803082017 -4.075318e-03 3.958197e-01  1.564644319 1.176663e-01     0.04\n164 -0.0053250210  4.255714e-04 1.474067e-04 -0.473646121 6.357523e-01     0.72\n165 -0.0783722094 -1.236308e-02 7.220661e-02 -0.245649318 8.059537e-01     0.64\n166  0.9178664149 -3.920660e-02 1.796848e-01  2.257820326 2.395686e-02     0.02\n167  0.6703504785 -1.477023e-02 2.960949e-01  1.259075172 2.080032e-01     0.18\n168  0.5718617233 -1.095834e-02 1.617297e-01  1.449237642 1.472712e-01     0.08\n169  0.6363437973 -8.716413e-03 1.911886e-01  1.475262442 1.401420e-01     0.10\n170  1.9204878717  7.117219e-03 3.145690e-01  3.411466930 6.461434e-04     0.02\n171  0.0148393281 -1.079039e-02 3.407108e-03  0.439087329 6.605983e-01     0.66\n172 -0.4000484291  9.689614e-03 1.834963e-02 -3.024771768 2.488208e-03     0.02\n173 -0.0666391093 -6.564353e-03 4.517011e-03 -0.893853724 3.714002e-01     0.44\n174 -0.0526772989  1.049672e-02 2.333598e-02 -0.413547609 6.792054e-01     0.74\n175 -0.1260639916 -3.366062e-03 2.206955e-02 -0.825924713 4.088468e-01     0.48\n176  0.0271380703  4.239784e-03 5.891073e-03  0.298336078 7.654467e-01     0.70\n177 -0.0775141727 -4.846986e-04 1.283026e-03 -2.150498762 3.151578e-02     0.06\n178  0.3172413361  3.128147e-04 2.632448e-01  0.617705485 5.367695e-01     0.54\n179 -0.1235476465 -3.448223e-02 2.946831e-02 -0.518837672 6.038739e-01     0.58\n180  0.0319285048  4.419825e-03 1.332702e-02  0.238288580 8.116573e-01     0.80\n181 -0.0955910327  2.857783e-02 2.930349e-02 -0.725359079 4.682318e-01     0.56\n182  0.1192203787  9.703337e-03 1.388097e-01  0.293948916 7.687969e-01     0.66\n183 -0.0483284310 -2.400040e-04 1.484220e-03 -1.248220761 2.119502e-01     0.26\n184  0.0151969515  2.475793e-03 6.877053e-03  0.153400043 8.780828e-01     0.94\n185  0.1082395752 -8.318822e-03 1.129821e-01  0.346767778 7.287658e-01     0.80\n186 -0.4063479188  4.702676e-02 1.671929e-01 -1.108787712 2.675218e-01     0.24\n187 -0.0396516269  2.389544e-03 4.380314e-03 -0.635217089 5.252868e-01     0.60\n188  0.0868985086  3.530133e-03 2.106312e-02  0.574433748 5.656743e-01     0.56\n189  1.9902367787  2.289989e-01 2.478070e+00  1.118822556 2.632158e-01     0.24\n190  0.1694618237  1.493020e-03 1.955483e-02  1.201162091 2.296883e-01     0.18\n191  0.0477743558  4.310242e-03 1.910885e-03  0.994291146 3.200811e-01     0.30\n192 -0.3714651359 -1.598156e-03 1.065541e-01 -1.133079593 2.571808e-01     0.26\n193 -0.0091811560  5.895379e-03 5.525534e-03 -0.202821693 8.392744e-01     0.98\n194  0.0088989492 -6.562988e-04 3.093523e-05  1.717968820 8.580230e-02     0.12\n195 -0.0390193495 -5.691871e-04 8.662490e-03 -0.413120547 6.795183e-01     0.70\n196 -0.0060704079  1.859512e-02 7.591561e-03 -0.283090263 7.771076e-01     0.72\n197 -0.0099732538  2.829528e-02 2.614346e-02 -0.236679332 8.129056e-01     0.72\n198  0.0187910619 -1.224652e-02 1.313337e-02  0.270831866 7.865204e-01     0.74\n199  0.0002325839  5.693855e-04 3.550640e-04 -0.017873961 9.857394e-01     0.92\n200  0.1990758806 -1.871196e-02 7.576575e-02  0.791219814 4.288157e-01     0.42\n201  0.4585731333 -5.328991e-03 1.421704e-01  1.230330447 2.185734e-01     0.18\n202 -0.0163677001 -7.405059e-03 1.863212e-02 -0.065660609 9.476480e-01     0.84\n203  0.0370871637 -3.441968e-03 2.023665e-02  0.284903624 7.757180e-01     0.78\n204 -0.0034679427  2.443646e-03 3.476707e-03 -0.100258261 9.201393e-01     0.96\n205  0.0120583675  7.234565e-03 5.166689e-02  0.021221857 9.830687e-01     0.98\n206  0.0933553646 -2.864725e-02 9.416549e-03  1.257254682 2.086614e-01     0.16\n207  0.0181832048 -1.093627e-02 6.792602e-03  0.353317716 7.238503e-01     0.76\n208  0.8275005694 -1.487025e-02 2.687413e-01  1.624935300 1.041763e-01     0.08\n209  0.5978246999 -1.126250e-02 1.572100e-01  1.536170628 1.244965e-01     0.08\n210  0.5381242333 -2.422650e-02 5.754813e-02  2.344183790 1.906877e-02     0.02\n211  0.0622547391  7.760824e-03 4.047902e-03  0.856511161 3.917151e-01     0.40\n212  0.9943248833  6.873207e-02 2.227457e-01  1.961170447 4.985914e-02     0.06\n213 -0.0172633814  2.279444e-03 7.687184e-04 -0.704861365 4.808965e-01     0.50\n214  0.0285283234 -3.502190e-03 2.999836e-03  0.584810505 5.586751e-01     0.68\n215  0.4043285015 -1.094774e-01 8.383236e-02  1.774570518 7.596883e-02     0.08\n216  0.3090050709 -1.446117e-02 8.991692e-03  3.411208371 6.467565e-04     0.02\n217  0.0135231309 -2.105082e-04 5.859606e-04  0.567350457 5.704761e-01     0.70\n218  0.0905530342  4.998607e-02 6.402898e-02  0.160318734 8.726300e-01     0.92\n219  0.3196898020  6.192044e-02 2.500666e-01  0.515470026 6.062246e-01     0.52\n220  0.0516000128 -9.063321e-03 6.193862e-03  0.770806744 4.408215e-01     0.42\n221  0.7469552415  5.642719e-02 3.136202e-01  1.233046122 2.175586e-01     0.12\n222  0.8428307411  1.250938e-01 2.108675e-01  1.563005319 1.180513e-01     0.10\n223 -0.5297934587 -1.918974e-01 7.064452e-01 -0.402016472 6.876719e-01     0.70\n224  0.4397933582 -5.878587e-02 3.652570e-01  0.824963864 4.093921e-01     0.50\n225  0.1737498257  2.661985e-02 3.770772e-02  0.757680371 4.486424e-01     0.42\n226  0.3627978705  4.101443e-03 4.550398e-02  1.681521197 9.266172e-02     0.10\n227  2.2107462050  5.494008e-03 2.198879e-01  4.702811575 2.566032e-06     0.02\n228  0.0003792680 -1.358209e-04 2.034739e-06  0.361100255 7.180245e-01     0.76\n229  0.5342601475  2.439164e-02 2.143081e-01  1.101384338 2.707294e-01     0.38\n230  0.2072099213  1.344017e-03 8.110582e-02  0.722867045 4.697616e-01     0.52\n231  0.4081696435 -4.799778e-03 1.931943e-02  2.971124043 2.967119e-03     0.02\n232  0.1540827167 -1.158885e-02 6.988806e-02  0.626680928 5.308684e-01     0.52\n233  0.4183527174  4.049033e-02 1.639346e-01  0.933250734 3.506905e-01     0.32\n234  0.4821163804  4.627536e-02 1.713202e-01  1.052988920 2.923461e-01     0.24\n235  0.0103567029 -8.218459e-02 1.410289e-01  0.246423140 8.053547e-01     0.90\n236  0.5468357072 -5.671771e-02 1.143758e-01  1.784632134 7.432101e-02     0.06\n237  0.5561316456 -9.001603e-03 7.227733e-01  0.664736955 5.062188e-01     0.54\n238  0.4657111793 -2.918939e-02 9.743750e-01  0.501366009 6.161136e-01     0.70\n239 -0.0452923636  2.595017e-03 9.909313e-02 -0.152124547 8.790887e-01     0.84\n240  0.5390210324  7.850363e-02 7.595562e-02  1.670960134 9.472955e-02     0.14\n241  0.7830717226 -2.223115e-02 9.021347e-02  2.681165153 7.336630e-03     0.02\n242  0.8650188512 -1.667342e-02 1.102726e-01  2.655114065 7.928160e-03     0.02\n243  0.2832149673 -2.463386e-02 8.628031e-02  1.048049148 2.946160e-01     0.34\n244 -0.3914303365 -2.631722e-02 1.487747e-01 -0.946592086 3.438467e-01     0.38\n245 -0.2968965334  7.666306e-03 1.721062e-02 -2.321553122 2.025701e-02     0.06\n246  0.7360297149 -8.424762e-02 2.255546e-01  1.727168957 8.413732e-02     0.04\n247  0.4397445176 -6.661630e-02 1.436134e-01  1.336172778 1.814928e-01     0.24\n248  1.2367741196  1.779324e-02 1.353979e-01  3.312766981 9.237791e-04     0.02\n249  0.7268376236 -1.819876e-03 9.095702e-02  2.416046665 1.569005e-02     0.02\n250  0.7686104780  4.335211e-02 1.700833e-01  1.758579024 7.864904e-02     0.02\n251  0.9001643889 -3.721599e-02 3.179736e-01  1.662341797 9.644426e-02     0.10\n252  0.8791610418 -4.197250e-02 3.487758e-01  1.559729954 1.188237e-01     0.04\n253  1.1177075741  4.887696e-02 2.627201e-01  2.085269520 3.704484e-02     0.02\n254  1.1831675957 -2.532560e-02 1.769822e-01  2.872627818 4.070734e-03     0.02\n255  0.1524054778  6.535181e-03 1.178442e-01  0.424925517 6.708910e-01     0.74\n256 -0.0024576240 -1.486027e-03 1.479213e-04 -0.079886045 9.363279e-01     0.94\n257  0.3194404247  1.740347e-02 1.513980e-02  2.454708870 1.409987e-02     0.06\n    p_folded_sim      skewness     kurtosis      mean    median     pysal\n1           0.01 -0.8617148587  1.150333532   Low-Low   Low-Low   Low-Low\n2           0.02 -0.5897378352  0.315083849   Low-Low   Low-Low   Low-Low\n3           0.46  0.0879434711 -0.564100652 High-High High-High High-High\n4           0.18 -0.5387235588  0.031417934  Low-High  Low-High  Low-High\n5           0.01 -0.3773048990 -0.037365166   Low-Low   Low-Low   Low-Low\n6           0.01 -0.6551054935  0.657355940   Low-Low   Low-Low   Low-Low\n7           0.16 -0.8394714779  0.749307894   Low-Low   Low-Low   Low-Low\n8           0.34 -0.2106086277 -0.517962448   Low-Low   Low-Low   Low-Low\n9           0.09  0.5198679787  0.524754230 High-High High-High High-High\n10          0.05 -0.7218975719  0.141151564   Low-Low  High-Low   Low-Low\n11          0.03 -1.1146899653  2.108400304   Low-Low   Low-Low   Low-Low\n12          0.01 -0.3721543244 -0.132175031   Low-Low   Low-Low   Low-Low\n13          0.01 -0.5050671318 -0.220406423   Low-Low   Low-Low   Low-Low\n14          0.01 -0.6811224867  0.508028432   Low-Low   Low-Low   Low-Low\n15          0.05 -1.0248290507  0.379900431   Low-Low   Low-Low   Low-Low\n16          0.19 -0.5947129815  0.573362853   Low-Low   Low-Low   Low-Low\n17          0.08  0.1751417973 -0.631854300  High-Low  High-Low  High-Low\n18          0.05 -0.5462248724  0.094487828   Low-Low   Low-Low   Low-Low\n19          0.03  0.8927681208  1.699702215 High-High High-High High-High\n20          0.10  0.9702650972  2.280384530 High-High High-High High-High\n21          0.34  0.5547188722  0.798546403 High-High High-High High-High\n22          0.03 -0.8370404275  1.311442923  Low-High  Low-High  Low-High\n23          0.10  0.6129396988 -0.017401846 High-High High-High High-High\n24          0.12  0.8703919340  1.174981832 High-High High-High High-High\n25          0.01 -0.6405721326  0.625557596   Low-Low   Low-Low   Low-Low\n26          0.01 -1.1994562157  3.037356680   Low-Low   Low-Low   Low-Low\n27          0.28  0.5671806423  0.868970833 High-High High-High High-High\n28          0.20  0.5302714815  0.529499154 High-High High-High High-High\n29          0.06 -0.5202923455  0.277050545  Low-High  Low-High  Low-High\n30          0.22 -0.0268210808 -0.308421671  Low-High  Low-High  Low-High\n31          0.18  0.1464697990 -0.256359695   Low-Low   Low-Low   Low-Low\n32          0.06  0.5777045879  0.516625369 High-High High-High High-High\n33          0.25 -0.5622576801  0.240068296   Low-Low   Low-Low   Low-Low\n34          0.02  0.1087380658  0.293050006 High-High High-High High-High\n35          0.03  0.9636515337  2.202303498 High-High High-High High-High\n36          0.01  0.2476861590 -0.441951303 High-High High-High High-High\n37          0.39 -0.6319319950  1.196984675  Low-High  Low-High  Low-High\n38          0.01  0.2306115609 -0.410567751 High-High High-High High-High\n39          0.17  0.3460043685 -0.169453185 High-High High-High High-High\n40          0.33 -0.2948450075 -0.833920795  Low-High  Low-High  Low-High\n41          0.01  0.3513447352  0.033673083 High-High High-High High-High\n42          0.09  0.8534504301  0.976316854 High-High High-High High-High\n43          0.05  0.6044104609  0.156786454 High-High High-High High-High\n44          0.01  0.2153922978 -0.353622154 High-High High-High High-High\n45          0.27 -0.7125956346  0.278667204  Low-High High-High  Low-High\n46          0.04 -0.6898889915  1.139513138  Low-High High-High  Low-High\n47          0.17  1.0696959450  3.364549345 High-High High-High High-High\n48          0.44  0.8300633830  0.617213305  High-Low  High-Low  High-Low\n49          0.40  0.6452292641  0.412425275  High-Low  High-Low  High-Low\n50          0.02  0.6264891755  0.292216333 High-High High-High High-High\n51          0.48  0.4052163198 -0.389730916  High-Low  High-Low  High-Low\n52          0.04  0.4413567994 -0.039380578 High-High High-High High-High\n53          0.49 -0.6283331805  0.432013974   Low-Low   Low-Low   Low-Low\n54          0.28 -0.0280007534 -0.594289809  High-Low  High-Low  High-Low\n55          0.49 -0.6565734671  0.161557111   Low-Low   Low-Low   Low-Low\n56          0.12  0.7485805313  1.144955047 High-High High-High High-High\n57          0.23 -0.6432730318 -0.058227500  Low-High  Low-High  Low-High\n58          0.32  0.4426904093 -0.087853007 High-High High-High High-High\n59          0.50 -0.7687266029  1.214478844   Low-Low   Low-Low   Low-Low\n60          0.20 -0.2845230642 -0.385691937   Low-Low   Low-Low   Low-Low\n61          0.27  0.3999427803  0.160749742 High-High High-High High-High\n62          0.15 -0.6428276032  1.111616678   Low-Low   Low-Low   Low-Low\n63          0.07  0.5866083187 -0.030421368 High-High High-High High-High\n64          0.07  1.1315392479  2.812281244 High-High High-High High-High\n65          0.03  0.3347746097  0.353990137 High-High High-High High-High\n66          0.46  0.3982755668 -0.326558481 High-High High-High High-High\n67          0.43 -0.6849297082  0.588627823   Low-Low   Low-Low   Low-Low\n68          0.44 -0.5443961423  0.044951049   Low-Low   Low-Low   Low-Low\n69          0.36 -0.5230915588 -0.104425379  Low-High High-High  Low-High\n70          0.48  0.6200034324 -0.197360054  High-Low  High-Low  High-Low\n71          0.36 -0.6031503649  0.080779260  Low-High  Low-High  Low-High\n72          0.43  0.4980989642 -0.324687446 High-High High-High High-High\n73          0.46  0.8105295960  0.801431812  High-Low  High-Low  High-Low\n74          0.04  0.3385276100  0.222092024 High-High High-High High-High\n75          0.03  0.7071891555  0.500551001 High-High High-High High-High\n76          0.10  0.4400253973 -0.522816478 High-High High-High High-High\n77          0.04 -0.9180690626  1.119250735   Low-Low   Low-Low   Low-Low\n78          0.01 -0.3117196425 -0.164584698   Low-Low   Low-Low   Low-Low\n79          0.07 -0.4509349072 -0.279620443   Low-Low   Low-Low   Low-Low\n80          0.01 -0.5602961833 -0.240176226   Low-Low   Low-Low   Low-Low\n81          0.04 -0.6730818920  0.118696103   Low-Low   Low-Low   Low-Low\n82          0.37 -0.4695788866  0.278828856   Low-Low   Low-Low   Low-Low\n83          0.02 -0.7028561157  0.145784956   Low-Low   Low-Low   Low-Low\n84          0.27  0.4445278721 -0.350904644 High-High High-High High-High\n85          0.07  0.4216255168 -0.386795314 High-High High-High High-High\n86          0.19  0.7169370770  1.069900111 High-High High-High High-High\n87          0.01  0.1414778101 -0.535425959 High-High High-High High-High\n88          0.01  0.2667781866 -0.115920848 High-High High-High High-High\n89          0.22  0.8450953642  0.436281024 High-High High-High High-High\n90          0.01  0.8466430293  0.692429750 High-High High-High High-High\n91          0.31 -0.7092883273 -0.128343886   Low-Low   Low-Low   Low-Low\n92          0.29  0.2865989715 -0.527822123  High-Low  High-Low  High-Low\n93          0.11  0.5054536800  0.333266910 High-High High-High High-High\n94          0.09  0.8457927306  0.943934370 High-High High-High High-High\n95          0.15 -0.5955457954  0.104007776   Low-Low   Low-Low   Low-Low\n96          0.12  1.0282984334  2.749442863 High-High High-High High-High\n97          0.05  0.3002485828 -0.300386055 High-High High-High High-High\n98          0.05 -0.3496908370 -0.227346337   Low-Low   Low-Low   Low-Low\n99          0.03 -0.4125661764 -0.142718104   Low-Low   Low-Low   Low-Low\n100         0.24 -0.1374239978 -0.552648654  Low-High  Low-High  Low-High\n101         0.08  0.3087723989 -0.451337911 High-High High-High High-High\n102         0.12 -0.2499212575 -0.126083458  Low-High  Low-High  Low-High\n103         0.34  0.7011008203  0.044566005 High-High High-High High-High\n104         0.15  0.8347996193  1.326669422 High-High High-High High-High\n105         0.42  0.2387675381 -0.707460797 High-High High-High High-High\n106         0.43  0.8564818030  2.264366890 High-High High-High High-High\n107         0.16 -0.1296812991 -0.289954122  Low-High High-High  Low-High\n108         0.40 -1.1602685648  1.984802978   Low-Low  High-Low   Low-Low\n109         0.14  0.6875450510  1.029905497 High-High High-High High-High\n110         0.01  0.6868717451 -0.004296619 High-High High-High High-High\n111         0.02  1.4146693273  5.446321073 High-High High-High High-High\n112         0.20  0.7123343206  0.698086789 High-High High-High High-High\n113         0.01  0.2251147303 -0.659007282 High-High High-High High-High\n114         0.01  0.3258231334 -0.381251821 High-High High-High High-High\n115         0.04 -0.5461570896  0.335102210   Low-Low   Low-Low   Low-Low\n116         0.34  0.6554160784  0.402139454 High-High High-High High-High\n117         0.08 -0.8095782785  0.271653374   Low-Low   Low-Low   Low-Low\n118         0.02 -0.5144011569  0.543777104   Low-Low   Low-Low   Low-Low\n119         0.33  0.5397095332 -0.012992073  High-Low  High-Low  High-Low\n120         0.13 -0.4504223504  0.387853944   Low-Low   Low-Low   Low-Low\n121         0.29  0.7517356505  0.338784043  High-Low  High-Low  High-Low\n122         0.36 -0.6823107085 -0.073926941   Low-Low   Low-Low   Low-Low\n123         0.48 -1.2797733217  2.879341453   Low-Low   Low-Low   Low-Low\n124         0.32 -0.1577735465 -0.532158157   Low-Low   Low-Low   Low-Low\n125         0.03  0.5708501946 -0.076586643 High-High High-High High-High\n126         0.02 -0.6419610125  0.243424001   Low-Low   Low-Low   Low-Low\n127         0.11 -0.7554351188  0.179302156   Low-Low   Low-Low   Low-Low\n128         0.01 -0.7373114741  1.923628345   Low-Low   Low-Low   Low-Low\n129         0.18 -0.0796119170 -0.351010970   Low-Low   Low-Low   Low-Low\n130         0.26 -0.8635930628  0.490875768   Low-Low   Low-Low   Low-Low\n131         0.22  0.2790339539 -0.399311210 High-High High-High High-High\n132         0.01 -0.8307859842  1.230757976   Low-Low   Low-Low   Low-Low\n133         0.01 -0.3153677241  0.452407579   Low-Low   Low-Low   Low-Low\n134         0.32 -1.2354961954  2.821562509  Low-High  Low-High  Low-High\n135         0.32 -1.1815804092  2.532472344  Low-High  Low-High  Low-High\n136         0.09  0.5598583310 -0.303431176 High-High High-High High-High\n137         0.10  0.5344283604  0.107347098 High-High High-High High-High\n138         0.12 -0.6224304489 -0.007205270   Low-Low   Low-Low   Low-Low\n139         0.02 -0.5247726361 -0.173272028   Low-Low   Low-Low   Low-Low\n140         0.02  0.2990403078  0.116823600 High-High High-High High-High\n141         0.45 -0.8272727689  0.415537603   Low-Low   Low-Low   Low-Low\n142         0.37  0.9418590186  0.315988934  High-Low  High-Low  High-Low\n143         0.04 -0.4761120190 -0.306259820   Low-Low   Low-Low   Low-Low\n144         0.04 -0.6658387073  0.675595856   Low-Low   Low-Low   Low-Low\n145         0.11  0.2453544253 -0.588495272  Low-High  Low-High  Low-High\n146         0.47 -0.1182913584 -0.285157383  Low-High  Low-High  Low-High\n147         0.42 -0.4062008892  0.394856332  Low-High  Low-High  Low-High\n148         0.21  0.4099512571 -0.133666475 High-High High-High High-High\n149         0.01 -0.3894904923 -0.241626948  Low-High High-High  Low-High\n150         0.05  0.3394845025 -0.362997545 High-High High-High High-High\n151         0.01  0.3931969263  0.058313527 High-High High-High High-High\n152         0.13 -0.0270407301 -0.496648580   Low-Low   Low-Low   Low-Low\n153         0.20  0.4875426353  0.214312348  High-Low  High-Low  High-Low\n154         0.37  0.4458071585 -0.378233321 High-High High-High High-High\n155         0.41 -0.4730361319  0.061986773   Low-Low   Low-Low   Low-Low\n156         0.42 -0.0602556657 -0.698437566   Low-Low   Low-Low   Low-Low\n157         0.09 -0.8921020955  1.276684799   Low-Low   Low-Low   Low-Low\n158         0.28 -0.6440952738  0.667642036  Low-High High-High  Low-High\n159         0.01 -1.1745230297  2.746178662   Low-Low   Low-Low   Low-Low\n160         0.02 -0.9109987599  0.602801478   Low-Low   Low-Low   Low-Low\n161         0.02 -0.0848432711 -0.186652462   Low-Low   Low-Low   Low-Low\n162         0.13 -0.5107734420  0.815455729   Low-Low  High-Low   Low-Low\n163         0.02 -1.2106382723  1.633091952   Low-Low   Low-Low   Low-Low\n164         0.36  1.1971378618  2.099689493  High-Low  High-Low  High-Low\n165         0.32 -0.9488980788  0.927458505  Low-High  Low-High  Low-High\n166         0.01 -0.4420604386 -0.277663217   Low-Low   Low-Low   Low-Low\n167         0.09 -0.5003748783  0.226203389   Low-Low   Low-Low   Low-Low\n168         0.04 -0.4148899252 -0.559737896   Low-Low   Low-Low   Low-Low\n169         0.05 -0.5223491853 -0.303695658   Low-Low   Low-Low   Low-Low\n170         0.01  0.4766447825  0.713403194 High-High High-High High-High\n171         0.33  0.0881258028 -0.709345861 High-High High-High High-High\n172         0.01 -0.3236410421 -0.733145486  Low-High  Low-High  Low-High\n173         0.22 -0.5137140836 -0.355860760  Low-High  Low-High  Low-High\n174         0.37 -0.0497906679 -0.726204936  Low-High  Low-High  Low-High\n175         0.24 -0.4874335581 -0.531359717  Low-High  Low-High  Low-High\n176         0.35  0.5708720142  0.074038000 High-High High-High High-High\n177         0.03 -0.2987637230 -0.253698039  Low-High High-High  Low-High\n178         0.27  0.7270598483  1.146230473 High-High High-High High-High\n179         0.29 -0.1199313993 -0.525226495  Low-High  Low-High  Low-High\n180         0.40  0.4113045673  0.052701304 High-High High-High High-High\n181         0.28  0.4464245842  0.840094417  High-Low  High-Low  High-Low\n182         0.33  1.1926569898  1.972574826 High-High High-High High-High\n183         0.13 -0.5928847943  0.567915485  Low-High High-High  Low-High\n184         0.47  0.4176528705  0.423595796 High-High High-High High-High\n185         0.40 -0.5236426766  0.046078423   Low-Low   Low-Low   Low-Low\n186         0.12  0.4507126998  0.025130850  High-Low  High-Low  High-Low\n187         0.30  0.1700009912 -0.486438534  High-Low  High-Low  High-Low\n188         0.28  0.1694259178 -0.250351837 High-High High-High High-High\n189         0.12  0.5925465341  0.587710300 High-High High-High High-High\n190         0.09 -0.5778283376  0.423216328   Low-Low   Low-Low   Low-Low\n191         0.15  0.6047397416 -0.189028895 High-High High-High High-High\n192         0.13 -0.6264752107  0.481377266  Low-High  Low-High  Low-High\n193         0.49  0.7806041285  0.743673117  High-Low  High-Low  High-Low\n194         0.06  0.7562982431  0.436524468 High-High High-High High-High\n195         0.35 -0.2449844095 -0.751490292  Low-High  Low-High  Low-High\n196         0.36 -0.7499409600  0.347067034  Low-High  Low-High  Low-High\n197         0.36 -0.7470506873  1.656203568  Low-High  Low-High  Low-High\n198         0.37  0.2828119528 -0.618332542 High-High High-High High-High\n199         0.46  0.6512455828  0.438789874 High-High  High-Low High-High\n200         0.21 -0.1535564800 -0.150489942   Low-Low   Low-Low   Low-Low\n201         0.09 -0.5855731775  0.260742366   Low-Low   Low-Low   Low-Low\n202         0.42 -0.6296787000  0.429129138  Low-High  Low-High  Low-High\n203         0.39 -0.4793773798  0.451670707   Low-Low   Low-Low   Low-Low\n204         0.48  0.6167105460  0.209085260  High-Low  High-Low  High-Low\n205         0.49 -0.2856625611  0.061815647   Low-Low   Low-Low   Low-Low\n206         0.08 -0.4609971322 -0.614552012   Low-Low   Low-Low   Low-Low\n207         0.38 -0.1924721968 -0.159318440   Low-Low   Low-Low   Low-Low\n208         0.04 -0.7520929322  0.256188767   Low-Low   Low-Low   Low-Low\n209         0.04 -0.6372329402  0.469428428   Low-Low   Low-Low   Low-Low\n210         0.01 -0.1589082218 -0.754626408   Low-Low   Low-Low   Low-Low\n211         0.20 -0.5496027993  0.048435369   Low-Low  High-Low   Low-Low\n212         0.03 -0.0003561491 -0.624825664   Low-Low   Low-Low   Low-Low\n213         0.25  0.0917799457 -0.488615536  High-Low  High-Low  High-Low\n214         0.34 -0.4574688006 -0.586221055   Low-Low  High-Low   Low-Low\n215         0.04  0.1448562572 -0.560554188 High-High High-High High-High\n216         0.01  0.1756559187 -0.341553351 High-High High-High High-High\n217         0.35 -0.7215976354 -0.300349548   Low-Low  High-Low   Low-Low\n218         0.46 -0.6351837910  0.531154061   Low-Low   Low-Low   Low-Low\n219         0.26  0.3641292828 -0.165937637 High-High High-High High-High\n220         0.21  0.4413827664  0.031669308 High-High High-High High-High\n221         0.06 -1.2926291688  2.146710658   Low-Low   Low-Low   Low-Low\n222         0.05 -0.2190858406 -0.405738957   Low-Low   Low-Low   Low-Low\n223         0.35  0.5641679730  0.484290816  High-Low  High-Low  High-Low\n224         0.25 -0.5487334231 -0.471993386   Low-Low   Low-Low   Low-Low\n225         0.21 -0.3433777314  0.359334125   Low-Low   Low-Low   Low-Low\n226         0.05  0.2295086131 -0.518128565 High-High High-High High-High\n227         0.01  0.3521649053  0.235065897 High-High High-High High-High\n228         0.38 -0.3040970290 -0.173665618   Low-Low  High-Low   Low-Low\n229         0.19  0.6350308251 -0.377128451 High-High High-High High-High\n230         0.26  0.0136283047 -0.629990026 High-High High-High High-High\n231         0.01  0.1223715473 -0.246924166 High-High High-High High-High\n232         0.26  0.4945188816  0.782545909 High-High High-High High-High\n233         0.16 -0.8034303807  0.700268130   Low-Low   Low-Low   Low-Low\n234         0.12 -0.8236340340  1.131515498   Low-Low   Low-Low   Low-Low\n235         0.45 -0.6993304096  0.449201112   Low-Low   Low-Low   Low-Low\n236         0.03 -0.4753661627 -0.102848101   Low-Low   Low-Low   Low-Low\n237         0.27 -1.0089451362  0.986049672   Low-Low   Low-Low   Low-Low\n238         0.35  0.1592030132 -0.010421208 High-High High-High High-High\n239         0.42 -0.3650201697 -0.824278529  Low-High  Low-High  Low-High\n240         0.07  0.6707397171  0.458858842 High-High High-High High-High\n241         0.01 -0.7669607233  1.015758887   Low-Low   Low-Low   Low-Low\n242         0.01 -0.7387343542  0.433994918   Low-Low   Low-Low   Low-Low\n243         0.17  0.2591737293 -0.397987052 High-High High-High High-High\n244         0.19 -0.8370562423  0.191997628  Low-High  Low-High  Low-High\n245         0.03 -0.9508506394  1.891398290  Low-High  Low-High  Low-High\n246         0.02 -0.5079869992 -0.074618008   Low-Low   Low-Low   Low-Low\n247         0.12 -0.2586821862 -0.093492377   Low-Low   Low-Low   Low-Low\n248         0.01 -0.5695178724  0.589074544   Low-Low   Low-Low   Low-Low\n249         0.01 -0.1264205008 -0.422467736   Low-Low   Low-Low   Low-Low\n250         0.01 -0.4089697120 -0.261490956   Low-Low   Low-Low   Low-Low\n251         0.05 -0.9404577431  1.807671881   Low-Low   Low-Low   Low-Low\n252         0.02 -0.9311297574  0.306324026   Low-Low   Low-Low   Low-Low\n253         0.01 -0.4617229332  0.020794178   Low-Low   Low-Low   Low-Low\n254         0.01 -0.0892164713 -0.457481216   Low-Low   Low-Low   Low-Low\n255         0.37 -0.6261612577  0.254179030   Low-Low   Low-Low   Low-Low\n256         0.47  0.5310385331  0.287639612  High-Low  High-Low  High-Low\n257         0.03  0.5757358180 -0.006098234 High-High High-High High-High\n\n\n\nunique_data[4]\n\n            VILLENG\n1      Qingcao Vil.\n2       Bao'an Vil.\n3      Chihkan Vil.\n4      Dacheng Vil.\n5     Chengbei Vil.\n6     Chengnan Vil.\n7        Fahua Vil.\n8       Hainan Vil.\n9       Guo'an Vil.\n10       Xixin Vil.\n11    Yuandong Vil.\n12  Chengzhong Vil.\n13   Chengdong Vil.\n14     Xuedong Vil.\n15     Dongwan Vil.\n16      Nanwan Vil.\n17     Kunshan Vil.\n18       Dawan Vil.\n19      Wuwang Vil.\n20      Ankang Vil.\n21      Xiqiao Vil.\n22    Wangliao Vil.\n23      Daqiao Vil.\n24    Dongqiao Vil.\n25       Wuzhu Vil.\n26    Wangxing Vil.\n27       Dazhi Vil.\n28    Chongwen Vil.\n29  Chongcheng Vil.\n30   Chongming Vil.\n31        Dafu Vil.\n32     Chongde Vil.\n33        Dade Vil.\n34    Chongxue Vil.\n35      Heping Vil.\n36   Chongshan Vil.\n37      Ludong Vil.\n38       Huwei Vil.\n39   Zhongxiao Vil.\n40     Yusheng Vil.\n41    Chongxin Vil.\n42     Deguang Vil.\n43      Fuxing Vil.\n44     Ziqiang Vil.\n45    Wensheng Vil.\n46        Fuyu Vil.\n47    Longshan Vil.\n48   Guansheng Vil.\n49     Xindong Vil.\n50     Fuqiang Vil.\n51     Quannan Vil.\n52   Dongsheng Vil.\n53     Dong'an Vil.\n54      Datong Vil.\n55      Weiguo Vil.\n56      Yunong Vil.\n57    Nansheng Vil.\n58    Chonghui Vil.\n59     Dongmen Vil.\n60     Zhongxi Vil.\n61    Dongming Vil.\n62      Weixia Vil.\n63   Dongguang Vil.\n64      Houjia Vil.\n65  Zhuangjing Vil.\n66    Xiaodong Vil.\n67       Daxue Vil.\n68     Chengda Vil.\n69    Gongyuan Vil.\n70    Zhonglou Vil.\n71     Xianbei Vil.\n72      Dafeng Vil.\n73      Dagang Vil.\n74    Zhengjue Vil.\n75        Dahe Vil.\n76   Chenggong Vil.\n77       Fotan Vil.\n78     Tong'an Vil.\n79     Song'an Vil.\n80    Yongning Vil.\n81       Xinan Vil.\n82      Xidong Vil.\n83       Xibei Vil.\n84      Nandou Vil.\n85      Nanhua Vil.\n86     Jiannan Vil.\n87    Mingxing Vil.\n88      Junnan Vil.\n89      Kainan Vil.\n90   Mingliang Vil.\n91     Kunshen Vil.\n92     Dazhong Vil.\n93   Guangming Vil.\n94       Funan Vil.\n95       Dalin Vil.\n96     Guozhai Vil.\n97    Tianliao Vil.\n98    Xinsheng Vil.\n99       Zhuxi Vil.\n100     Mingde Vil.\n101    Zaixing Vil.\n102   Zhangnan Vil.\n103     Jinhua Vil.\n104    Xinxing Vil.\n105     Wennan Vil.\n106   Xinchang Vil.\n107  Guangzhou Vil.\n108     Wenhua Vil.\n109     Xiding Vil.\n110    Haidian Vil.\n111     Xidong Vil.\n112      Xibei Vil.\n113       Xiqi Vil.\n114       Anfu Vil.\n115   Yantian  Vil.\n116  Fenghuang Vil.\n117    Gongqin Vil.\n118     Shalun Vil.\n119    Wenping Vil.\n120    Guoping Vil.\n121     Yuping Vil.\n122    Huaping Vil.\n123     Yiping Vil.\n124   Jianping Vil.\n125     Xingfu Vil.\n126   Shanglun Vil.\n127      Houbi Vil.\n128  Chenggong Vil.\n129      Renhe Vil.\n130     Ren'ai Vil.\n131      Rende Vil.\n132   Xingnong Vil.\n133  Shenggong Vil.\n134    Xintian Vil.\n135      Yijia Vil.\n136      Degao Vil.\n137      Renhe Vil.\n138  Zhongzhou Vil.\n139      Xiwan Vil.\n140    Jiading Vil.\n141   Yongkang Vil.\n142 Zhengqiang Vil.\n143    Yuguang Vil.\n144   Jincheng Vil.\n145  Shangding Vil.\n146     Fuxing Vil.\n147   Shenzhou Vil.\n148      Fuguo Vil.\n149      Sanhe Vil.\n150      Fuhua Vil.\n151     Erwang Vil.\n152    Dongzhi Vil.\n153      Da'en Vil.\n154       Xihu Vil.\n155    Ping'an Vil.\n156     Xixian Vil.\n157      Sicao Vil.\n158     Andong Vil.\n159  Yuanzhong Vil.\n160    Chengxi Vil.\n161   Diandong Vil.\n162    Xinshun Vil.\n163     Xinshu Vil.\n164   Yanxing  Vil.\n165      Haixi Vil.\n166     Dianxi Vil.\n167    Wenxian Vil.\n168     Longpu Vil.\n169   Yongming Vil.\n170   Yancheng Vil.\n171     Beihua Vil.\n172      Huade Vil.\n173       Fude Vil.\n174 Zhangsheng Vil.\n175  Zhangxing Vil.\n176     Daxing Vil.\n177    Daguang Vil.\n178    Xiaobei Vil.\n179  Shuang'an Vil.\n180      Liren Vil.\n181  Xiaoximen Vil.\n182     Duiyue Vil.\n183 Wutiaogang Vil.\n184     Nanmei Vil.\n185  Wangcheng Vil.\n186    Tianfei Vil.\n187 Chenghuang Vil.\n188       Xihe Vil.\n189     Beimen Vil.\n190   Yanzhou  Vil.\n191   Dongxing Vil.\n192  Zhongxing Vil.\n193     Heshun Vil.\n194     Lixing Vil.\n195   Wencheng Vil.\n196    Yuanbao Vil.\n197    Kaiyuan Vil.\n198    Chengde Vil.\n199    Yonghua Vil.\n200    Junwang Vil.\n201    Yanxing Vil.\n202    Yuanmei Vil.\n203   Nanchang Vil.\n204    Qiancao Vil.\n205     Fuqian Vil.\n206     Nanmen Vil.\n207     Hexing Vil.\n208     Beiwan Vil.\n209    Beixing Vil.\n210    Longtan Vil.\n211     Puyuan Vil.\n212     Sanmin Vil.\n213     Ren'ai Vil.\n214   Zhenxing Vil.\n215  Yongxiang Vil.\n216    Wenyuan Vil.\n217    Kaishan Vil.\n218    Daliang Vil.\n219    Yaowang Vil.\n220  Guangxian Vil.\n221     Erxing Vil.\n222      Dajia Vil.\n223      Renyi Vil.\n224       Tuku Vil.\n225      Taizi Vil.\n226       Anxi Vil.\n227      Da'an Vil.\n228       Anhe Vil.\n229    Lixiang Vil.\n230     Anqing Vil.\n231     Meihua Vil.\n232    Ding'an Vil.\n233     Anshun Vil.\n234    Zongtou Vil.\n235   Yuandian Vil.\n236     Donghe Vil.\n237    Guangfu Vil.\n238    Shengli Vil.\n239    Jianguo Vil.\n240      Liuhe Vil.\n241     Yuanxi Vil.\n242   Chang'an Vil.\n243   Zhonghua Vil.\n244  Chenggong Vil.\n245  Zhongxing Vil.\n246      Xishi Vil.\n247   Niaosong Vil.\n248   Xiangong Vil.\n249    Zhounan Vil.\n250      Budai Vil.\n251    Zhoubei Vil.\n252     Wennan Vil.\n253    Gongwen Vil.\n254    Nanxing Vil.\n255      Yizai Vil.\n256   Pingtong Vil.\n257    Haidong Vil.\n\n\n\nlocalMoran\n\n               ii           eii       var_ii         z_ii         p_ii p_ii_sim\n1    1.4041686190 -7.975279e-02 6.179796e-01  1.887660261 5.907157e-02     0.02\n2    0.7566799711 -2.695340e-02 1.537089e-01  1.998772977 4.563292e-02     0.04\n3    0.0348658160  2.128719e-02 4.930900e-02  0.061149477 9.512402e-01     0.92\n4   -0.2144958309  2.470731e-02 8.376675e-02 -0.826477513 4.085333e-01     0.36\n5    1.4326694701  3.819232e-03 3.084337e-01  2.572798491 1.008799e-02     0.02\n6    1.2956349824  1.677889e-02 2.038934e-01  2.832174846 4.623256e-03     0.02\n7    0.3259959174 -2.920996e-04 9.604740e-02  1.052830157 2.924188e-01     0.32\n8    0.0205861619 -3.214834e-02 1.700651e-02  0.404377725 6.859350e-01     0.68\n9    0.4029021290  1.363357e-02 7.914002e-02  1.383729637 1.664413e-01     0.18\n10   0.0864318728  6.370220e-03 3.249889e-03  1.404398184 1.602003e-01     0.10\n11   0.5624332176  6.824033e-03 1.517689e-01  1.426191986 1.538129e-01     0.06\n12   1.4284211906 -9.462331e-03 3.691925e-01  2.366449520 1.795962e-02     0.02\n13   1.3707870217  8.216073e-02 2.321706e-01  2.674381612 7.486720e-03     0.02\n14   1.2267103076  2.351483e-02 4.023762e-01  1.896793543 5.785519e-02     0.02\n15   0.5777123718 -2.431520e-02 2.303853e-01  1.254264214 2.097460e-01     0.10\n16   0.3761302160  5.702499e-02 1.408497e-01  0.850268368 3.951759e-01     0.38\n17  -0.1083529980 -4.604679e-03 5.758444e-03 -1.367188785 1.715661e-01     0.16\n18   0.6387676536  3.038147e-03 1.510583e-01  1.635686673 1.019052e-01     0.10\n19   1.6954622322 -1.699376e-01 7.822037e-01  2.109172097 3.492973e-02     0.06\n20   0.3202209908 -1.364257e-02 5.726716e-02  1.395134858 1.629752e-01     0.20\n21   0.0034498159  1.019867e-03 2.492111e-05  0.486758280 6.264296e-01     0.68\n22  -0.2216117441  7.860882e-03 6.907701e-03 -2.760985539 5.762723e-03     0.06\n23   0.9460460404 -2.474282e-03 4.611467e-01  1.396777027 1.624806e-01     0.20\n24   0.3387501265  6.578480e-03 5.810963e-02  1.377966027 1.682138e-01     0.24\n25   0.9553398694  5.490369e-02 2.034560e-01  1.996262443 4.590536e-02     0.02\n26   1.1539477468  3.464007e-02 2.898921e-01  2.078889013 3.762755e-02     0.02\n27   0.0330966224  3.812626e-04 4.458019e-03  0.489982718 6.241461e-01     0.56\n28   0.1013126164 -1.017434e-02 1.626046e-02  0.874294202 3.819581e-01     0.40\n29  -0.2488530664  3.126714e-03 1.784645e-02 -1.886209000 5.926680e-02     0.12\n30  -0.1064160994 -3.844044e-03 1.351707e-02 -0.882242083 3.776459e-01     0.44\n31   0.2104012185 -3.607266e-02 7.572913e-02  0.895652243 3.704385e-01     0.36\n32   1.1833260437 -6.009556e-02 7.328540e-01  1.452478380 1.463686e-01     0.12\n33   0.2489016126  1.102545e-02 8.767574e-02  0.803361848 4.217656e-01     0.50\n34   0.7374847102 -4.821446e-02 8.463584e-02  2.700717330 6.919012e-03     0.04\n35   0.7387073151 -6.418863e-02 5.608623e-02  3.390245315 6.983011e-04     0.06\n36   1.7123360885 -8.638065e-02 2.776370e-01  3.413690374 6.408937e-04     0.02\n37  -0.0294895280  5.510372e-02 7.524844e-02 -0.308380552 7.577928e-01     0.78\n38   1.7750388884  5.931692e-02 5.132341e-01  2.394909720 1.662446e-02     0.02\n39   0.1004682421 -1.660350e-02 1.394683e-02  0.991321108 3.215288e-01     0.34\n40  -0.1688626282 -2.282346e-02 9.636563e-02 -0.470444374 6.380376e-01     0.66\n41   1.4043666317 -6.953689e-03 1.408982e-01  3.759870766 1.700012e-04     0.02\n42   0.5175225906 -1.357344e-02 1.391951e-01  1.423511925 1.545878e-01     0.18\n43   0.7985940575 -4.678399e-02 1.978563e-01  1.900535854 5.736283e-02     0.10\n44   2.4345708689 -3.217894e-02 5.069145e-01  3.464637117 5.309474e-04     0.02\n45  -0.0192914423  7.842113e-05 1.765935e-03 -0.460934455 6.448456e-01     0.54\n46  -0.0401899335 -1.634733e-03 2.840688e-04 -2.287553176 2.216356e-02     0.08\n47   0.0410952243  7.627448e-03 1.120456e-03  0.999837713 3.173891e-01     0.34\n48  -0.0287912211  6.307759e-03 1.374626e-02 -0.299365880 7.646609e-01     0.88\n49  -0.0240540084  6.503569e-02 7.100430e-02 -0.334337582 7.381248e-01     0.80\n50   1.9078948238  2.064408e-03 4.201427e-01  2.940260607 3.279363e-03     0.04\n51  -0.0339032030 -4.224642e-02 1.158963e-01  0.024507489 9.804478e-01     0.96\n52   0.4217875686  3.586413e-03 4.442875e-02  1.984052577 4.724998e-02     0.08\n53   0.0602204717 -6.617464e-03 1.685922e-01  0.162781226 8.706907e-01     0.98\n54  -0.0451105095 -5.351200e-03 2.734392e-03 -0.760341113 4.470507e-01     0.56\n55   0.0513808927  2.530750e-02 6.431728e-02  0.102809595 9.181141e-01     0.98\n56   0.7253086373  4.934287e-02 3.459899e-01  1.149193112 2.504764e-01     0.24\n57  -0.1064236242  1.248291e-02 3.103382e-02 -0.674975644 4.996912e-01     0.46\n58   0.0281981762 -2.185428e-02 1.138868e-02  0.469017096 6.390574e-01     0.64\n59   0.0272130350  1.808563e-02 1.272972e-01  0.025582207 9.795906e-01     1.00\n60   0.1700085354  1.358745e-02 3.108546e-02  0.887190022 3.749766e-01     0.40\n61   0.0724507804  9.027424e-03 1.468336e-02  0.523403289 6.006936e-01     0.54\n62   0.3619937045 -1.111617e-02 1.317808e-01  1.027804823 3.040416e-01     0.30\n63   0.0739534804  1.751898e-03 1.608924e-03  1.800026468 7.185646e-02     0.14\n64   0.5459091963  1.853381e-02 1.179331e-01  1.535684480 1.246158e-01     0.14\n65   0.6570304000  2.162435e-02 7.674233e-02  2.293685426 2.180857e-02     0.06\n66   0.0497501281  3.540777e-02 7.626924e-02  0.051933301 9.585818e-01     0.92\n67   0.0214868227  2.306071e-02 3.378937e-02 -0.008562159 9.931685e-01     0.86\n68   0.0243155385  2.188507e-04 1.026440e-02  0.237843107 8.120028e-01     0.88\n69  -0.0024638710 -4.133693e-04 9.469471e-05 -0.210715889 8.331090e-01     0.72\n70  -0.0380061912  5.249391e-04 2.954185e-02 -0.224177965 8.226188e-01     0.96\n71  -0.0314135633 -3.774014e-03 7.939385e-03 -0.310196946 7.564112e-01     0.72\n72   0.0315575759  6.738054e-03 2.974468e-02  0.143909258 8.855721e-01     0.86\n73  -0.0298218712  1.538638e-02 4.559694e-02 -0.211714153 8.323300e-01     0.92\n74   0.9379230875 -4.910192e-02 2.378997e-01  2.023630365 4.300820e-02     0.08\n75   0.1479322098  2.797630e-03 4.212806e-03  2.236068774 2.534727e-02     0.06\n76   0.1523439917  5.457846e-03 8.068534e-03  1.635247582 1.019972e-01     0.20\n77   0.4531098021 -5.783986e-02 1.166908e-01  1.495752604 1.347181e-01     0.08\n78   0.9283083061 -2.358030e-02 1.823701e-01  2.228996106 2.581416e-02     0.02\n79   0.8646213115  8.330811e-04 3.213897e-01  1.523671432 1.275908e-01     0.14\n80   1.0720294115 -1.833391e-01 3.261627e-01  2.198133521 2.793959e-02     0.02\n81   1.0795199112 -4.421176e-02 4.603353e-01  1.656248423 9.767152e-02     0.08\n82   0.2057583335  3.919963e-02 1.112916e-01  0.499270747 6.175887e-01     0.74\n83   0.7132140601 -1.712422e-02 1.950814e-01  1.653545312 9.821993e-02     0.04\n84   0.0187942801 -4.511355e-03 1.223509e-03  0.666280816 5.052316e-01     0.54\n85   0.5183949063 -7.427069e-02 1.047368e-01  1.831302605 6.705539e-02     0.14\n86   0.4524756857 -4.162083e-02 3.608520e-01  0.822521429 4.107802e-01     0.38\n87   2.3053380976 -4.949547e-02 5.040770e-01  3.316742559 9.107349e-04     0.02\n88   1.4371741060 -2.531268e-02 2.094734e-01  3.195416865 1.396290e-03     0.02\n89   0.2149580835  9.928216e-03 9.131678e-02  0.678487486 4.974627e-01     0.44\n90   3.5254581204 -1.905586e-01 1.023310e+00  3.673448652 2.392988e-04     0.02\n91   0.2221196069  1.143437e-02 1.064222e-01  0.645829751 5.183896e-01     0.62\n92  -0.0055555940 -1.096053e-03 3.989209e-05 -0.706068367 4.801456e-01     0.58\n93   0.4939905125  1.951937e-02 1.736639e-01  1.138557544 2.548877e-01     0.22\n94   1.2071449184 -1.317649e-01 7.348249e-01  1.561922168 1.183063e-01     0.18\n95   0.3764225023  6.209261e-02 9.118694e-02  1.040924785 2.979105e-01     0.30\n96   0.5600457078  9.351821e-02 1.622462e-01  1.158217172 2.467754e-01     0.24\n97   0.0715103150  2.912862e-03 1.181704e-03  1.995508540 4.598744e-02     0.10\n98   0.3737626643  5.368416e-02 4.067737e-02  1.587011533 1.125100e-01     0.10\n99   0.6408785894 -1.741634e-03 1.276240e-01  1.798821804 7.204687e-02     0.06\n100 -0.2636451776 -1.852539e-02 1.138066e-01 -0.726598616 4.674719e-01     0.48\n101  0.2594825291 -3.544526e-02 3.944063e-02  1.485059307 1.375281e-01     0.16\n102 -0.4081508560 -2.152182e-02 8.117363e-02 -1.357022272 1.747741e-01     0.24\n103  0.2199743529  2.289122e-02 5.399108e-01  0.268218334 7.885313e-01     0.68\n104  0.0497991106 -3.467999e-03 2.870330e-03  0.994244503 3.201038e-01     0.30\n105  0.0051955830 -5.179616e-04 1.956154e-03  0.129182639 8.972131e-01     0.84\n106  0.0019738078 -3.630286e-04 2.251494e-04  0.155737407 8.762400e-01     0.86\n107 -0.0164186501  3.303724e-03 4.380703e-04 -0.942295897 3.460412e-01     0.32\n108  0.0046827568  9.194780e-05 1.120041e-04  0.433782717 6.644462e-01     0.80\n109  0.4473926945  1.883629e-02 1.439664e-01  1.129476878 2.586967e-01     0.28\n110  2.9543242965  1.170655e-01 8.999106e-01  2.990881993 2.781730e-03     0.02\n111  1.6289304760 -2.521623e-02 3.333681e-01  2.864916913 4.171187e-03     0.04\n112  0.0828241054 -5.472619e-03 1.544192e-02  0.710548787 4.773639e-01     0.40\n113  4.8767053129  5.344396e-02 1.279590e+00  4.263884251 2.009035e-05     0.02\n114  4.6218380075 -9.478309e-02 2.921748e+00  2.759367745 5.791332e-03     0.02\n115  0.6758342546 -1.254461e-02 1.848786e-01  1.600973942 1.093827e-01     0.08\n116  0.2456622321  1.724615e-02 6.431692e-01  0.284815791 7.757853e-01     0.68\n117  1.0496828535 -1.027519e-01 7.543773e-01  1.326850713 1.845581e-01     0.16\n118  1.3868453537  2.234948e-02 3.529854e-01  2.296644917 2.163903e-02     0.04\n119 -0.0035365467 -6.280247e-04 2.829276e-05 -0.546807836 5.845108e-01     0.66\n120  0.0808216240  1.330890e-02 3.573828e-03  1.129324639 2.587609e-01     0.26\n121 -0.0313260099  2.811773e-03 3.602627e-03 -0.568755536 5.695221e-01     0.58\n122  0.0349258729 -1.112247e-02 7.867190e-03  0.519163602 6.036467e-01     0.72\n123  0.0574960186  1.867794e-02 2.113492e-02  0.267013827 7.894585e-01     0.96\n124  0.0541357481 -5.439991e-04 9.016628e-03  0.575843422 5.647210e-01     0.64\n125  2.8553236617  1.516912e-02 1.275742e+00  2.514551875 1.191838e-02     0.06\n126  0.6813598292 -5.932807e-02 1.285657e-01  2.065725493 3.885441e-02     0.04\n127  0.2747144328  1.135895e-02 5.900965e-02  1.084128717 2.783077e-01     0.22\n128  0.1208831223 -3.687680e-03 3.064020e-03  2.250455724 2.442003e-02     0.02\n129  0.5101147224 -9.419236e-02 3.375944e-01  1.040064027 2.983102e-01     0.36\n130  0.3399024237 -4.148955e-02 2.756268e-01  0.726458583 4.675577e-01     0.52\n131  0.1387393883  1.799293e-02 2.308713e-02  0.794674767 4.268027e-01     0.44\n132  0.7357378072  2.022650e-02 1.112825e-01  2.144880775 3.196238e-02     0.02\n133  0.7820007507 -1.653096e-02 1.177643e-01  2.326941009 1.996841e-02     0.02\n134 -0.1960324785 -4.549748e-02 3.634317e-01 -0.249704339 8.028160e-01     0.64\n135 -0.0298220984  2.838690e-02 5.773501e-02 -0.242253765 8.085835e-01     0.64\n136  0.3905418249 -3.386964e-02 7.367147e-02  1.563642451 1.179016e-01     0.18\n137  0.4350509936  1.269639e-02 6.988859e-02  1.597622167 1.101271e-01     0.20\n138  0.8562428785 -3.517736e-03 4.983420e-01  1.217906054 2.232597e-01     0.24\n139  0.2163005994 -1.846795e-02 1.714845e-02  1.792782263 7.300775e-02     0.04\n140  0.3018807053 -1.656716e-02 1.418287e-02  2.673968081 7.495959e-03     0.04\n141  0.0622948287  3.884528e-03 3.089687e-02  0.332301422 7.396617e-01     0.90\n142 -0.1258967654  5.261134e-02 1.039456e-01 -0.553675010 5.798013e-01     0.74\n143  0.8293507380 -1.261981e-01 3.944673e-01  1.521414015 1.281560e-01     0.08\n144  0.4480644555 -3.765180e-02 8.114866e-02  1.705069036 8.818155e-02     0.08\n145 -0.0930553582  1.045498e-02 6.676188e-03 -1.266833247 2.052149e-01     0.22\n146 -0.0063677108 -1.385806e-03 5.922550e-03 -0.064735281 9.483848e-01     0.94\n147 -0.1425041564 -5.321304e-02 2.124851e-01 -0.193706406 8.464058e-01     0.84\n148  0.4006108725  1.617597e-02 2.420713e-01  0.781359919 4.345908e-01     0.42\n149 -0.0410320362  1.123224e-03 7.564946e-05 -4.846730288 1.255129e-06     0.02\n150  3.6518729032 -3.683247e-01 4.212581e+00  1.958724085 5.014511e-02     0.10\n151  2.3020091759 -8.098562e-02 5.313409e-01  3.269162083 1.078665e-03     0.02\n152  0.0740172287 -5.414394e-03 4.879457e-03  1.137123665 2.554866e-01     0.26\n153 -0.0376205146 -3.436379e-03 1.366080e-03 -0.924882380 3.550271e-01     0.40\n154  0.0045907548 -3.029616e-03 9.439359e-04  0.248030379 8.041109e-01     0.74\n155  0.0011378386  7.587827e-03 1.014338e-02 -0.064042394 9.489365e-01     0.82\n156  0.0077743176 -1.817178e-02 9.145586e-03  0.271310275 7.861524e-01     0.84\n157  0.9269778733  5.486811e-02 4.455482e-01  1.306543347 1.913678e-01     0.18\n158 -0.0333506607 -8.303951e-03 2.881521e-03 -0.466594668 6.407899e-01     0.56\n159  0.6293067769  3.715454e-02 1.117495e-01  1.771375319 7.649831e-02     0.02\n160  1.3383784501  4.629822e-02 7.017598e-01  1.542393725 1.229779e-01     0.04\n161  0.7297815268 -8.695435e-03 1.140928e-01  2.186290584 2.879435e-02     0.04\n162  0.0013183090 -1.685736e-04 1.827746e-06  1.099812646 2.714138e-01     0.26\n163  0.9803082017 -4.075318e-03 3.958197e-01  1.564644319 1.176663e-01     0.04\n164 -0.0053250210  4.255714e-04 1.474067e-04 -0.473646121 6.357523e-01     0.72\n165 -0.0783722094 -1.236308e-02 7.220661e-02 -0.245649318 8.059537e-01     0.64\n166  0.9178664149 -3.920660e-02 1.796848e-01  2.257820326 2.395686e-02     0.02\n167  0.6703504785 -1.477023e-02 2.960949e-01  1.259075172 2.080032e-01     0.18\n168  0.5718617233 -1.095834e-02 1.617297e-01  1.449237642 1.472712e-01     0.08\n169  0.6363437973 -8.716413e-03 1.911886e-01  1.475262442 1.401420e-01     0.10\n170  1.9204878717  7.117219e-03 3.145690e-01  3.411466930 6.461434e-04     0.02\n171  0.0148393281 -1.079039e-02 3.407108e-03  0.439087329 6.605983e-01     0.66\n172 -0.4000484291  9.689614e-03 1.834963e-02 -3.024771768 2.488208e-03     0.02\n173 -0.0666391093 -6.564353e-03 4.517011e-03 -0.893853724 3.714002e-01     0.44\n174 -0.0526772989  1.049672e-02 2.333598e-02 -0.413547609 6.792054e-01     0.74\n175 -0.1260639916 -3.366062e-03 2.206955e-02 -0.825924713 4.088468e-01     0.48\n176  0.0271380703  4.239784e-03 5.891073e-03  0.298336078 7.654467e-01     0.70\n177 -0.0775141727 -4.846986e-04 1.283026e-03 -2.150498762 3.151578e-02     0.06\n178  0.3172413361  3.128147e-04 2.632448e-01  0.617705485 5.367695e-01     0.54\n179 -0.1235476465 -3.448223e-02 2.946831e-02 -0.518837672 6.038739e-01     0.58\n180  0.0319285048  4.419825e-03 1.332702e-02  0.238288580 8.116573e-01     0.80\n181 -0.0955910327  2.857783e-02 2.930349e-02 -0.725359079 4.682318e-01     0.56\n182  0.1192203787  9.703337e-03 1.388097e-01  0.293948916 7.687969e-01     0.66\n183 -0.0483284310 -2.400040e-04 1.484220e-03 -1.248220761 2.119502e-01     0.26\n184  0.0151969515  2.475793e-03 6.877053e-03  0.153400043 8.780828e-01     0.94\n185  0.1082395752 -8.318822e-03 1.129821e-01  0.346767778 7.287658e-01     0.80\n186 -0.4063479188  4.702676e-02 1.671929e-01 -1.108787712 2.675218e-01     0.24\n187 -0.0396516269  2.389544e-03 4.380314e-03 -0.635217089 5.252868e-01     0.60\n188  0.0868985086  3.530133e-03 2.106312e-02  0.574433748 5.656743e-01     0.56\n189  1.9902367787  2.289989e-01 2.478070e+00  1.118822556 2.632158e-01     0.24\n190  0.1694618237  1.493020e-03 1.955483e-02  1.201162091 2.296883e-01     0.18\n191  0.0477743558  4.310242e-03 1.910885e-03  0.994291146 3.200811e-01     0.30\n192 -0.3714651359 -1.598156e-03 1.065541e-01 -1.133079593 2.571808e-01     0.26\n193 -0.0091811560  5.895379e-03 5.525534e-03 -0.202821693 8.392744e-01     0.98\n194  0.0088989492 -6.562988e-04 3.093523e-05  1.717968820 8.580230e-02     0.12\n195 -0.0390193495 -5.691871e-04 8.662490e-03 -0.413120547 6.795183e-01     0.70\n196 -0.0060704079  1.859512e-02 7.591561e-03 -0.283090263 7.771076e-01     0.72\n197 -0.0099732538  2.829528e-02 2.614346e-02 -0.236679332 8.129056e-01     0.72\n198  0.0187910619 -1.224652e-02 1.313337e-02  0.270831866 7.865204e-01     0.74\n199  0.0002325839  5.693855e-04 3.550640e-04 -0.017873961 9.857394e-01     0.92\n200  0.1990758806 -1.871196e-02 7.576575e-02  0.791219814 4.288157e-01     0.42\n201  0.4585731333 -5.328991e-03 1.421704e-01  1.230330447 2.185734e-01     0.18\n202 -0.0163677001 -7.405059e-03 1.863212e-02 -0.065660609 9.476480e-01     0.84\n203  0.0370871637 -3.441968e-03 2.023665e-02  0.284903624 7.757180e-01     0.78\n204 -0.0034679427  2.443646e-03 3.476707e-03 -0.100258261 9.201393e-01     0.96\n205  0.0120583675  7.234565e-03 5.166689e-02  0.021221857 9.830687e-01     0.98\n206  0.0933553646 -2.864725e-02 9.416549e-03  1.257254682 2.086614e-01     0.16\n207  0.0181832048 -1.093627e-02 6.792602e-03  0.353317716 7.238503e-01     0.76\n208  0.8275005694 -1.487025e-02 2.687413e-01  1.624935300 1.041763e-01     0.08\n209  0.5978246999 -1.126250e-02 1.572100e-01  1.536170628 1.244965e-01     0.08\n210  0.5381242333 -2.422650e-02 5.754813e-02  2.344183790 1.906877e-02     0.02\n211  0.0622547391  7.760824e-03 4.047902e-03  0.856511161 3.917151e-01     0.40\n212  0.9943248833  6.873207e-02 2.227457e-01  1.961170447 4.985914e-02     0.06\n213 -0.0172633814  2.279444e-03 7.687184e-04 -0.704861365 4.808965e-01     0.50\n214  0.0285283234 -3.502190e-03 2.999836e-03  0.584810505 5.586751e-01     0.68\n215  0.4043285015 -1.094774e-01 8.383236e-02  1.774570518 7.596883e-02     0.08\n216  0.3090050709 -1.446117e-02 8.991692e-03  3.411208371 6.467565e-04     0.02\n217  0.0135231309 -2.105082e-04 5.859606e-04  0.567350457 5.704761e-01     0.70\n218  0.0905530342  4.998607e-02 6.402898e-02  0.160318734 8.726300e-01     0.92\n219  0.3196898020  6.192044e-02 2.500666e-01  0.515470026 6.062246e-01     0.52\n220  0.0516000128 -9.063321e-03 6.193862e-03  0.770806744 4.408215e-01     0.42\n221  0.7469552415  5.642719e-02 3.136202e-01  1.233046122 2.175586e-01     0.12\n222  0.8428307411  1.250938e-01 2.108675e-01  1.563005319 1.180513e-01     0.10\n223 -0.5297934587 -1.918974e-01 7.064452e-01 -0.402016472 6.876719e-01     0.70\n224  0.4397933582 -5.878587e-02 3.652570e-01  0.824963864 4.093921e-01     0.50\n225  0.1737498257  2.661985e-02 3.770772e-02  0.757680371 4.486424e-01     0.42\n226  0.3627978705  4.101443e-03 4.550398e-02  1.681521197 9.266172e-02     0.10\n227  2.2107462050  5.494008e-03 2.198879e-01  4.702811575 2.566032e-06     0.02\n228  0.0003792680 -1.358209e-04 2.034739e-06  0.361100255 7.180245e-01     0.76\n229  0.5342601475  2.439164e-02 2.143081e-01  1.101384338 2.707294e-01     0.38\n230  0.2072099213  1.344017e-03 8.110582e-02  0.722867045 4.697616e-01     0.52\n231  0.4081696435 -4.799778e-03 1.931943e-02  2.971124043 2.967119e-03     0.02\n232  0.1540827167 -1.158885e-02 6.988806e-02  0.626680928 5.308684e-01     0.52\n233  0.4183527174  4.049033e-02 1.639346e-01  0.933250734 3.506905e-01     0.32\n234  0.4821163804  4.627536e-02 1.713202e-01  1.052988920 2.923461e-01     0.24\n235  0.0103567029 -8.218459e-02 1.410289e-01  0.246423140 8.053547e-01     0.90\n236  0.5468357072 -5.671771e-02 1.143758e-01  1.784632134 7.432101e-02     0.06\n237  0.5561316456 -9.001603e-03 7.227733e-01  0.664736955 5.062188e-01     0.54\n238  0.4657111793 -2.918939e-02 9.743750e-01  0.501366009 6.161136e-01     0.70\n239 -0.0452923636  2.595017e-03 9.909313e-02 -0.152124547 8.790887e-01     0.84\n240  0.5390210324  7.850363e-02 7.595562e-02  1.670960134 9.472955e-02     0.14\n241  0.7830717226 -2.223115e-02 9.021347e-02  2.681165153 7.336630e-03     0.02\n242  0.8650188512 -1.667342e-02 1.102726e-01  2.655114065 7.928160e-03     0.02\n243  0.2832149673 -2.463386e-02 8.628031e-02  1.048049148 2.946160e-01     0.34\n244 -0.3914303365 -2.631722e-02 1.487747e-01 -0.946592086 3.438467e-01     0.38\n245 -0.2968965334  7.666306e-03 1.721062e-02 -2.321553122 2.025701e-02     0.06\n246  0.7360297149 -8.424762e-02 2.255546e-01  1.727168957 8.413732e-02     0.04\n247  0.4397445176 -6.661630e-02 1.436134e-01  1.336172778 1.814928e-01     0.24\n248  1.2367741196  1.779324e-02 1.353979e-01  3.312766981 9.237791e-04     0.02\n249  0.7268376236 -1.819876e-03 9.095702e-02  2.416046665 1.569005e-02     0.02\n250  0.7686104780  4.335211e-02 1.700833e-01  1.758579024 7.864904e-02     0.02\n251  0.9001643889 -3.721599e-02 3.179736e-01  1.662341797 9.644426e-02     0.10\n252  0.8791610418 -4.197250e-02 3.487758e-01  1.559729954 1.188237e-01     0.04\n253  1.1177075741  4.887696e-02 2.627201e-01  2.085269520 3.704484e-02     0.02\n254  1.1831675957 -2.532560e-02 1.769822e-01  2.872627818 4.070734e-03     0.02\n255  0.1524054778  6.535181e-03 1.178442e-01  0.424925517 6.708910e-01     0.74\n256 -0.0024576240 -1.486027e-03 1.479213e-04 -0.079886045 9.363279e-01     0.94\n257  0.3194404247  1.740347e-02 1.513980e-02  2.454708870 1.409987e-02     0.06\n    p_folded_sim      skewness     kurtosis      mean    median     pysal\n1           0.01 -0.8617148587  1.150333532   Low-Low   Low-Low   Low-Low\n2           0.02 -0.5897378352  0.315083849   Low-Low   Low-Low   Low-Low\n3           0.46  0.0879434711 -0.564100652 High-High High-High High-High\n4           0.18 -0.5387235588  0.031417934  Low-High  Low-High  Low-High\n5           0.01 -0.3773048990 -0.037365166   Low-Low   Low-Low   Low-Low\n6           0.01 -0.6551054935  0.657355940   Low-Low   Low-Low   Low-Low\n7           0.16 -0.8394714779  0.749307894   Low-Low   Low-Low   Low-Low\n8           0.34 -0.2106086277 -0.517962448   Low-Low   Low-Low   Low-Low\n9           0.09  0.5198679787  0.524754230 High-High High-High High-High\n10          0.05 -0.7218975719  0.141151564   Low-Low  High-Low   Low-Low\n11          0.03 -1.1146899653  2.108400304   Low-Low   Low-Low   Low-Low\n12          0.01 -0.3721543244 -0.132175031   Low-Low   Low-Low   Low-Low\n13          0.01 -0.5050671318 -0.220406423   Low-Low   Low-Low   Low-Low\n14          0.01 -0.6811224867  0.508028432   Low-Low   Low-Low   Low-Low\n15          0.05 -1.0248290507  0.379900431   Low-Low   Low-Low   Low-Low\n16          0.19 -0.5947129815  0.573362853   Low-Low   Low-Low   Low-Low\n17          0.08  0.1751417973 -0.631854300  High-Low  High-Low  High-Low\n18          0.05 -0.5462248724  0.094487828   Low-Low   Low-Low   Low-Low\n19          0.03  0.8927681208  1.699702215 High-High High-High High-High\n20          0.10  0.9702650972  2.280384530 High-High High-High High-High\n21          0.34  0.5547188722  0.798546403 High-High High-High High-High\n22          0.03 -0.8370404275  1.311442923  Low-High  Low-High  Low-High\n23          0.10  0.6129396988 -0.017401846 High-High High-High High-High\n24          0.12  0.8703919340  1.174981832 High-High High-High High-High\n25          0.01 -0.6405721326  0.625557596   Low-Low   Low-Low   Low-Low\n26          0.01 -1.1994562157  3.037356680   Low-Low   Low-Low   Low-Low\n27          0.28  0.5671806423  0.868970833 High-High High-High High-High\n28          0.20  0.5302714815  0.529499154 High-High High-High High-High\n29          0.06 -0.5202923455  0.277050545  Low-High  Low-High  Low-High\n30          0.22 -0.0268210808 -0.308421671  Low-High  Low-High  Low-High\n31          0.18  0.1464697990 -0.256359695   Low-Low   Low-Low   Low-Low\n32          0.06  0.5777045879  0.516625369 High-High High-High High-High\n33          0.25 -0.5622576801  0.240068296   Low-Low   Low-Low   Low-Low\n34          0.02  0.1087380658  0.293050006 High-High High-High High-High\n35          0.03  0.9636515337  2.202303498 High-High High-High High-High\n36          0.01  0.2476861590 -0.441951303 High-High High-High High-High\n37          0.39 -0.6319319950  1.196984675  Low-High  Low-High  Low-High\n38          0.01  0.2306115609 -0.410567751 High-High High-High High-High\n39          0.17  0.3460043685 -0.169453185 High-High High-High High-High\n40          0.33 -0.2948450075 -0.833920795  Low-High  Low-High  Low-High\n41          0.01  0.3513447352  0.033673083 High-High High-High High-High\n42          0.09  0.8534504301  0.976316854 High-High High-High High-High\n43          0.05  0.6044104609  0.156786454 High-High High-High High-High\n44          0.01  0.2153922978 -0.353622154 High-High High-High High-High\n45          0.27 -0.7125956346  0.278667204  Low-High High-High  Low-High\n46          0.04 -0.6898889915  1.139513138  Low-High High-High  Low-High\n47          0.17  1.0696959450  3.364549345 High-High High-High High-High\n48          0.44  0.8300633830  0.617213305  High-Low  High-Low  High-Low\n49          0.40  0.6452292641  0.412425275  High-Low  High-Low  High-Low\n50          0.02  0.6264891755  0.292216333 High-High High-High High-High\n51          0.48  0.4052163198 -0.389730916  High-Low  High-Low  High-Low\n52          0.04  0.4413567994 -0.039380578 High-High High-High High-High\n53          0.49 -0.6283331805  0.432013974   Low-Low   Low-Low   Low-Low\n54          0.28 -0.0280007534 -0.594289809  High-Low  High-Low  High-Low\n55          0.49 -0.6565734671  0.161557111   Low-Low   Low-Low   Low-Low\n56          0.12  0.7485805313  1.144955047 High-High High-High High-High\n57          0.23 -0.6432730318 -0.058227500  Low-High  Low-High  Low-High\n58          0.32  0.4426904093 -0.087853007 High-High High-High High-High\n59          0.50 -0.7687266029  1.214478844   Low-Low   Low-Low   Low-Low\n60          0.20 -0.2845230642 -0.385691937   Low-Low   Low-Low   Low-Low\n61          0.27  0.3999427803  0.160749742 High-High High-High High-High\n62          0.15 -0.6428276032  1.111616678   Low-Low   Low-Low   Low-Low\n63          0.07  0.5866083187 -0.030421368 High-High High-High High-High\n64          0.07  1.1315392479  2.812281244 High-High High-High High-High\n65          0.03  0.3347746097  0.353990137 High-High High-High High-High\n66          0.46  0.3982755668 -0.326558481 High-High High-High High-High\n67          0.43 -0.6849297082  0.588627823   Low-Low   Low-Low   Low-Low\n68          0.44 -0.5443961423  0.044951049   Low-Low   Low-Low   Low-Low\n69          0.36 -0.5230915588 -0.104425379  Low-High High-High  Low-High\n70          0.48  0.6200034324 -0.197360054  High-Low  High-Low  High-Low\n71          0.36 -0.6031503649  0.080779260  Low-High  Low-High  Low-High\n72          0.43  0.4980989642 -0.324687446 High-High High-High High-High\n73          0.46  0.8105295960  0.801431812  High-Low  High-Low  High-Low\n74          0.04  0.3385276100  0.222092024 High-High High-High High-High\n75          0.03  0.7071891555  0.500551001 High-High High-High High-High\n76          0.10  0.4400253973 -0.522816478 High-High High-High High-High\n77          0.04 -0.9180690626  1.119250735   Low-Low   Low-Low   Low-Low\n78          0.01 -0.3117196425 -0.164584698   Low-Low   Low-Low   Low-Low\n79          0.07 -0.4509349072 -0.279620443   Low-Low   Low-Low   Low-Low\n80          0.01 -0.5602961833 -0.240176226   Low-Low   Low-Low   Low-Low\n81          0.04 -0.6730818920  0.118696103   Low-Low   Low-Low   Low-Low\n82          0.37 -0.4695788866  0.278828856   Low-Low   Low-Low   Low-Low\n83          0.02 -0.7028561157  0.145784956   Low-Low   Low-Low   Low-Low\n84          0.27  0.4445278721 -0.350904644 High-High High-High High-High\n85          0.07  0.4216255168 -0.386795314 High-High High-High High-High\n86          0.19  0.7169370770  1.069900111 High-High High-High High-High\n87          0.01  0.1414778101 -0.535425959 High-High High-High High-High\n88          0.01  0.2667781866 -0.115920848 High-High High-High High-High\n89          0.22  0.8450953642  0.436281024 High-High High-High High-High\n90          0.01  0.8466430293  0.692429750 High-High High-High High-High\n91          0.31 -0.7092883273 -0.128343886   Low-Low   Low-Low   Low-Low\n92          0.29  0.2865989715 -0.527822123  High-Low  High-Low  High-Low\n93          0.11  0.5054536800  0.333266910 High-High High-High High-High\n94          0.09  0.8457927306  0.943934370 High-High High-High High-High\n95          0.15 -0.5955457954  0.104007776   Low-Low   Low-Low   Low-Low\n96          0.12  1.0282984334  2.749442863 High-High High-High High-High\n97          0.05  0.3002485828 -0.300386055 High-High High-High High-High\n98          0.05 -0.3496908370 -0.227346337   Low-Low   Low-Low   Low-Low\n99          0.03 -0.4125661764 -0.142718104   Low-Low   Low-Low   Low-Low\n100         0.24 -0.1374239978 -0.552648654  Low-High  Low-High  Low-High\n101         0.08  0.3087723989 -0.451337911 High-High High-High High-High\n102         0.12 -0.2499212575 -0.126083458  Low-High  Low-High  Low-High\n103         0.34  0.7011008203  0.044566005 High-High High-High High-High\n104         0.15  0.8347996193  1.326669422 High-High High-High High-High\n105         0.42  0.2387675381 -0.707460797 High-High High-High High-High\n106         0.43  0.8564818030  2.264366890 High-High High-High High-High\n107         0.16 -0.1296812991 -0.289954122  Low-High High-High  Low-High\n108         0.40 -1.1602685648  1.984802978   Low-Low  High-Low   Low-Low\n109         0.14  0.6875450510  1.029905497 High-High High-High High-High\n110         0.01  0.6868717451 -0.004296619 High-High High-High High-High\n111         0.02  1.4146693273  5.446321073 High-High High-High High-High\n112         0.20  0.7123343206  0.698086789 High-High High-High High-High\n113         0.01  0.2251147303 -0.659007282 High-High High-High High-High\n114         0.01  0.3258231334 -0.381251821 High-High High-High High-High\n115         0.04 -0.5461570896  0.335102210   Low-Low   Low-Low   Low-Low\n116         0.34  0.6554160784  0.402139454 High-High High-High High-High\n117         0.08 -0.8095782785  0.271653374   Low-Low   Low-Low   Low-Low\n118         0.02 -0.5144011569  0.543777104   Low-Low   Low-Low   Low-Low\n119         0.33  0.5397095332 -0.012992073  High-Low  High-Low  High-Low\n120         0.13 -0.4504223504  0.387853944   Low-Low   Low-Low   Low-Low\n121         0.29  0.7517356505  0.338784043  High-Low  High-Low  High-Low\n122         0.36 -0.6823107085 -0.073926941   Low-Low   Low-Low   Low-Low\n123         0.48 -1.2797733217  2.879341453   Low-Low   Low-Low   Low-Low\n124         0.32 -0.1577735465 -0.532158157   Low-Low   Low-Low   Low-Low\n125         0.03  0.5708501946 -0.076586643 High-High High-High High-High\n126         0.02 -0.6419610125  0.243424001   Low-Low   Low-Low   Low-Low\n127         0.11 -0.7554351188  0.179302156   Low-Low   Low-Low   Low-Low\n128         0.01 -0.7373114741  1.923628345   Low-Low   Low-Low   Low-Low\n129         0.18 -0.0796119170 -0.351010970   Low-Low   Low-Low   Low-Low\n130         0.26 -0.8635930628  0.490875768   Low-Low   Low-Low   Low-Low\n131         0.22  0.2790339539 -0.399311210 High-High High-High High-High\n132         0.01 -0.8307859842  1.230757976   Low-Low   Low-Low   Low-Low\n133         0.01 -0.3153677241  0.452407579   Low-Low   Low-Low   Low-Low\n134         0.32 -1.2354961954  2.821562509  Low-High  Low-High  Low-High\n135         0.32 -1.1815804092  2.532472344  Low-High  Low-High  Low-High\n136         0.09  0.5598583310 -0.303431176 High-High High-High High-High\n137         0.10  0.5344283604  0.107347098 High-High High-High High-High\n138         0.12 -0.6224304489 -0.007205270   Low-Low   Low-Low   Low-Low\n139         0.02 -0.5247726361 -0.173272028   Low-Low   Low-Low   Low-Low\n140         0.02  0.2990403078  0.116823600 High-High High-High High-High\n141         0.45 -0.8272727689  0.415537603   Low-Low   Low-Low   Low-Low\n142         0.37  0.9418590186  0.315988934  High-Low  High-Low  High-Low\n143         0.04 -0.4761120190 -0.306259820   Low-Low   Low-Low   Low-Low\n144         0.04 -0.6658387073  0.675595856   Low-Low   Low-Low   Low-Low\n145         0.11  0.2453544253 -0.588495272  Low-High  Low-High  Low-High\n146         0.47 -0.1182913584 -0.285157383  Low-High  Low-High  Low-High\n147         0.42 -0.4062008892  0.394856332  Low-High  Low-High  Low-High\n148         0.21  0.4099512571 -0.133666475 High-High High-High High-High\n149         0.01 -0.3894904923 -0.241626948  Low-High High-High  Low-High\n150         0.05  0.3394845025 -0.362997545 High-High High-High High-High\n151         0.01  0.3931969263  0.058313527 High-High High-High High-High\n152         0.13 -0.0270407301 -0.496648580   Low-Low   Low-Low   Low-Low\n153         0.20  0.4875426353  0.214312348  High-Low  High-Low  High-Low\n154         0.37  0.4458071585 -0.378233321 High-High High-High High-High\n155         0.41 -0.4730361319  0.061986773   Low-Low   Low-Low   Low-Low\n156         0.42 -0.0602556657 -0.698437566   Low-Low   Low-Low   Low-Low\n157         0.09 -0.8921020955  1.276684799   Low-Low   Low-Low   Low-Low\n158         0.28 -0.6440952738  0.667642036  Low-High High-High  Low-High\n159         0.01 -1.1745230297  2.746178662   Low-Low   Low-Low   Low-Low\n160         0.02 -0.9109987599  0.602801478   Low-Low   Low-Low   Low-Low\n161         0.02 -0.0848432711 -0.186652462   Low-Low   Low-Low   Low-Low\n162         0.13 -0.5107734420  0.815455729   Low-Low  High-Low   Low-Low\n163         0.02 -1.2106382723  1.633091952   Low-Low   Low-Low   Low-Low\n164         0.36  1.1971378618  2.099689493  High-Low  High-Low  High-Low\n165         0.32 -0.9488980788  0.927458505  Low-High  Low-High  Low-High\n166         0.01 -0.4420604386 -0.277663217   Low-Low   Low-Low   Low-Low\n167         0.09 -0.5003748783  0.226203389   Low-Low   Low-Low   Low-Low\n168         0.04 -0.4148899252 -0.559737896   Low-Low   Low-Low   Low-Low\n169         0.05 -0.5223491853 -0.303695658   Low-Low   Low-Low   Low-Low\n170         0.01  0.4766447825  0.713403194 High-High High-High High-High\n171         0.33  0.0881258028 -0.709345861 High-High High-High High-High\n172         0.01 -0.3236410421 -0.733145486  Low-High  Low-High  Low-High\n173         0.22 -0.5137140836 -0.355860760  Low-High  Low-High  Low-High\n174         0.37 -0.0497906679 -0.726204936  Low-High  Low-High  Low-High\n175         0.24 -0.4874335581 -0.531359717  Low-High  Low-High  Low-High\n176         0.35  0.5708720142  0.074038000 High-High High-High High-High\n177         0.03 -0.2987637230 -0.253698039  Low-High High-High  Low-High\n178         0.27  0.7270598483  1.146230473 High-High High-High High-High\n179         0.29 -0.1199313993 -0.525226495  Low-High  Low-High  Low-High\n180         0.40  0.4113045673  0.052701304 High-High High-High High-High\n181         0.28  0.4464245842  0.840094417  High-Low  High-Low  High-Low\n182         0.33  1.1926569898  1.972574826 High-High High-High High-High\n183         0.13 -0.5928847943  0.567915485  Low-High High-High  Low-High\n184         0.47  0.4176528705  0.423595796 High-High High-High High-High\n185         0.40 -0.5236426766  0.046078423   Low-Low   Low-Low   Low-Low\n186         0.12  0.4507126998  0.025130850  High-Low  High-Low  High-Low\n187         0.30  0.1700009912 -0.486438534  High-Low  High-Low  High-Low\n188         0.28  0.1694259178 -0.250351837 High-High High-High High-High\n189         0.12  0.5925465341  0.587710300 High-High High-High High-High\n190         0.09 -0.5778283376  0.423216328   Low-Low   Low-Low   Low-Low\n191         0.15  0.6047397416 -0.189028895 High-High High-High High-High\n192         0.13 -0.6264752107  0.481377266  Low-High  Low-High  Low-High\n193         0.49  0.7806041285  0.743673117  High-Low  High-Low  High-Low\n194         0.06  0.7562982431  0.436524468 High-High High-High High-High\n195         0.35 -0.2449844095 -0.751490292  Low-High  Low-High  Low-High\n196         0.36 -0.7499409600  0.347067034  Low-High  Low-High  Low-High\n197         0.36 -0.7470506873  1.656203568  Low-High  Low-High  Low-High\n198         0.37  0.2828119528 -0.618332542 High-High High-High High-High\n199         0.46  0.6512455828  0.438789874 High-High  High-Low High-High\n200         0.21 -0.1535564800 -0.150489942   Low-Low   Low-Low   Low-Low\n201         0.09 -0.5855731775  0.260742366   Low-Low   Low-Low   Low-Low\n202         0.42 -0.6296787000  0.429129138  Low-High  Low-High  Low-High\n203         0.39 -0.4793773798  0.451670707   Low-Low   Low-Low   Low-Low\n204         0.48  0.6167105460  0.209085260  High-Low  High-Low  High-Low\n205         0.49 -0.2856625611  0.061815647   Low-Low   Low-Low   Low-Low\n206         0.08 -0.4609971322 -0.614552012   Low-Low   Low-Low   Low-Low\n207         0.38 -0.1924721968 -0.159318440   Low-Low   Low-Low   Low-Low\n208         0.04 -0.7520929322  0.256188767   Low-Low   Low-Low   Low-Low\n209         0.04 -0.6372329402  0.469428428   Low-Low   Low-Low   Low-Low\n210         0.01 -0.1589082218 -0.754626408   Low-Low   Low-Low   Low-Low\n211         0.20 -0.5496027993  0.048435369   Low-Low  High-Low   Low-Low\n212         0.03 -0.0003561491 -0.624825664   Low-Low   Low-Low   Low-Low\n213         0.25  0.0917799457 -0.488615536  High-Low  High-Low  High-Low\n214         0.34 -0.4574688006 -0.586221055   Low-Low  High-Low   Low-Low\n215         0.04  0.1448562572 -0.560554188 High-High High-High High-High\n216         0.01  0.1756559187 -0.341553351 High-High High-High High-High\n217         0.35 -0.7215976354 -0.300349548   Low-Low  High-Low   Low-Low\n218         0.46 -0.6351837910  0.531154061   Low-Low   Low-Low   Low-Low\n219         0.26  0.3641292828 -0.165937637 High-High High-High High-High\n220         0.21  0.4413827664  0.031669308 High-High High-High High-High\n221         0.06 -1.2926291688  2.146710658   Low-Low   Low-Low   Low-Low\n222         0.05 -0.2190858406 -0.405738957   Low-Low   Low-Low   Low-Low\n223         0.35  0.5641679730  0.484290816  High-Low  High-Low  High-Low\n224         0.25 -0.5487334231 -0.471993386   Low-Low   Low-Low   Low-Low\n225         0.21 -0.3433777314  0.359334125   Low-Low   Low-Low   Low-Low\n226         0.05  0.2295086131 -0.518128565 High-High High-High High-High\n227         0.01  0.3521649053  0.235065897 High-High High-High High-High\n228         0.38 -0.3040970290 -0.173665618   Low-Low  High-Low   Low-Low\n229         0.19  0.6350308251 -0.377128451 High-High High-High High-High\n230         0.26  0.0136283047 -0.629990026 High-High High-High High-High\n231         0.01  0.1223715473 -0.246924166 High-High High-High High-High\n232         0.26  0.4945188816  0.782545909 High-High High-High High-High\n233         0.16 -0.8034303807  0.700268130   Low-Low   Low-Low   Low-Low\n234         0.12 -0.8236340340  1.131515498   Low-Low   Low-Low   Low-Low\n235         0.45 -0.6993304096  0.449201112   Low-Low   Low-Low   Low-Low\n236         0.03 -0.4753661627 -0.102848101   Low-Low   Low-Low   Low-Low\n237         0.27 -1.0089451362  0.986049672   Low-Low   Low-Low   Low-Low\n238         0.35  0.1592030132 -0.010421208 High-High High-High High-High\n239         0.42 -0.3650201697 -0.824278529  Low-High  Low-High  Low-High\n240         0.07  0.6707397171  0.458858842 High-High High-High High-High\n241         0.01 -0.7669607233  1.015758887   Low-Low   Low-Low   Low-Low\n242         0.01 -0.7387343542  0.433994918   Low-Low   Low-Low   Low-Low\n243         0.17  0.2591737293 -0.397987052 High-High High-High High-High\n244         0.19 -0.8370562423  0.191997628  Low-High  Low-High  Low-High\n245         0.03 -0.9508506394  1.891398290  Low-High  Low-High  Low-High\n246         0.02 -0.5079869992 -0.074618008   Low-Low   Low-Low   Low-Low\n247         0.12 -0.2586821862 -0.093492377   Low-Low   Low-Low   Low-Low\n248         0.01 -0.5695178724  0.589074544   Low-Low   Low-Low   Low-Low\n249         0.01 -0.1264205008 -0.422467736   Low-Low   Low-Low   Low-Low\n250         0.01 -0.4089697120 -0.261490956   Low-Low   Low-Low   Low-Low\n251         0.05 -0.9404577431  1.807671881   Low-Low   Low-Low   Low-Low\n252         0.02 -0.9311297574  0.306324026   Low-Low   Low-Low   Low-Low\n253         0.01 -0.4617229332  0.020794178   Low-Low   Low-Low   Low-Low\n254         0.01 -0.0892164713 -0.457481216   Low-Low   Low-Low   Low-Low\n255         0.37 -0.6261612577  0.254179030   Low-Low   Low-Low   Low-Low\n256         0.47  0.5310385331  0.287639612  High-Low  High-Low  High-Low\n257         0.03  0.5757358180 -0.006098234 High-High High-High High-High\n\n\n\njoining Local moran results and wm_q\n\nlocalMoranData &lt;- cbind(test3_sf[2], localMoran)\n\nCode chunk below list the content of the local Moran matrix derived by using printCoefMat - foolowed slides (Chao10)\n\nfips &lt;-localMoranData$town\n\nprintCoefmat(data.frame(\n  localMoran, \n  row.names=localMoranData$town),\n  check.names=FALSE)\n\n                             ii         eii      var_ii        z_ii        p_ii\nD06 Qingcao Vil.     1.4042e+00 -7.9753e-02  6.1798e-01  1.8877e+00  5.9072e-02\nD32 Bao'an Vil.      7.5668e-01 -2.6953e-02  1.5371e-01  1.9988e+00  4.5633e-02\nD08 Chihkan Vil.     3.4866e-02  2.1287e-02  4.9309e-02  6.1149e-02  9.5124e-01\nD02 Dacheng Vil.    -2.1450e-01  2.4707e-02  8.3767e-02 -8.2648e-01  4.0853e-01\nD06 Chengbei Vil.    1.4327e+00  3.8192e-03  3.0843e-01  2.5728e+00  1.0088e-02\nD06 Chengnan Vil.    1.2956e+00  1.6779e-02  2.0389e-01  2.8322e+00  4.6233e-03\nD08 Fahua Vil.       3.2600e-01 -2.9210e-04  9.6047e-02  1.0528e+00  2.9242e-01\nD06 Hainan Vil.      2.0586e-02 -3.2148e-02  1.7007e-02  4.0438e-01  6.8593e-01\nD06 Guo'an Vil.      4.0290e-01  1.3634e-02  7.9140e-02  1.3837e+00  1.6644e-01\nD06 Xixin Vil.       8.6432e-02  6.3702e-03  3.2499e-03  1.4044e+00  1.6020e-01\nD06 Yuandong Vil.    5.6243e-01  6.8240e-03  1.5177e-01  1.4262e+00  1.5381e-01\nD06 Chengzhong Vil.  1.4284e+00 -9.4623e-03  3.6919e-01  2.3664e+00  1.7960e-02\nD06 Chengdong Vil.   1.3708e+00  8.2161e-02  2.3217e-01  2.6744e+00  7.4867e-03\nD06 Xuedong Vil.     1.2267e+00  2.3515e-02  4.0238e-01  1.8968e+00  5.7855e-02\nD39 Dongwan Vil.     5.7771e-01 -2.4315e-02  2.3039e-01  1.2543e+00  2.0975e-01\nD39 Nanwan Vil.      3.7613e-01  5.7025e-02  1.4085e-01  8.5027e-01  3.9518e-01\nD39 Kunshan Vil.    -1.0835e-01 -4.6047e-03  5.7584e-03 -1.3672e+00  1.7157e-01\nD39 Dawan Vil.       6.3877e-01  3.0381e-03  1.5106e-01  1.6357e+00  1.0191e-01\nD39 Wuwang Vil.      1.6955e+00 -1.6994e-01  7.8220e-01  2.1092e+00  3.4930e-02\nD39 Ankang Vil.      3.2022e-01 -1.3643e-02  5.7267e-02  1.3951e+00  1.6298e-01\nD39 Xiqiao Vil.      3.4498e-03  1.0199e-03  2.4921e-05  4.8676e-01  6.2643e-01\nD39 Wangliao Vil.   -2.2161e-01  7.8609e-03  6.9077e-03 -2.7610e+00  5.7627e-03\nD39 Daqiao Vil.      9.4605e-01 -2.4743e-03  4.6115e-01  1.3968e+00  1.6248e-01\nD39 Dongqiao Vil.    3.3875e-01  6.5785e-03  5.8110e-02  1.3780e+00  1.6821e-01\nD39 Wuzhu Vil.       9.5534e-01  5.4904e-02  2.0346e-01  1.9963e+00  4.5905e-02\nD39 Wangxing Vil.    1.1539e+00  3.4640e-02  2.8989e-01  2.0789e+00  3.7628e-02\nD01 Dazhi Vil.       3.3097e-02  3.8126e-04  4.4580e-03  4.8998e-01  6.2415e-01\nD01 Chongwen Vil.    1.0131e-01 -1.0174e-02  1.6260e-02  8.7429e-01  3.8196e-01\nD01 Chongcheng Vil. -2.4885e-01  3.1267e-03  1.7846e-02 -1.8862e+00  5.9267e-02\nD01 Chongming Vil.  -1.0642e-01 -3.8440e-03  1.3517e-02 -8.8224e-01  3.7765e-01\nD01 Dafu Vil.        2.1040e-01 -3.6073e-02  7.5729e-02  8.9565e-01  3.7044e-01\nD01 Chongde Vil.     1.1833e+00 -6.0096e-02  7.3285e-01  1.4525e+00  1.4637e-01\nD01 Dade Vil.        2.4890e-01  1.1025e-02  8.7676e-02  8.0336e-01  4.2177e-01\nD01 Chongxue Vil.    7.3748e-01 -4.8214e-02  8.4636e-02  2.7007e+00  6.9190e-03\nD01 Heping Vil.      7.3871e-01 -6.4189e-02  5.6086e-02  3.3902e+00  6.9830e-04\nD01 Chongshan Vil.   1.7123e+00 -8.6381e-02  2.7764e-01  3.4137e+00  6.4089e-04\nD01 Ludong Vil.     -2.9490e-02  5.5104e-02  7.5248e-02 -3.0838e-01  7.5779e-01\nD01 Huwei Vil.       1.7750e+00  5.9317e-02  5.1323e-01  2.3949e+00  1.6624e-02\nD01 Zhongxiao Vil.   1.0047e-01 -1.6604e-02  1.3947e-02  9.9132e-01  3.2153e-01\nD01 Yusheng Vil.    -1.6886e-01 -2.2823e-02  9.6366e-02 -4.7044e-01  6.3804e-01\nD01 Chongxin Vil.    1.4044e+00 -6.9537e-03  1.4090e-01  3.7599e+00  1.7000e-04\nD01 Deguang Vil.     5.1752e-01 -1.3573e-02  1.3920e-01  1.4235e+00  1.5459e-01\nD01 Fuxing Vil.      7.9859e-01 -4.6784e-02  1.9786e-01  1.9005e+00  5.7363e-02\nD01 Ziqiang Vil.     2.4346e+00 -3.2179e-02  5.0691e-01  3.4646e+00  5.3095e-04\nD01 Wensheng Vil.   -1.9291e-02  7.8421e-05  1.7659e-03 -4.6093e-01  6.4485e-01\nD01 Fuyu Vil.       -4.0190e-02 -1.6347e-03  2.8407e-04 -2.2876e+00  2.2164e-02\nD01 Longshan Vil.    4.1095e-02  7.6274e-03  1.1205e-03  9.9984e-01  3.1739e-01\nD01 Guansheng Vil.  -2.8791e-02  6.3078e-03  1.3746e-02 -2.9937e-01  7.6466e-01\nD01 Xindong Vil.    -2.4054e-02  6.5036e-02  7.1004e-02 -3.3434e-01  7.3812e-01\nD01 Fuqiang Vil.     1.9079e+00  2.0644e-03  4.2014e-01  2.9403e+00  3.2794e-03\nD01 Quannan Vil.    -3.3903e-02 -4.2246e-02  1.1590e-01  2.4507e-02  9.8045e-01\nD01 Dongsheng Vil.   4.2179e-01  3.5864e-03  4.4429e-02  1.9841e+00  4.7250e-02\nD01 Dong'an Vil.     6.0220e-02 -6.6175e-03  1.6859e-01  1.6278e-01  8.7069e-01\nD01 Datong Vil.     -4.5111e-02 -5.3512e-03  2.7344e-03 -7.6034e-01  4.4705e-01\nD01 Weiguo Vil.      5.1381e-02  2.5308e-02  6.4317e-02  1.0281e-01  9.1811e-01\nD01 Yunong Vil.      7.2531e-01  4.9343e-02  3.4599e-01  1.1492e+00  2.5048e-01\nD01 Nansheng Vil.   -1.0642e-01  1.2483e-02  3.1034e-02 -6.7498e-01  4.9969e-01\nD01 Chonghui Vil.    2.8198e-02 -2.1854e-02  1.1389e-02  4.6902e-01  6.3906e-01\nD01 Dongmen Vil.     2.7213e-02  1.8086e-02  1.2730e-01  2.5582e-02  9.7959e-01\nD01 Zhongxi Vil.     1.7001e-01  1.3587e-02  3.1085e-02  8.8719e-01  3.7498e-01\nD01 Dongming Vil.    7.2451e-02  9.0274e-03  1.4683e-02  5.2340e-01  6.0069e-01\nD01 Weixia Vil.      3.6199e-01 -1.1116e-02  1.3178e-01  1.0278e+00  3.0404e-01\nD01 Dongguang Vil.   7.3953e-02  1.7519e-03  1.6089e-03  1.8000e+00  7.1856e-02\nD01 Houjia Vil.      5.4591e-01  1.8534e-02  1.1793e-01  1.5357e+00  1.2462e-01\nD01 Zhuangjing Vil.  6.5703e-01  2.1624e-02  7.6742e-02  2.2937e+00  2.1809e-02\nD01 Xiaodong Vil.    4.9750e-02  3.5408e-02  7.6269e-02  5.1933e-02  9.5858e-01\nD01 Daxue Vil.       2.1487e-02  2.3061e-02  3.3789e-02 -8.5622e-03  9.9317e-01\nD01 Chengda Vil.     2.4316e-02  2.1885e-04  1.0264e-02  2.3784e-01  8.1200e-01\nD04 Gongyuan Vil.   -2.4639e-03 -4.1337e-04  9.4695e-05 -2.1072e-01  8.3311e-01\nD04 Zhonglou Vil.   -3.8006e-02  5.2494e-04  2.9542e-02 -2.2418e-01  8.2262e-01\nD04 Xianbei Vil.    -3.1414e-02 -3.7740e-03  7.9394e-03 -3.1020e-01  7.5641e-01\nD04 Dafeng Vil.      3.1558e-02  6.7381e-03  2.9745e-02  1.4391e-01  8.8557e-01\nD04 Dagang Vil.     -2.9822e-02  1.5386e-02  4.5597e-02 -2.1171e-01  8.3233e-01\nD04 Zhengjue Vil.    9.3792e-01 -4.9102e-02  2.3790e-01  2.0236e+00  4.3008e-02\nD04 Dahe Vil.        1.4793e-01  2.7976e-03  4.2128e-03  2.2361e+00  2.5347e-02\nD04 Chenggong Vil.   1.5234e-01  5.4578e-03  8.0685e-03  1.6352e+00  1.0200e-01\nD02 Fotan Vil.       4.5311e-01 -5.7840e-02  1.1669e-01  1.4958e+00  1.3472e-01\nD02 Tong'an Vil.     9.2831e-01 -2.3580e-02  1.8237e-01  2.2290e+00  2.5814e-02\nD02 Song'an Vil.     8.6462e-01  8.3308e-04  3.2139e-01  1.5237e+00  1.2759e-01\nD02 Yongning Vil.    1.0720e+00 -1.8334e-01  3.2616e-01  2.1981e+00  2.7940e-02\nD02 Xinan Vil.       1.0795e+00 -4.4212e-02  4.6034e-01  1.6562e+00  9.7672e-02\nD02 Xidong Vil.      2.0576e-01  3.9200e-02  1.1129e-01  4.9927e-01  6.1759e-01\nD02 Xibei Vil.       7.1321e-01 -1.7124e-02  1.9508e-01  1.6535e+00  9.8220e-02\nD02 Nandou Vil.      1.8794e-02 -4.5114e-03  1.2235e-03  6.6628e-01  5.0523e-01\nD02 Nanhua Vil.      5.1839e-01 -7.4271e-02  1.0474e-01  1.8313e+00  6.7055e-02\nD02 Jiannan Vil.     4.5248e-01 -4.1621e-02  3.6085e-01  8.2252e-01  4.1078e-01\nD02 Mingxing Vil.    2.3053e+00 -4.9495e-02  5.0408e-01  3.3167e+00  9.1073e-04\nD02 Junnan Vil.      1.4372e+00 -2.5313e-02  2.0947e-01  3.1954e+00  1.3963e-03\nD02 Kainan Vil.      2.1496e-01  9.9282e-03  9.1317e-02  6.7849e-01  4.9746e-01\nD02 Mingliang Vil.   3.5255e+00 -1.9056e-01  1.0233e+00  3.6734e+00  2.3930e-04\nD02 Kunshen Vil.     2.2212e-01  1.1434e-02  1.0642e-01  6.4583e-01  5.1839e-01\nD02 Dazhong Vil.    -5.5556e-03 -1.0961e-03  3.9892e-05 -7.0607e-01  4.8015e-01\nD02 Guangming Vil.   4.9399e-01  1.9519e-02  1.7366e-01  1.1386e+00  2.5489e-01\nD02 Funan Vil.       1.2071e+00 -1.3176e-01  7.3482e-01  1.5619e+00  1.1831e-01\nD02 Dalin Vil.       3.7642e-01  6.2093e-02  9.1187e-02  1.0409e+00  2.9791e-01\nD02 Guozhai Vil.     5.6005e-01  9.3518e-02  1.6225e-01  1.1582e+00  2.4678e-01\nD02 Tianliao Vil.    7.1510e-02  2.9129e-03  1.1817e-03  1.9955e+00  4.5987e-02\nD02 Xinsheng Vil.    3.7376e-01  5.3684e-02  4.0677e-02  1.5870e+00  1.1251e-01\nD02 Zhuxi Vil.       6.4088e-01 -1.7416e-03  1.2762e-01  1.7988e+00  7.2047e-02\nD02 Mingde Vil.     -2.6365e-01 -1.8525e-02  1.1381e-01 -7.2660e-01  4.6747e-01\nD02 Zaixing Vil.     2.5948e-01 -3.5445e-02  3.9441e-02  1.4851e+00  1.3753e-01\nD02 Zhangnan Vil.   -4.0815e-01 -2.1522e-02  8.1174e-02 -1.3570e+00  1.7477e-01\nD02 Jinhua Vil.      2.1997e-01  2.2891e-02  5.3991e-01  2.6822e-01  7.8853e-01\nD02 Xinxing Vil.     4.9799e-02 -3.4680e-03  2.8703e-03  9.9424e-01  3.2010e-01\nD02 Wennan Vil.      5.1956e-03 -5.1796e-04  1.9562e-03  1.2918e-01  8.9721e-01\nD02 Xinchang Vil.    1.9738e-03 -3.6303e-04  2.2515e-04  1.5574e-01  8.7624e-01\nD02 Guangzhou Vil.  -1.6419e-02  3.3037e-03  4.3807e-04 -9.4230e-01  3.4604e-01\nD02 Wenhua Vil.      4.6828e-03  9.1948e-05  1.1200e-04  4.3378e-01  6.6445e-01\nD06 Xiding Vil.      4.4739e-01  1.8836e-02  1.4397e-01  1.1295e+00  2.5870e-01\nD06 Haidian Vil.     2.9543e+00  1.1707e-01  8.9991e-01  2.9909e+00  2.7817e-03\nD06 Xidong Vil.      1.6289e+00 -2.5216e-02  3.3337e-01  2.8649e+00  4.1712e-03\nD06 Xibei Vil.       8.2824e-02 -5.4726e-03  1.5442e-02  7.1055e-01  4.7736e-01\nD06 Xiqi Vil.        4.8767e+00  5.3444e-02  1.2796e+00  4.2639e+00  2.0090e-05\nD06 Anfu Vil.        4.6218e+00 -9.4783e-02  2.9217e+00  2.7594e+00  5.7913e-03\nD06 Yantian  Vil.    6.7583e-01 -1.2545e-02  1.8488e-01  1.6010e+00  1.0938e-01\nD06 Fenghuang Vil.   2.4566e-01  1.7246e-02  6.4317e-01  2.8482e-01  7.7579e-01\nD06 Gongqin Vil.     1.0497e+00 -1.0275e-01  7.5438e-01  1.3269e+00  1.8456e-01\nD06 Shalun Vil.      1.3868e+00  2.2349e-02  3.5299e-01  2.2966e+00  2.1639e-02\nD07 Wenping Vil.    -3.5365e-03 -6.2802e-04  2.8293e-05 -5.4681e-01  5.8451e-01\nD07 Guoping Vil.     8.0822e-02  1.3309e-02  3.5738e-03  1.1293e+00  2.5876e-01\nD07 Yuping Vil.     -3.1326e-02  2.8118e-03  3.6026e-03 -5.6876e-01  5.6952e-01\nD07 Huaping Vil.     3.4926e-02 -1.1122e-02  7.8672e-03  5.1916e-01  6.0365e-01\nD07 Yiping Vil.      5.7496e-02  1.8678e-02  2.1135e-02  2.6701e-01  7.8946e-01\nD07 Jianping Vil.    5.4136e-02 -5.4400e-04  9.0166e-03  5.7584e-01  5.6472e-01\nD06 Xingfu Vil.      2.8553e+00  1.5169e-02  1.2757e+00  2.5146e+00  1.1918e-02\nD32 Shanglun Vil.    6.8136e-01 -5.9328e-02  1.2857e-01  2.0657e+00  3.8854e-02\nD32 Houbi Vil.       2.7471e-01  1.1359e-02  5.9010e-02  1.0841e+00  2.7831e-01\nD32 Chenggong Vil.   1.2088e-01 -3.6877e-03  3.0640e-03  2.2505e+00  2.4420e-02\nD32 Renhe Vil.       5.1011e-01 -9.4192e-02  3.3759e-01  1.0401e+00  2.9831e-01\nD32 Ren'ai Vil.      3.3990e-01 -4.1490e-02  2.7563e-01  7.2646e-01  4.6756e-01\nD32 Rende Vil.       1.3874e-01  1.7993e-02  2.3087e-02  7.9467e-01  4.2680e-01\nD02 Xingnong Vil.    7.3574e-01  2.0226e-02  1.1128e-01  2.1449e+00  3.1962e-02\nD02 Shenggong Vil.   7.8200e-01 -1.6531e-02  1.1776e-01  2.3269e+00  1.9968e-02\nD32 Xintian Vil.    -1.9603e-01 -4.5497e-02  3.6343e-01 -2.4970e-01  8.0282e-01\nD32 Yijia Vil.      -2.9822e-02  2.8387e-02  5.7735e-02 -2.4225e-01  8.0858e-01\nD01 Degao Vil.       3.9054e-01 -3.3870e-02  7.3671e-02  1.5636e+00  1.1790e-01\nD01 Renhe Vil.       4.3505e-01  1.2696e-02  6.9889e-02  1.5976e+00  1.1013e-01\nD32 Zhongzhou Vil.   8.5624e-01 -3.5177e-03  4.9834e-01  1.2179e+00  2.2326e-01\nD39 Xiwan Vil.       2.1630e-01 -1.8468e-02  1.7148e-02  1.7928e+00  7.3008e-02\nD39 Jiading Vil.     3.0188e-01 -1.6567e-02  1.4183e-02  2.6740e+00  7.4960e-03\nD39 Yongkang Vil.    6.2295e-02  3.8845e-03  3.0897e-02  3.3230e-01  7.3966e-01\nD39 Zhengqiang Vil. -1.2590e-01  5.2611e-02  1.0395e-01 -5.5368e-01  5.7980e-01\nD07 Yuguang Vil.     8.2935e-01 -1.2620e-01  3.9447e-01  1.5214e+00  1.2816e-01\nD07 Jincheng Vil.    4.4806e-01 -3.7652e-02  8.1149e-02  1.7051e+00  8.8182e-02\nD39 Shangding Vil.  -9.3055e-02  1.0455e-02  6.6762e-03 -1.2668e+00  2.0521e-01\nD39 Fuxing Vil.     -6.3677e-03 -1.3858e-03  5.9226e-03 -6.4735e-02  9.4838e-01\nD39 Shenzhou Vil.   -1.4250e-01 -5.3213e-02  2.1249e-01 -1.9371e-01  8.4641e-01\nD39 Fuguo Vil.       4.0061e-01  1.6176e-02  2.4207e-01  7.8136e-01  4.3459e-01\nD39 Sanhe Vil.      -4.1032e-02  1.1232e-03  7.5650e-05 -4.8467e+00  1.2551e-06\nD39 Fuhua Vil.       3.6519e+00 -3.6832e-01  4.2126e+00  1.9587e+00  5.0145e-02\nD39 Erwang Vil.      2.3020e+00 -8.0986e-02  5.3134e-01  3.2692e+00  1.0787e-03\nD01 Dongzhi Vil.     7.4017e-02 -5.4144e-03  4.8795e-03  1.1371e+00  2.5549e-01\nD02 Da'en Vil.      -3.7621e-02 -3.4364e-03  1.3661e-03 -9.2488e-01  3.5503e-01\nD08 Xihu Vil.        4.5908e-03 -3.0296e-03  9.4394e-04  2.4803e-01  8.0411e-01\nD07 Ping'an Vil.     1.1378e-03  7.5878e-03  1.0143e-02 -6.4042e-02  9.4894e-01\nD08 Xixian Vil.      7.7743e-03 -1.8172e-02  9.1456e-03  2.7131e-01  7.8615e-01\nD06 Sicao Vil.       9.2698e-01  5.4868e-02  4.4555e-01  1.3065e+00  1.9137e-01\nD06 Andong Vil.     -3.3351e-02 -8.3040e-03  2.8815e-03 -4.6659e-01  6.4079e-01\nD06 Yuanzhong Vil.   6.2931e-01  3.7155e-02  1.1175e-01  1.7714e+00  7.6498e-02\nD06 Chengxi Vil.     1.3384e+00  4.6298e-02  7.0176e-01  1.5424e+00  1.2298e-01\nD06 Diandong Vil.    7.2978e-01 -8.6954e-03  1.1409e-01  2.1863e+00  2.8794e-02\nD06 Xinshun Vil.     1.3183e-03 -1.6857e-04  1.8277e-06  1.0998e+00  2.7141e-01\nD39 Xinshu Vil.      9.8031e-01 -4.0753e-03  3.9582e-01  1.5646e+00  1.1767e-01\nD39 Yanxing  Vil.   -5.3250e-03  4.2557e-04  1.4741e-04 -4.7365e-01  6.3575e-01\nD06 Haixi Vil.      -7.8372e-02 -1.2363e-02  7.2207e-02 -2.4565e-01  8.0595e-01\nD06 Dianxi Vil.      9.1787e-01 -3.9207e-02  1.7968e-01  2.2578e+00  2.3957e-02\nD32 Wenxian Vil.     6.7035e-01 -1.4770e-02  2.9609e-01  1.2591e+00  2.0800e-01\nD39 Longpu Vil.      5.7186e-01 -1.0958e-02  1.6173e-01  1.4492e+00  1.4727e-01\nD39 Yongming Vil.    6.3634e-01 -8.7164e-03  1.9119e-01  1.4753e+00  1.4014e-01\nD02 Yancheng Vil.    1.9205e+00  7.1172e-03  3.1457e-01  3.4115e+00  6.4614e-04\nD04 Beihua Vil.      1.4839e-02 -1.0790e-02  3.4071e-03  4.3909e-01  6.6060e-01\nD04 Huade Vil.      -4.0005e-01  9.6896e-03  1.8350e-02 -3.0248e+00  2.4882e-03\nD04 Fude Vil.       -6.6639e-02 -6.5644e-03  4.5170e-03 -8.9385e-01  3.7140e-01\nD04 Zhangsheng Vil. -5.2677e-02  1.0497e-02  2.3336e-02 -4.1355e-01  6.7921e-01\nD04 Zhangxing Vil.  -1.2606e-01 -3.3661e-03  2.2070e-02 -8.2592e-01  4.0885e-01\nD04 Daxing Vil.      2.7138e-02  4.2398e-03  5.8911e-03  2.9834e-01  7.6545e-01\nD04 Daguang Vil.    -7.7514e-02 -4.8470e-04  1.2830e-03 -2.1505e+00  3.1516e-02\nD04 Xiaobei Vil.     3.1724e-01  3.1281e-04  2.6324e-01  6.1771e-01  5.3677e-01\nD04 Shuang'an Vil.  -1.2355e-01 -3.4482e-02  2.9468e-02 -5.1884e-01  6.0387e-01\nD04 Liren Vil.       3.1929e-02  4.4198e-03  1.3327e-02  2.3829e-01  8.1166e-01\nD08 Xiaoximen Vil.  -9.5591e-02  2.8578e-02  2.9303e-02 -7.2536e-01  4.6823e-01\nD08 Duiyue Vil.      1.1922e-01  9.7033e-03  1.3881e-01  2.9395e-01  7.6880e-01\nD08 Wutiaogang Vil. -4.8328e-02 -2.4000e-04  1.4842e-03 -1.2482e+00  2.1195e-01\nD08 Nanmei Vil.      1.5197e-02  2.4758e-03  6.8771e-03  1.5340e-01  8.7808e-01\nD07 Wangcheng Vil.   1.0824e-01 -8.3188e-03  1.1298e-01  3.4677e-01  7.2877e-01\nD07 Tianfei Vil.    -4.0635e-01  4.7027e-02  1.6719e-01 -1.1088e+00  2.6752e-01\nD08 Chenghuang Vil. -3.9652e-02  2.3895e-03  4.3803e-03 -6.3522e-01  5.2529e-01\nD08 Xihe Vil.        8.6899e-02  3.5301e-03  2.1063e-02  5.7443e-01  5.6567e-01\nD04 Beimen Vil.      1.9902e+00  2.2900e-01  2.4781e+00  1.1188e+00  2.6322e-01\nD39 Yanzhou  Vil.    1.6946e-01  1.4930e-03  1.9555e-02  1.2012e+00  2.2969e-01\nD04 Dongxing Vil.    4.7774e-02  4.3102e-03  1.9109e-03  9.9429e-01  3.2008e-01\nD04 Zhongxing Vil.  -3.7147e-01 -1.5982e-03  1.0655e-01 -1.1331e+00  2.5718e-01\nD04 Heshun Vil.     -9.1812e-03  5.8954e-03  5.5255e-03 -2.0282e-01  8.3927e-01\nD04 Lixing Vil.      8.8989e-03 -6.5630e-04  3.0935e-05  1.7180e+00  8.5802e-02\nD04 Wencheng Vil.   -3.9019e-02 -5.6919e-04  8.6625e-03 -4.1312e-01  6.7952e-01\nD04 Yuanbao Vil.    -6.0704e-03  1.8595e-02  7.5916e-03 -2.8309e-01  7.7711e-01\nD04 Kaiyuan Vil.    -9.9733e-03  2.8295e-02  2.6143e-02 -2.3668e-01  8.1291e-01\nD04 Chengde Vil.     1.8791e-02 -1.2247e-02  1.3133e-02  2.7083e-01  7.8652e-01\nD08 Yonghua Vil.     2.3258e-04  5.6939e-04  3.5506e-04 -1.7874e-02  9.8574e-01\nD08 Junwang Vil.     1.9908e-01 -1.8712e-02  7.5766e-02  7.9122e-01  4.2882e-01\nD39 Yanxing Vil.     4.5857e-01 -5.3290e-03  1.4217e-01  1.2303e+00  2.1857e-01\nD04 Yuanmei Vil.    -1.6368e-02 -7.4051e-03  1.8632e-02 -6.5661e-02  9.4765e-01\nD08 Nanchang Vil.    3.7087e-02 -3.4420e-03  2.0237e-02  2.8490e-01  7.7572e-01\nD08 Qiancao Vil.    -3.4679e-03  2.4436e-03  3.4767e-03 -1.0026e-01  9.2014e-01\nD08 Fuqian Vil.      1.2058e-02  7.2346e-03  5.1667e-02  2.1222e-02  9.8307e-01\nD08 Nanmen Vil.      9.3355e-02 -2.8647e-02  9.4165e-03  1.2573e+00  2.0866e-01\nD04 Hexing Vil.      1.8183e-02 -1.0936e-02  6.7926e-03  3.5332e-01  7.2385e-01\nD39 Beiwan Vil.      8.2750e-01 -1.4870e-02  2.6874e-01  1.6249e+00  1.0418e-01\nD39 Beixing Vil.     5.9782e-01 -1.1263e-02  1.5721e-01  1.5362e+00  1.2450e-01\nD39 Longtan Vil.     5.3812e-01 -2.4227e-02  5.7548e-02  2.3442e+00  1.9069e-02\nD39 Puyuan Vil.      6.2255e-02  7.7608e-03  4.0479e-03  8.5651e-01  3.9172e-01\nD39 Sanmin Vil.      9.9432e-01  6.8732e-02  2.2275e-01  1.9612e+00  4.9859e-02\nD04 Ren'ai Vil.     -1.7263e-02  2.2794e-03  7.6872e-04 -7.0486e-01  4.8090e-01\nD04 Zhenxing Vil.    2.8528e-02 -3.5022e-03  2.9998e-03  5.8481e-01  5.5868e-01\nD04 Yongxiang Vil.   4.0433e-01 -1.0948e-01  8.3832e-02  1.7746e+00  7.5969e-02\nD04 Wenyuan Vil.     3.0901e-01 -1.4461e-02  8.9917e-03  3.4112e+00  6.4676e-04\nD08 Kaishan Vil.     1.3523e-02 -2.1051e-04  5.8596e-04  5.6735e-01  5.7048e-01\nD08 Daliang Vil.     9.0553e-02  4.9986e-02  6.4029e-02  1.6032e-01  8.7263e-01\nD08 Yaowang Vil.     3.1969e-01  6.1920e-02  2.5007e-01  5.1547e-01  6.0622e-01\nD08 Guangxian Vil.   5.1600e-02 -9.0633e-03  6.1939e-03  7.7081e-01  4.4082e-01\nD32 Erxing Vil.      7.4696e-01  5.6427e-02  3.1362e-01  1.2330e+00  2.1756e-01\nD32 Dajia Vil.       8.4283e-01  1.2509e-01  2.1087e-01  1.5630e+00  1.1805e-01\nD32 Renyi Vil.      -5.2979e-01 -1.9190e-01  7.0645e-01 -4.0202e-01  6.8767e-01\nD32 Tuku Vil.        4.3979e-01 -5.8786e-02  3.6526e-01  8.2496e-01  4.0939e-01\nD32 Taizi Vil.       1.7375e-01  2.6620e-02  3.7708e-02  7.5768e-01  4.4864e-01\nD06 Anxi Vil.        3.6280e-01  4.1014e-03  4.5504e-02  1.6815e+00  9.2662e-02\nD06 Da'an Vil.       2.2107e+00  5.4940e-03  2.1989e-01  4.7028e+00  2.5660e-06\nD06 Anhe Vil.        3.7927e-04 -1.3582e-04  2.0347e-06  3.6110e-01  7.1802e-01\nD06 Lixiang Vil.     5.3426e-01  2.4392e-02  2.1431e-01  1.1014e+00  2.7073e-01\nD06 Anqing Vil.      2.0721e-01  1.3440e-03  8.1106e-02  7.2287e-01  4.6976e-01\nD06 Meihua Vil.      4.0817e-01 -4.7998e-03  1.9319e-02  2.9711e+00  2.9671e-03\nD06 Ding'an Vil.     1.5408e-01 -1.1589e-02  6.9888e-02  6.2668e-01  5.3087e-01\nD06 Anshun Vil.      4.1835e-01  4.0490e-02  1.6393e-01  9.3325e-01  3.5069e-01\nD06 Zongtou Vil.     4.8212e-01  4.6275e-02  1.7132e-01  1.0530e+00  2.9235e-01\nD06 Yuandian Vil.    1.0357e-02 -8.2185e-02  1.4103e-01  2.4642e-01  8.0535e-01\nD06 Donghe Vil.      5.4684e-01 -5.6718e-02  1.1438e-01  1.7846e+00  7.4321e-02\nD39 Guangfu Vil.     5.5613e-01 -9.0016e-03  7.2277e-01  6.6474e-01  5.0622e-01\nD39 Shengli Vil.     4.6571e-01 -2.9189e-02  9.7438e-01  5.0137e-01  6.1611e-01\nD39 Jianguo Vil.    -4.5292e-02  2.5950e-03  9.9093e-02 -1.5212e-01  8.7909e-01\nD39 Liuhe Vil.       5.3902e-01  7.8504e-02  7.5956e-02  1.6710e+00  9.4730e-02\nD06 Yuanxi Vil.      7.8307e-01 -2.2231e-02  9.0213e-02  2.6812e+00  7.3366e-03\nD06 Chang'an Vil.    8.6502e-01 -1.6673e-02  1.1027e-01  2.6551e+00  7.9282e-03\nD39 Zhonghua Vil.    2.8321e-01 -2.4634e-02  8.6280e-02  1.0480e+00  2.9462e-01\nD39 Chenggong Vil.  -3.9143e-01 -2.6317e-02  1.4877e-01 -9.4659e-01  3.4385e-01\nD39 Zhongxing Vil.  -2.9690e-01  7.6663e-03  1.7211e-02 -2.3216e+00  2.0257e-02\nD39 Xishi Vil.       7.3603e-01 -8.4248e-02  2.2555e-01  1.7272e+00  8.4137e-02\nD39 Niaosong Vil.    4.3974e-01 -6.6616e-02  1.4361e-01  1.3362e+00  1.8149e-01\nD06 Xiangong Vil.    1.2368e+00  1.7793e-02  1.3540e-01  3.3128e+00  9.2378e-04\nD06 Zhounan Vil.     7.2684e-01 -1.8199e-03  9.0957e-02  2.4160e+00  1.5690e-02\nD06 Budai Vil.       7.6861e-01  4.3352e-02  1.7008e-01  1.7586e+00  7.8649e-02\nD06 Zhoubei Vil.     9.0016e-01 -3.7216e-02  3.1797e-01  1.6623e+00  9.6444e-02\nD06 Wennan Vil.      8.7916e-01 -4.1973e-02  3.4878e-01  1.5597e+00  1.1882e-01\nD06 Gongwen Vil.     1.1177e+00  4.8877e-02  2.6272e-01  2.0853e+00  3.7045e-02\nD06 Nanxing Vil.     1.1832e+00 -2.5326e-02  1.7698e-01  2.8726e+00  4.0707e-03\nD07 Yizai Vil.       1.5241e-01  6.5352e-03  1.1784e-01  4.2493e-01  6.7089e-01\nD07 Pingtong Vil.   -2.4576e-03 -1.4860e-03  1.4792e-04 -7.9886e-02  9.3633e-01\nD06 Haidong Vil.     3.1944e-01  1.7403e-02  1.5140e-02  2.4547e+00  1.4100e-02\n                       p_ii_sim p_folded_sim    skewness    kurtosis\nD06 Qingcao Vil.     2.0000e-02   1.0000e-02 -8.6171e-01  1.1503e+00\nD32 Bao'an Vil.      4.0000e-02   2.0000e-02 -5.8974e-01  3.1508e-01\nD08 Chihkan Vil.     9.2000e-01   4.6000e-01  8.7943e-02 -5.6410e-01\nD02 Dacheng Vil.     3.6000e-01   1.8000e-01 -5.3872e-01  3.1418e-02\nD06 Chengbei Vil.    2.0000e-02   1.0000e-02 -3.7730e-01 -3.7365e-02\nD06 Chengnan Vil.    2.0000e-02   1.0000e-02 -6.5511e-01  6.5736e-01\nD08 Fahua Vil.       3.2000e-01   1.6000e-01 -8.3947e-01  7.4931e-01\nD06 Hainan Vil.      6.8000e-01   3.4000e-01 -2.1061e-01 -5.1796e-01\nD06 Guo'an Vil.      1.8000e-01   9.0000e-02  5.1987e-01  5.2475e-01\nD06 Xixin Vil.       1.0000e-01   5.0000e-02 -7.2190e-01  1.4115e-01\nD06 Yuandong Vil.    6.0000e-02   3.0000e-02 -1.1147e+00  2.1084e+00\nD06 Chengzhong Vil.  2.0000e-02   1.0000e-02 -3.7215e-01 -1.3218e-01\nD06 Chengdong Vil.   2.0000e-02   1.0000e-02 -5.0507e-01 -2.2041e-01\nD06 Xuedong Vil.     2.0000e-02   1.0000e-02 -6.8112e-01  5.0803e-01\nD39 Dongwan Vil.     1.0000e-01   5.0000e-02 -1.0248e+00  3.7990e-01\nD39 Nanwan Vil.      3.8000e-01   1.9000e-01 -5.9471e-01  5.7336e-01\nD39 Kunshan Vil.     1.6000e-01   8.0000e-02  1.7514e-01 -6.3185e-01\nD39 Dawan Vil.       1.0000e-01   5.0000e-02 -5.4622e-01  9.4488e-02\nD39 Wuwang Vil.      6.0000e-02   3.0000e-02  8.9277e-01  1.6997e+00\nD39 Ankang Vil.      2.0000e-01   1.0000e-01  9.7027e-01  2.2804e+00\nD39 Xiqiao Vil.      6.8000e-01   3.4000e-01  5.5472e-01  7.9855e-01\nD39 Wangliao Vil.    6.0000e-02   3.0000e-02 -8.3704e-01  1.3114e+00\nD39 Daqiao Vil.      2.0000e-01   1.0000e-01  6.1294e-01 -1.7402e-02\nD39 Dongqiao Vil.    2.4000e-01   1.2000e-01  8.7039e-01  1.1750e+00\nD39 Wuzhu Vil.       2.0000e-02   1.0000e-02 -6.4057e-01  6.2556e-01\nD39 Wangxing Vil.    2.0000e-02   1.0000e-02 -1.1995e+00  3.0374e+00\nD01 Dazhi Vil.       5.6000e-01   2.8000e-01  5.6718e-01  8.6897e-01\nD01 Chongwen Vil.    4.0000e-01   2.0000e-01  5.3027e-01  5.2950e-01\nD01 Chongcheng Vil.  1.2000e-01   6.0000e-02 -5.2029e-01  2.7705e-01\nD01 Chongming Vil.   4.4000e-01   2.2000e-01 -2.6821e-02 -3.0842e-01\nD01 Dafu Vil.        3.6000e-01   1.8000e-01  1.4647e-01 -2.5636e-01\nD01 Chongde Vil.     1.2000e-01   6.0000e-02  5.7770e-01  5.1663e-01\nD01 Dade Vil.        5.0000e-01   2.5000e-01 -5.6226e-01  2.4007e-01\nD01 Chongxue Vil.    4.0000e-02   2.0000e-02  1.0874e-01  2.9305e-01\nD01 Heping Vil.      6.0000e-02   3.0000e-02  9.6365e-01  2.2023e+00\nD01 Chongshan Vil.   2.0000e-02   1.0000e-02  2.4769e-01 -4.4195e-01\nD01 Ludong Vil.      7.8000e-01   3.9000e-01 -6.3193e-01  1.1970e+00\nD01 Huwei Vil.       2.0000e-02   1.0000e-02  2.3061e-01 -4.1057e-01\nD01 Zhongxiao Vil.   3.4000e-01   1.7000e-01  3.4600e-01 -1.6945e-01\nD01 Yusheng Vil.     6.6000e-01   3.3000e-01 -2.9485e-01 -8.3392e-01\nD01 Chongxin Vil.    2.0000e-02   1.0000e-02  3.5134e-01  3.3673e-02\nD01 Deguang Vil.     1.8000e-01   9.0000e-02  8.5345e-01  9.7632e-01\nD01 Fuxing Vil.      1.0000e-01   5.0000e-02  6.0441e-01  1.5679e-01\nD01 Ziqiang Vil.     2.0000e-02   1.0000e-02  2.1539e-01 -3.5362e-01\nD01 Wensheng Vil.    5.4000e-01   2.7000e-01 -7.1260e-01  2.7867e-01\nD01 Fuyu Vil.        8.0000e-02   4.0000e-02 -6.8989e-01  1.1395e+00\nD01 Longshan Vil.    3.4000e-01   1.7000e-01  1.0697e+00  3.3645e+00\nD01 Guansheng Vil.   8.8000e-01   4.4000e-01  8.3006e-01  6.1721e-01\nD01 Xindong Vil.     8.0000e-01   4.0000e-01  6.4523e-01  4.1243e-01\nD01 Fuqiang Vil.     4.0000e-02   2.0000e-02  6.2649e-01  2.9222e-01\nD01 Quannan Vil.     9.6000e-01   4.8000e-01  4.0522e-01 -3.8973e-01\nD01 Dongsheng Vil.   8.0000e-02   4.0000e-02  4.4136e-01 -3.9381e-02\nD01 Dong'an Vil.     9.8000e-01   4.9000e-01 -6.2833e-01  4.3201e-01\nD01 Datong Vil.      5.6000e-01   2.8000e-01 -2.8001e-02 -5.9429e-01\nD01 Weiguo Vil.      9.8000e-01   4.9000e-01 -6.5657e-01  1.6156e-01\nD01 Yunong Vil.      2.4000e-01   1.2000e-01  7.4858e-01  1.1450e+00\nD01 Nansheng Vil.    4.6000e-01   2.3000e-01 -6.4327e-01 -5.8227e-02\nD01 Chonghui Vil.    6.4000e-01   3.2000e-01  4.4269e-01 -8.7853e-02\nD01 Dongmen Vil.     1.0000e+00   5.0000e-01 -7.6873e-01  1.2145e+00\nD01 Zhongxi Vil.     4.0000e-01   2.0000e-01 -2.8452e-01 -3.8569e-01\nD01 Dongming Vil.    5.4000e-01   2.7000e-01  3.9994e-01  1.6075e-01\nD01 Weixia Vil.      3.0000e-01   1.5000e-01 -6.4283e-01  1.1116e+00\nD01 Dongguang Vil.   1.4000e-01   7.0000e-02  5.8661e-01 -3.0421e-02\nD01 Houjia Vil.      1.4000e-01   7.0000e-02  1.1315e+00  2.8123e+00\nD01 Zhuangjing Vil.  6.0000e-02   3.0000e-02  3.3477e-01  3.5399e-01\nD01 Xiaodong Vil.    9.2000e-01   4.6000e-01  3.9828e-01 -3.2656e-01\nD01 Daxue Vil.       8.6000e-01   4.3000e-01 -6.8493e-01  5.8863e-01\nD01 Chengda Vil.     8.8000e-01   4.4000e-01 -5.4440e-01  4.4951e-02\nD04 Gongyuan Vil.    7.2000e-01   3.6000e-01 -5.2309e-01 -1.0443e-01\nD04 Zhonglou Vil.    9.6000e-01   4.8000e-01  6.2000e-01 -1.9736e-01\nD04 Xianbei Vil.     7.2000e-01   3.6000e-01 -6.0315e-01  8.0779e-02\nD04 Dafeng Vil.      8.6000e-01   4.3000e-01  4.9810e-01 -3.2469e-01\nD04 Dagang Vil.      9.2000e-01   4.6000e-01  8.1053e-01  8.0143e-01\nD04 Zhengjue Vil.    8.0000e-02   4.0000e-02  3.3853e-01  2.2209e-01\nD04 Dahe Vil.        6.0000e-02   3.0000e-02  7.0719e-01  5.0055e-01\nD04 Chenggong Vil.   2.0000e-01   1.0000e-01  4.4003e-01 -5.2282e-01\nD02 Fotan Vil.       8.0000e-02   4.0000e-02 -9.1807e-01  1.1193e+00\nD02 Tong'an Vil.     2.0000e-02   1.0000e-02 -3.1172e-01 -1.6458e-01\nD02 Song'an Vil.     1.4000e-01   7.0000e-02 -4.5093e-01 -2.7962e-01\nD02 Yongning Vil.    2.0000e-02   1.0000e-02 -5.6030e-01 -2.4018e-01\nD02 Xinan Vil.       8.0000e-02   4.0000e-02 -6.7308e-01  1.1870e-01\nD02 Xidong Vil.      7.4000e-01   3.7000e-01 -4.6958e-01  2.7883e-01\nD02 Xibei Vil.       4.0000e-02   2.0000e-02 -7.0286e-01  1.4578e-01\nD02 Nandou Vil.      5.4000e-01   2.7000e-01  4.4453e-01 -3.5090e-01\nD02 Nanhua Vil.      1.4000e-01   7.0000e-02  4.2163e-01 -3.8680e-01\nD02 Jiannan Vil.     3.8000e-01   1.9000e-01  7.1694e-01  1.0699e+00\nD02 Mingxing Vil.    2.0000e-02   1.0000e-02  1.4148e-01 -5.3543e-01\nD02 Junnan Vil.      2.0000e-02   1.0000e-02  2.6678e-01 -1.1592e-01\nD02 Kainan Vil.      4.4000e-01   2.2000e-01  8.4510e-01  4.3628e-01\nD02 Mingliang Vil.   2.0000e-02   1.0000e-02  8.4664e-01  6.9243e-01\nD02 Kunshen Vil.     6.2000e-01   3.1000e-01 -7.0929e-01 -1.2834e-01\nD02 Dazhong Vil.     5.8000e-01   2.9000e-01  2.8660e-01 -5.2782e-01\nD02 Guangming Vil.   2.2000e-01   1.1000e-01  5.0545e-01  3.3327e-01\nD02 Funan Vil.       1.8000e-01   9.0000e-02  8.4579e-01  9.4393e-01\nD02 Dalin Vil.       3.0000e-01   1.5000e-01 -5.9555e-01  1.0401e-01\nD02 Guozhai Vil.     2.4000e-01   1.2000e-01  1.0283e+00  2.7494e+00\nD02 Tianliao Vil.    1.0000e-01   5.0000e-02  3.0025e-01 -3.0039e-01\nD02 Xinsheng Vil.    1.0000e-01   5.0000e-02 -3.4969e-01 -2.2735e-01\nD02 Zhuxi Vil.       6.0000e-02   3.0000e-02 -4.1257e-01 -1.4272e-01\nD02 Mingde Vil.      4.8000e-01   2.4000e-01 -1.3742e-01 -5.5265e-01\nD02 Zaixing Vil.     1.6000e-01   8.0000e-02  3.0877e-01 -4.5134e-01\nD02 Zhangnan Vil.    2.4000e-01   1.2000e-01 -2.4992e-01 -1.2608e-01\nD02 Jinhua Vil.      6.8000e-01   3.4000e-01  7.0110e-01  4.4566e-02\nD02 Xinxing Vil.     3.0000e-01   1.5000e-01  8.3480e-01  1.3267e+00\nD02 Wennan Vil.      8.4000e-01   4.2000e-01  2.3877e-01 -7.0746e-01\nD02 Xinchang Vil.    8.6000e-01   4.3000e-01  8.5648e-01  2.2644e+00\nD02 Guangzhou Vil.   3.2000e-01   1.6000e-01 -1.2968e-01 -2.8995e-01\nD02 Wenhua Vil.      8.0000e-01   4.0000e-01 -1.1603e+00  1.9848e+00\nD06 Xiding Vil.      2.8000e-01   1.4000e-01  6.8755e-01  1.0299e+00\nD06 Haidian Vil.     2.0000e-02   1.0000e-02  6.8687e-01 -4.2966e-03\nD06 Xidong Vil.      4.0000e-02   2.0000e-02  1.4147e+00  5.4463e+00\nD06 Xibei Vil.       4.0000e-01   2.0000e-01  7.1233e-01  6.9809e-01\nD06 Xiqi Vil.        2.0000e-02   1.0000e-02  2.2511e-01 -6.5901e-01\nD06 Anfu Vil.        2.0000e-02   1.0000e-02  3.2582e-01 -3.8125e-01\nD06 Yantian  Vil.    8.0000e-02   4.0000e-02 -5.4616e-01  3.3510e-01\nD06 Fenghuang Vil.   6.8000e-01   3.4000e-01  6.5542e-01  4.0214e-01\nD06 Gongqin Vil.     1.6000e-01   8.0000e-02 -8.0958e-01  2.7165e-01\nD06 Shalun Vil.      4.0000e-02   2.0000e-02 -5.1440e-01  5.4378e-01\nD07 Wenping Vil.     6.6000e-01   3.3000e-01  5.3971e-01 -1.2992e-02\nD07 Guoping Vil.     2.6000e-01   1.3000e-01 -4.5042e-01  3.8785e-01\nD07 Yuping Vil.      5.8000e-01   2.9000e-01  7.5174e-01  3.3878e-01\nD07 Huaping Vil.     7.2000e-01   3.6000e-01 -6.8231e-01 -7.3927e-02\nD07 Yiping Vil.      9.6000e-01   4.8000e-01 -1.2798e+00  2.8793e+00\nD07 Jianping Vil.    6.4000e-01   3.2000e-01 -1.5777e-01 -5.3216e-01\nD06 Xingfu Vil.      6.0000e-02   3.0000e-02  5.7085e-01 -7.6587e-02\nD32 Shanglun Vil.    4.0000e-02   2.0000e-02 -6.4196e-01  2.4342e-01\nD32 Houbi Vil.       2.2000e-01   1.1000e-01 -7.5544e-01  1.7930e-01\nD32 Chenggong Vil.   2.0000e-02   1.0000e-02 -7.3731e-01  1.9236e+00\nD32 Renhe Vil.       3.6000e-01   1.8000e-01 -7.9612e-02 -3.5101e-01\nD32 Ren'ai Vil.      5.2000e-01   2.6000e-01 -8.6359e-01  4.9088e-01\nD32 Rende Vil.       4.4000e-01   2.2000e-01  2.7903e-01 -3.9931e-01\nD02 Xingnong Vil.    2.0000e-02   1.0000e-02 -8.3079e-01  1.2308e+00\nD02 Shenggong Vil.   2.0000e-02   1.0000e-02 -3.1537e-01  4.5241e-01\nD32 Xintian Vil.     6.4000e-01   3.2000e-01 -1.2355e+00  2.8216e+00\nD32 Yijia Vil.       6.4000e-01   3.2000e-01 -1.1816e+00  2.5325e+00\nD01 Degao Vil.       1.8000e-01   9.0000e-02  5.5986e-01 -3.0343e-01\nD01 Renhe Vil.       2.0000e-01   1.0000e-01  5.3443e-01  1.0735e-01\nD32 Zhongzhou Vil.   2.4000e-01   1.2000e-01 -6.2243e-01 -7.2053e-03\nD39 Xiwan Vil.       4.0000e-02   2.0000e-02 -5.2477e-01 -1.7327e-01\nD39 Jiading Vil.     4.0000e-02   2.0000e-02  2.9904e-01  1.1682e-01\nD39 Yongkang Vil.    9.0000e-01   4.5000e-01 -8.2727e-01  4.1554e-01\nD39 Zhengqiang Vil.  7.4000e-01   3.7000e-01  9.4186e-01  3.1599e-01\nD07 Yuguang Vil.     8.0000e-02   4.0000e-02 -4.7611e-01 -3.0626e-01\nD07 Jincheng Vil.    8.0000e-02   4.0000e-02 -6.6584e-01  6.7560e-01\nD39 Shangding Vil.   2.2000e-01   1.1000e-01  2.4535e-01 -5.8850e-01\nD39 Fuxing Vil.      9.4000e-01   4.7000e-01 -1.1829e-01 -2.8516e-01\nD39 Shenzhou Vil.    8.4000e-01   4.2000e-01 -4.0620e-01  3.9486e-01\nD39 Fuguo Vil.       4.2000e-01   2.1000e-01  4.0995e-01 -1.3367e-01\nD39 Sanhe Vil.       2.0000e-02   1.0000e-02 -3.8949e-01 -2.4163e-01\nD39 Fuhua Vil.       1.0000e-01   5.0000e-02  3.3948e-01 -3.6300e-01\nD39 Erwang Vil.      2.0000e-02   1.0000e-02  3.9320e-01  5.8314e-02\nD01 Dongzhi Vil.     2.6000e-01   1.3000e-01 -2.7041e-02 -4.9665e-01\nD02 Da'en Vil.       4.0000e-01   2.0000e-01  4.8754e-01  2.1431e-01\nD08 Xihu Vil.        7.4000e-01   3.7000e-01  4.4581e-01 -3.7823e-01\nD07 Ping'an Vil.     8.2000e-01   4.1000e-01 -4.7304e-01  6.1987e-02\nD08 Xixian Vil.      8.4000e-01   4.2000e-01 -6.0256e-02 -6.9844e-01\nD06 Sicao Vil.       1.8000e-01   9.0000e-02 -8.9210e-01  1.2767e+00\nD06 Andong Vil.      5.6000e-01   2.8000e-01 -6.4410e-01  6.6764e-01\nD06 Yuanzhong Vil.   2.0000e-02   1.0000e-02 -1.1745e+00  2.7462e+00\nD06 Chengxi Vil.     4.0000e-02   2.0000e-02 -9.1100e-01  6.0280e-01\nD06 Diandong Vil.    4.0000e-02   2.0000e-02 -8.4843e-02 -1.8665e-01\nD06 Xinshun Vil.     2.6000e-01   1.3000e-01 -5.1077e-01  8.1546e-01\nD39 Xinshu Vil.      4.0000e-02   2.0000e-02 -1.2106e+00  1.6331e+00\nD39 Yanxing  Vil.    7.2000e-01   3.6000e-01  1.1971e+00  2.0997e+00\nD06 Haixi Vil.       6.4000e-01   3.2000e-01 -9.4890e-01  9.2746e-01\nD06 Dianxi Vil.      2.0000e-02   1.0000e-02 -4.4206e-01 -2.7766e-01\nD32 Wenxian Vil.     1.8000e-01   9.0000e-02 -5.0037e-01  2.2620e-01\nD39 Longpu Vil.      8.0000e-02   4.0000e-02 -4.1489e-01 -5.5974e-01\nD39 Yongming Vil.    1.0000e-01   5.0000e-02 -5.2235e-01 -3.0370e-01\nD02 Yancheng Vil.    2.0000e-02   1.0000e-02  4.7664e-01  7.1340e-01\nD04 Beihua Vil.      6.6000e-01   3.3000e-01  8.8126e-02 -7.0935e-01\nD04 Huade Vil.       2.0000e-02   1.0000e-02 -3.2364e-01 -7.3315e-01\nD04 Fude Vil.        4.4000e-01   2.2000e-01 -5.1371e-01 -3.5586e-01\nD04 Zhangsheng Vil.  7.4000e-01   3.7000e-01 -4.9791e-02 -7.2620e-01\nD04 Zhangxing Vil.   4.8000e-01   2.4000e-01 -4.8743e-01 -5.3136e-01\nD04 Daxing Vil.      7.0000e-01   3.5000e-01  5.7087e-01  7.4038e-02\nD04 Daguang Vil.     6.0000e-02   3.0000e-02 -2.9876e-01 -2.5370e-01\nD04 Xiaobei Vil.     5.4000e-01   2.7000e-01  7.2706e-01  1.1462e+00\nD04 Shuang'an Vil.   5.8000e-01   2.9000e-01 -1.1993e-01 -5.2523e-01\nD04 Liren Vil.       8.0000e-01   4.0000e-01  4.1130e-01  5.2701e-02\nD08 Xiaoximen Vil.   5.6000e-01   2.8000e-01  4.4642e-01  8.4009e-01\nD08 Duiyue Vil.      6.6000e-01   3.3000e-01  1.1927e+00  1.9726e+00\nD08 Wutiaogang Vil.  2.6000e-01   1.3000e-01 -5.9288e-01  5.6792e-01\nD08 Nanmei Vil.      9.4000e-01   4.7000e-01  4.1765e-01  4.2360e-01\nD07 Wangcheng Vil.   8.0000e-01   4.0000e-01 -5.2364e-01  4.6078e-02\nD07 Tianfei Vil.     2.4000e-01   1.2000e-01  4.5071e-01  2.5131e-02\nD08 Chenghuang Vil.  6.0000e-01   3.0000e-01  1.7000e-01 -4.8644e-01\nD08 Xihe Vil.        5.6000e-01   2.8000e-01  1.6943e-01 -2.5035e-01\nD04 Beimen Vil.      2.4000e-01   1.2000e-01  5.9255e-01  5.8771e-01\nD39 Yanzhou  Vil.    1.8000e-01   9.0000e-02 -5.7783e-01  4.2322e-01\nD04 Dongxing Vil.    3.0000e-01   1.5000e-01  6.0474e-01 -1.8903e-01\nD04 Zhongxing Vil.   2.6000e-01   1.3000e-01 -6.2648e-01  4.8138e-01\nD04 Heshun Vil.      9.8000e-01   4.9000e-01  7.8060e-01  7.4367e-01\nD04 Lixing Vil.      1.2000e-01   6.0000e-02  7.5630e-01  4.3652e-01\nD04 Wencheng Vil.    7.0000e-01   3.5000e-01 -2.4498e-01 -7.5149e-01\nD04 Yuanbao Vil.     7.2000e-01   3.6000e-01 -7.4994e-01  3.4707e-01\nD04 Kaiyuan Vil.     7.2000e-01   3.6000e-01 -7.4705e-01  1.6562e+00\nD04 Chengde Vil.     7.4000e-01   3.7000e-01  2.8281e-01 -6.1833e-01\nD08 Yonghua Vil.     9.2000e-01   4.6000e-01  6.5125e-01  4.3879e-01\nD08 Junwang Vil.     4.2000e-01   2.1000e-01 -1.5356e-01 -1.5049e-01\nD39 Yanxing Vil.     1.8000e-01   9.0000e-02 -5.8557e-01  2.6074e-01\nD04 Yuanmei Vil.     8.4000e-01   4.2000e-01 -6.2968e-01  4.2913e-01\nD08 Nanchang Vil.    7.8000e-01   3.9000e-01 -4.7938e-01  4.5167e-01\nD08 Qiancao Vil.     9.6000e-01   4.8000e-01  6.1671e-01  2.0909e-01\nD08 Fuqian Vil.      9.8000e-01   4.9000e-01 -2.8566e-01  6.1816e-02\nD08 Nanmen Vil.      1.6000e-01   8.0000e-02 -4.6100e-01 -6.1455e-01\nD04 Hexing Vil.      7.6000e-01   3.8000e-01 -1.9247e-01 -1.5932e-01\nD39 Beiwan Vil.      8.0000e-02   4.0000e-02 -7.5209e-01  2.5619e-01\nD39 Beixing Vil.     8.0000e-02   4.0000e-02 -6.3723e-01  4.6943e-01\nD39 Longtan Vil.     2.0000e-02   1.0000e-02 -1.5891e-01 -7.5463e-01\nD39 Puyuan Vil.      4.0000e-01   2.0000e-01 -5.4960e-01  4.8435e-02\nD39 Sanmin Vil.      6.0000e-02   3.0000e-02 -3.5615e-04 -6.2483e-01\nD04 Ren'ai Vil.      5.0000e-01   2.5000e-01  9.1780e-02 -4.8862e-01\nD04 Zhenxing Vil.    6.8000e-01   3.4000e-01 -4.5747e-01 -5.8622e-01\nD04 Yongxiang Vil.   8.0000e-02   4.0000e-02  1.4486e-01 -5.6055e-01\nD04 Wenyuan Vil.     2.0000e-02   1.0000e-02  1.7566e-01 -3.4155e-01\nD08 Kaishan Vil.     7.0000e-01   3.5000e-01 -7.2160e-01 -3.0035e-01\nD08 Daliang Vil.     9.2000e-01   4.6000e-01 -6.3518e-01  5.3115e-01\nD08 Yaowang Vil.     5.2000e-01   2.6000e-01  3.6413e-01 -1.6594e-01\nD08 Guangxian Vil.   4.2000e-01   2.1000e-01  4.4138e-01  3.1669e-02\nD32 Erxing Vil.      1.2000e-01   6.0000e-02 -1.2926e+00  2.1467e+00\nD32 Dajia Vil.       1.0000e-01   5.0000e-02 -2.1909e-01 -4.0574e-01\nD32 Renyi Vil.       7.0000e-01   3.5000e-01  5.6417e-01  4.8429e-01\nD32 Tuku Vil.        5.0000e-01   2.5000e-01 -5.4873e-01 -4.7199e-01\nD32 Taizi Vil.       4.2000e-01   2.1000e-01 -3.4338e-01  3.5933e-01\nD06 Anxi Vil.        1.0000e-01   5.0000e-02  2.2951e-01 -5.1813e-01\nD06 Da'an Vil.       2.0000e-02   1.0000e-02  3.5216e-01  2.3507e-01\nD06 Anhe Vil.        7.6000e-01   3.8000e-01 -3.0410e-01 -1.7367e-01\nD06 Lixiang Vil.     3.8000e-01   1.9000e-01  6.3503e-01 -3.7713e-01\nD06 Anqing Vil.      5.2000e-01   2.6000e-01  1.3628e-02 -6.2999e-01\nD06 Meihua Vil.      2.0000e-02   1.0000e-02  1.2237e-01 -2.4692e-01\nD06 Ding'an Vil.     5.2000e-01   2.6000e-01  4.9452e-01  7.8255e-01\nD06 Anshun Vil.      3.2000e-01   1.6000e-01 -8.0343e-01  7.0027e-01\nD06 Zongtou Vil.     2.4000e-01   1.2000e-01 -8.2363e-01  1.1315e+00\nD06 Yuandian Vil.    9.0000e-01   4.5000e-01 -6.9933e-01  4.4920e-01\nD06 Donghe Vil.      6.0000e-02   3.0000e-02 -4.7537e-01 -1.0285e-01\nD39 Guangfu Vil.     5.4000e-01   2.7000e-01 -1.0089e+00  9.8605e-01\nD39 Shengli Vil.     7.0000e-01   3.5000e-01  1.5920e-01 -1.0421e-02\nD39 Jianguo Vil.     8.4000e-01   4.2000e-01 -3.6502e-01 -8.2428e-01\nD39 Liuhe Vil.       1.4000e-01   7.0000e-02  6.7074e-01  4.5886e-01\nD06 Yuanxi Vil.      2.0000e-02   1.0000e-02 -7.6696e-01  1.0158e+00\nD06 Chang'an Vil.    2.0000e-02   1.0000e-02 -7.3873e-01  4.3399e-01\nD39 Zhonghua Vil.    3.4000e-01   1.7000e-01  2.5917e-01 -3.9799e-01\nD39 Chenggong Vil.   3.8000e-01   1.9000e-01 -8.3706e-01  1.9200e-01\nD39 Zhongxing Vil.   6.0000e-02   3.0000e-02 -9.5085e-01  1.8914e+00\nD39 Xishi Vil.       4.0000e-02   2.0000e-02 -5.0799e-01 -7.4618e-02\nD39 Niaosong Vil.    2.4000e-01   1.2000e-01 -2.5868e-01 -9.3492e-02\nD06 Xiangong Vil.    2.0000e-02   1.0000e-02 -5.6952e-01  5.8907e-01\nD06 Zhounan Vil.     2.0000e-02   1.0000e-02 -1.2642e-01 -4.2247e-01\nD06 Budai Vil.       2.0000e-02   1.0000e-02 -4.0897e-01 -2.6149e-01\nD06 Zhoubei Vil.     1.0000e-01   5.0000e-02 -9.4046e-01  1.8077e+00\nD06 Wennan Vil.      4.0000e-02   2.0000e-02 -9.3113e-01  3.0632e-01\nD06 Gongwen Vil.     2.0000e-02   1.0000e-02 -4.6172e-01  2.0794e-02\nD06 Nanxing Vil.     2.0000e-02   1.0000e-02 -8.9216e-02 -4.5748e-01\nD07 Yizai Vil.       7.4000e-01   3.7000e-01 -6.2616e-01  2.5418e-01\nD07 Pingtong Vil.    9.4000e-01   4.7000e-01  5.3104e-01  2.8764e-01\nD06 Haidong Vil.     6.0000e-02   3.0000e-02  5.7574e-01 -6.0982e-03\n                           mean      median pysal\nD06 Qingcao Vil.     1.0000e+00  1.0000e+00     1\nD32 Bao'an Vil.      1.0000e+00  1.0000e+00     1\nD08 Chihkan Vil.     4.0000e+00  4.0000e+00     4\nD02 Dacheng Vil.     3.0000e+00  3.0000e+00     3\nD06 Chengbei Vil.    1.0000e+00  1.0000e+00     1\nD06 Chengnan Vil.    1.0000e+00  1.0000e+00     1\nD08 Fahua Vil.       1.0000e+00  1.0000e+00     1\nD06 Hainan Vil.      1.0000e+00  1.0000e+00     1\nD06 Guo'an Vil.      4.0000e+00  4.0000e+00     4\nD06 Xixin Vil.       1.0000e+00  2.0000e+00     1\nD06 Yuandong Vil.    1.0000e+00  1.0000e+00     1\nD06 Chengzhong Vil.  1.0000e+00  1.0000e+00     1\nD06 Chengdong Vil.   1.0000e+00  1.0000e+00     1\nD06 Xuedong Vil.     1.0000e+00  1.0000e+00     1\nD39 Dongwan Vil.     1.0000e+00  1.0000e+00     1\nD39 Nanwan Vil.      1.0000e+00  1.0000e+00     1\nD39 Kunshan Vil.     2.0000e+00  2.0000e+00     2\nD39 Dawan Vil.       1.0000e+00  1.0000e+00     1\nD39 Wuwang Vil.      4.0000e+00  4.0000e+00     4\nD39 Ankang Vil.      4.0000e+00  4.0000e+00     4\nD39 Xiqiao Vil.      4.0000e+00  4.0000e+00     4\nD39 Wangliao Vil.    3.0000e+00  3.0000e+00     3\nD39 Daqiao Vil.      4.0000e+00  4.0000e+00     4\nD39 Dongqiao Vil.    4.0000e+00  4.0000e+00     4\nD39 Wuzhu Vil.       1.0000e+00  1.0000e+00     1\nD39 Wangxing Vil.    1.0000e+00  1.0000e+00     1\nD01 Dazhi Vil.       4.0000e+00  4.0000e+00     4\nD01 Chongwen Vil.    4.0000e+00  4.0000e+00     4\nD01 Chongcheng Vil.  3.0000e+00  3.0000e+00     3\nD01 Chongming Vil.   3.0000e+00  3.0000e+00     3\nD01 Dafu Vil.        1.0000e+00  1.0000e+00     1\nD01 Chongde Vil.     4.0000e+00  4.0000e+00     4\nD01 Dade Vil.        1.0000e+00  1.0000e+00     1\nD01 Chongxue Vil.    4.0000e+00  4.0000e+00     4\nD01 Heping Vil.      4.0000e+00  4.0000e+00     4\nD01 Chongshan Vil.   4.0000e+00  4.0000e+00     4\nD01 Ludong Vil.      3.0000e+00  3.0000e+00     3\nD01 Huwei Vil.       4.0000e+00  4.0000e+00     4\nD01 Zhongxiao Vil.   4.0000e+00  4.0000e+00     4\nD01 Yusheng Vil.     3.0000e+00  3.0000e+00     3\nD01 Chongxin Vil.    4.0000e+00  4.0000e+00     4\nD01 Deguang Vil.     4.0000e+00  4.0000e+00     4\nD01 Fuxing Vil.      4.0000e+00  4.0000e+00     4\nD01 Ziqiang Vil.     4.0000e+00  4.0000e+00     4\nD01 Wensheng Vil.    3.0000e+00  4.0000e+00     3\nD01 Fuyu Vil.        3.0000e+00  4.0000e+00     3\nD01 Longshan Vil.    4.0000e+00  4.0000e+00     4\nD01 Guansheng Vil.   2.0000e+00  2.0000e+00     2\nD01 Xindong Vil.     2.0000e+00  2.0000e+00     2\nD01 Fuqiang Vil.     4.0000e+00  4.0000e+00     4\nD01 Quannan Vil.     2.0000e+00  2.0000e+00     2\nD01 Dongsheng Vil.   4.0000e+00  4.0000e+00     4\nD01 Dong'an Vil.     1.0000e+00  1.0000e+00     1\nD01 Datong Vil.      2.0000e+00  2.0000e+00     2\nD01 Weiguo Vil.      1.0000e+00  1.0000e+00     1\nD01 Yunong Vil.      4.0000e+00  4.0000e+00     4\nD01 Nansheng Vil.    3.0000e+00  3.0000e+00     3\nD01 Chonghui Vil.    4.0000e+00  4.0000e+00     4\nD01 Dongmen Vil.     1.0000e+00  1.0000e+00     1\nD01 Zhongxi Vil.     1.0000e+00  1.0000e+00     1\nD01 Dongming Vil.    4.0000e+00  4.0000e+00     4\nD01 Weixia Vil.      1.0000e+00  1.0000e+00     1\nD01 Dongguang Vil.   4.0000e+00  4.0000e+00     4\nD01 Houjia Vil.      4.0000e+00  4.0000e+00     4\nD01 Zhuangjing Vil.  4.0000e+00  4.0000e+00     4\nD01 Xiaodong Vil.    4.0000e+00  4.0000e+00     4\nD01 Daxue Vil.       1.0000e+00  1.0000e+00     1\nD01 Chengda Vil.     1.0000e+00  1.0000e+00     1\nD04 Gongyuan Vil.    3.0000e+00  4.0000e+00     3\nD04 Zhonglou Vil.    2.0000e+00  2.0000e+00     2\nD04 Xianbei Vil.     3.0000e+00  3.0000e+00     3\nD04 Dafeng Vil.      4.0000e+00  4.0000e+00     4\nD04 Dagang Vil.      2.0000e+00  2.0000e+00     2\nD04 Zhengjue Vil.    4.0000e+00  4.0000e+00     4\nD04 Dahe Vil.        4.0000e+00  4.0000e+00     4\nD04 Chenggong Vil.   4.0000e+00  4.0000e+00     4\nD02 Fotan Vil.       1.0000e+00  1.0000e+00     1\nD02 Tong'an Vil.     1.0000e+00  1.0000e+00     1\nD02 Song'an Vil.     1.0000e+00  1.0000e+00     1\nD02 Yongning Vil.    1.0000e+00  1.0000e+00     1\nD02 Xinan Vil.       1.0000e+00  1.0000e+00     1\nD02 Xidong Vil.      1.0000e+00  1.0000e+00     1\nD02 Xibei Vil.       1.0000e+00  1.0000e+00     1\nD02 Nandou Vil.      4.0000e+00  4.0000e+00     4\nD02 Nanhua Vil.      4.0000e+00  4.0000e+00     4\nD02 Jiannan Vil.     4.0000e+00  4.0000e+00     4\nD02 Mingxing Vil.    4.0000e+00  4.0000e+00     4\nD02 Junnan Vil.      4.0000e+00  4.0000e+00     4\nD02 Kainan Vil.      4.0000e+00  4.0000e+00     4\nD02 Mingliang Vil.   4.0000e+00  4.0000e+00     4\nD02 Kunshen Vil.     1.0000e+00  1.0000e+00     1\nD02 Dazhong Vil.     2.0000e+00  2.0000e+00     2\nD02 Guangming Vil.   4.0000e+00  4.0000e+00     4\nD02 Funan Vil.       4.0000e+00  4.0000e+00     4\nD02 Dalin Vil.       1.0000e+00  1.0000e+00     1\nD02 Guozhai Vil.     4.0000e+00  4.0000e+00     4\nD02 Tianliao Vil.    4.0000e+00  4.0000e+00     4\nD02 Xinsheng Vil.    1.0000e+00  1.0000e+00     1\nD02 Zhuxi Vil.       1.0000e+00  1.0000e+00     1\nD02 Mingde Vil.      3.0000e+00  3.0000e+00     3\nD02 Zaixing Vil.     4.0000e+00  4.0000e+00     4\nD02 Zhangnan Vil.    3.0000e+00  3.0000e+00     3\nD02 Jinhua Vil.      4.0000e+00  4.0000e+00     4\nD02 Xinxing Vil.     4.0000e+00  4.0000e+00     4\nD02 Wennan Vil.      4.0000e+00  4.0000e+00     4\nD02 Xinchang Vil.    4.0000e+00  4.0000e+00     4\nD02 Guangzhou Vil.   3.0000e+00  4.0000e+00     3\nD02 Wenhua Vil.      1.0000e+00  2.0000e+00     1\nD06 Xiding Vil.      4.0000e+00  4.0000e+00     4\nD06 Haidian Vil.     4.0000e+00  4.0000e+00     4\nD06 Xidong Vil.      4.0000e+00  4.0000e+00     4\nD06 Xibei Vil.       4.0000e+00  4.0000e+00     4\nD06 Xiqi Vil.        4.0000e+00  4.0000e+00     4\nD06 Anfu Vil.        4.0000e+00  4.0000e+00     4\nD06 Yantian  Vil.    1.0000e+00  1.0000e+00     1\nD06 Fenghuang Vil.   4.0000e+00  4.0000e+00     4\nD06 Gongqin Vil.     1.0000e+00  1.0000e+00     1\nD06 Shalun Vil.      1.0000e+00  1.0000e+00     1\nD07 Wenping Vil.     2.0000e+00  2.0000e+00     2\nD07 Guoping Vil.     1.0000e+00  1.0000e+00     1\nD07 Yuping Vil.      2.0000e+00  2.0000e+00     2\nD07 Huaping Vil.     1.0000e+00  1.0000e+00     1\nD07 Yiping Vil.      1.0000e+00  1.0000e+00     1\nD07 Jianping Vil.    1.0000e+00  1.0000e+00     1\nD06 Xingfu Vil.      4.0000e+00  4.0000e+00     4\nD32 Shanglun Vil.    1.0000e+00  1.0000e+00     1\nD32 Houbi Vil.       1.0000e+00  1.0000e+00     1\nD32 Chenggong Vil.   1.0000e+00  1.0000e+00     1\nD32 Renhe Vil.       1.0000e+00  1.0000e+00     1\nD32 Ren'ai Vil.      1.0000e+00  1.0000e+00     1\nD32 Rende Vil.       4.0000e+00  4.0000e+00     4\nD02 Xingnong Vil.    1.0000e+00  1.0000e+00     1\nD02 Shenggong Vil.   1.0000e+00  1.0000e+00     1\nD32 Xintian Vil.     3.0000e+00  3.0000e+00     3\nD32 Yijia Vil.       3.0000e+00  3.0000e+00     3\nD01 Degao Vil.       4.0000e+00  4.0000e+00     4\nD01 Renhe Vil.       4.0000e+00  4.0000e+00     4\nD32 Zhongzhou Vil.   1.0000e+00  1.0000e+00     1\nD39 Xiwan Vil.       1.0000e+00  1.0000e+00     1\nD39 Jiading Vil.     4.0000e+00  4.0000e+00     4\nD39 Yongkang Vil.    1.0000e+00  1.0000e+00     1\nD39 Zhengqiang Vil.  2.0000e+00  2.0000e+00     2\nD07 Yuguang Vil.     1.0000e+00  1.0000e+00     1\nD07 Jincheng Vil.    1.0000e+00  1.0000e+00     1\nD39 Shangding Vil.   3.0000e+00  3.0000e+00     3\nD39 Fuxing Vil.      3.0000e+00  3.0000e+00     3\nD39 Shenzhou Vil.    3.0000e+00  3.0000e+00     3\nD39 Fuguo Vil.       4.0000e+00  4.0000e+00     4\nD39 Sanhe Vil.       3.0000e+00  4.0000e+00     3\nD39 Fuhua Vil.       4.0000e+00  4.0000e+00     4\nD39 Erwang Vil.      4.0000e+00  4.0000e+00     4\nD01 Dongzhi Vil.     1.0000e+00  1.0000e+00     1\nD02 Da'en Vil.       2.0000e+00  2.0000e+00     2\nD08 Xihu Vil.        4.0000e+00  4.0000e+00     4\nD07 Ping'an Vil.     1.0000e+00  1.0000e+00     1\nD08 Xixian Vil.      1.0000e+00  1.0000e+00     1\nD06 Sicao Vil.       1.0000e+00  1.0000e+00     1\nD06 Andong Vil.      3.0000e+00  4.0000e+00     3\nD06 Yuanzhong Vil.   1.0000e+00  1.0000e+00     1\nD06 Chengxi Vil.     1.0000e+00  1.0000e+00     1\nD06 Diandong Vil.    1.0000e+00  1.0000e+00     1\nD06 Xinshun Vil.     1.0000e+00  2.0000e+00     1\nD39 Xinshu Vil.      1.0000e+00  1.0000e+00     1\nD39 Yanxing  Vil.    2.0000e+00  2.0000e+00     2\nD06 Haixi Vil.       3.0000e+00  3.0000e+00     3\nD06 Dianxi Vil.      1.0000e+00  1.0000e+00     1\nD32 Wenxian Vil.     1.0000e+00  1.0000e+00     1\nD39 Longpu Vil.      1.0000e+00  1.0000e+00     1\nD39 Yongming Vil.    1.0000e+00  1.0000e+00     1\nD02 Yancheng Vil.    4.0000e+00  4.0000e+00     4\nD04 Beihua Vil.      4.0000e+00  4.0000e+00     4\nD04 Huade Vil.       3.0000e+00  3.0000e+00     3\nD04 Fude Vil.        3.0000e+00  3.0000e+00     3\nD04 Zhangsheng Vil.  3.0000e+00  3.0000e+00     3\nD04 Zhangxing Vil.   3.0000e+00  3.0000e+00     3\nD04 Daxing Vil.      4.0000e+00  4.0000e+00     4\nD04 Daguang Vil.     3.0000e+00  4.0000e+00     3\nD04 Xiaobei Vil.     4.0000e+00  4.0000e+00     4\nD04 Shuang'an Vil.   3.0000e+00  3.0000e+00     3\nD04 Liren Vil.       4.0000e+00  4.0000e+00     4\nD08 Xiaoximen Vil.   2.0000e+00  2.0000e+00     2\nD08 Duiyue Vil.      4.0000e+00  4.0000e+00     4\nD08 Wutiaogang Vil.  3.0000e+00  4.0000e+00     3\nD08 Nanmei Vil.      4.0000e+00  4.0000e+00     4\nD07 Wangcheng Vil.   1.0000e+00  1.0000e+00     1\nD07 Tianfei Vil.     2.0000e+00  2.0000e+00     2\nD08 Chenghuang Vil.  2.0000e+00  2.0000e+00     2\nD08 Xihe Vil.        4.0000e+00  4.0000e+00     4\nD04 Beimen Vil.      4.0000e+00  4.0000e+00     4\nD39 Yanzhou  Vil.    1.0000e+00  1.0000e+00     1\nD04 Dongxing Vil.    4.0000e+00  4.0000e+00     4\nD04 Zhongxing Vil.   3.0000e+00  3.0000e+00     3\nD04 Heshun Vil.      2.0000e+00  2.0000e+00     2\nD04 Lixing Vil.      4.0000e+00  4.0000e+00     4\nD04 Wencheng Vil.    3.0000e+00  3.0000e+00     3\nD04 Yuanbao Vil.     3.0000e+00  3.0000e+00     3\nD04 Kaiyuan Vil.     3.0000e+00  3.0000e+00     3\nD04 Chengde Vil.     4.0000e+00  4.0000e+00     4\nD08 Yonghua Vil.     4.0000e+00  2.0000e+00     4\nD08 Junwang Vil.     1.0000e+00  1.0000e+00     1\nD39 Yanxing Vil.     1.0000e+00  1.0000e+00     1\nD04 Yuanmei Vil.     3.0000e+00  3.0000e+00     3\nD08 Nanchang Vil.    1.0000e+00  1.0000e+00     1\nD08 Qiancao Vil.     2.0000e+00  2.0000e+00     2\nD08 Fuqian Vil.      1.0000e+00  1.0000e+00     1\nD08 Nanmen Vil.      1.0000e+00  1.0000e+00     1\nD04 Hexing Vil.      1.0000e+00  1.0000e+00     1\nD39 Beiwan Vil.      1.0000e+00  1.0000e+00     1\nD39 Beixing Vil.     1.0000e+00  1.0000e+00     1\nD39 Longtan Vil.     1.0000e+00  1.0000e+00     1\nD39 Puyuan Vil.      1.0000e+00  2.0000e+00     1\nD39 Sanmin Vil.      1.0000e+00  1.0000e+00     1\nD04 Ren'ai Vil.      2.0000e+00  2.0000e+00     2\nD04 Zhenxing Vil.    1.0000e+00  2.0000e+00     1\nD04 Yongxiang Vil.   4.0000e+00  4.0000e+00     4\nD04 Wenyuan Vil.     4.0000e+00  4.0000e+00     4\nD08 Kaishan Vil.     1.0000e+00  2.0000e+00     1\nD08 Daliang Vil.     1.0000e+00  1.0000e+00     1\nD08 Yaowang Vil.     4.0000e+00  4.0000e+00     4\nD08 Guangxian Vil.   4.0000e+00  4.0000e+00     4\nD32 Erxing Vil.      1.0000e+00  1.0000e+00     1\nD32 Dajia Vil.       1.0000e+00  1.0000e+00     1\nD32 Renyi Vil.       2.0000e+00  2.0000e+00     2\nD32 Tuku Vil.        1.0000e+00  1.0000e+00     1\nD32 Taizi Vil.       1.0000e+00  1.0000e+00     1\nD06 Anxi Vil.        4.0000e+00  4.0000e+00     4\nD06 Da'an Vil.       4.0000e+00  4.0000e+00     4\nD06 Anhe Vil.        1.0000e+00  2.0000e+00     1\nD06 Lixiang Vil.     4.0000e+00  4.0000e+00     4\nD06 Anqing Vil.      4.0000e+00  4.0000e+00     4\nD06 Meihua Vil.      4.0000e+00  4.0000e+00     4\nD06 Ding'an Vil.     4.0000e+00  4.0000e+00     4\nD06 Anshun Vil.      1.0000e+00  1.0000e+00     1\nD06 Zongtou Vil.     1.0000e+00  1.0000e+00     1\nD06 Yuandian Vil.    1.0000e+00  1.0000e+00     1\nD06 Donghe Vil.      1.0000e+00  1.0000e+00     1\nD39 Guangfu Vil.     1.0000e+00  1.0000e+00     1\nD39 Shengli Vil.     4.0000e+00  4.0000e+00     4\nD39 Jianguo Vil.     3.0000e+00  3.0000e+00     3\nD39 Liuhe Vil.       4.0000e+00  4.0000e+00     4\nD06 Yuanxi Vil.      1.0000e+00  1.0000e+00     1\nD06 Chang'an Vil.    1.0000e+00  1.0000e+00     1\nD39 Zhonghua Vil.    4.0000e+00  4.0000e+00     4\nD39 Chenggong Vil.   3.0000e+00  3.0000e+00     3\nD39 Zhongxing Vil.   3.0000e+00  3.0000e+00     3\nD39 Xishi Vil.       1.0000e+00  1.0000e+00     1\nD39 Niaosong Vil.    1.0000e+00  1.0000e+00     1\nD06 Xiangong Vil.    1.0000e+00  1.0000e+00     1\nD06 Zhounan Vil.     1.0000e+00  1.0000e+00     1\nD06 Budai Vil.       1.0000e+00  1.0000e+00     1\nD06 Zhoubei Vil.     1.0000e+00  1.0000e+00     1\nD06 Wennan Vil.      1.0000e+00  1.0000e+00     1\nD06 Gongwen Vil.     1.0000e+00  1.0000e+00     1\nD06 Nanxing Vil.     1.0000e+00  1.0000e+00     1\nD07 Yizai Vil.       1.0000e+00  1.0000e+00     1\nD07 Pingtong Vil.    2.0000e+00  2.0000e+00     2\nD06 Haidong Vil.     4.0000e+00  4.0000e+00     4\n\n\n\nlocalMI.map &lt;- tm_shape(localMoranData) +\n  tm_fill(col = \"ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(localMoranData) +\n  tm_fill(col = \"p_ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nWhat does this tell us?"
  },
  {
    "objectID": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#plotting-moran-scatter-plot",
    "href": "take_home_Ex/take_home_Ex_02/take_home_Ex02.html#plotting-moran-scatter-plot",
    "title": "Importing the packages",
    "section": "Plotting Moran Scatter Plot",
    "text": "Plotting Moran Scatter Plot\n\nlisa &lt;- unnest(localMoran)\n\nWarning: `cols` is now required when using `unnest()`.\nℹ Please use `cols = c()`.\n\nlisa\n\n# A tibble: 257 × 12\n        ii       eii  var_ii    z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.40   -0.0798   0.618    1.89   0.0591      0.02         0.01  -0.862 \n 2  0.757  -0.0270   0.154    2.00   0.0456      0.04         0.02  -0.590 \n 3  0.0349  0.0213   0.0493   0.0611 0.951       0.92         0.46   0.0879\n 4 -0.214   0.0247   0.0838  -0.826  0.409       0.36         0.18  -0.539 \n 5  1.43    0.00382  0.308    2.57   0.0101      0.02         0.01  -0.377 \n 6  1.30    0.0168   0.204    2.83   0.00462     0.02         0.01  -0.655 \n 7  0.326  -0.000292 0.0960   1.05   0.292       0.32         0.16  -0.839 \n 8  0.0206 -0.0321   0.0170   0.404  0.686       0.68         0.34  -0.211 \n 9  0.403   0.0136   0.0791   1.38   0.166       0.18         0.09   0.520 \n10  0.0864  0.00637  0.00325  1.40   0.160       0.1          0.05  -0.722 \n# ℹ 247 more rows\n# ℹ 4 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;\n\n\n** Continue with sf dep - skip first\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  }
]